/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockOpynFactory,
  MockOpynFactoryInterface,
} from "../../../contracts/test-mocks/MockOpynFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "getOtoken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "getTargetOtokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610145806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063115470541461003b578063b86b9a641461003b575b600080fd5b6100686100493660046100a0565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc9695505050505050565b6040516001600160a01b03909116815260200160405180910390f35b80356001600160a01b038116811461009b57600080fd5b919050565b60008060008060008060c087890312156100b957600080fd5b6100c287610084565b95506100d060208801610084565b94506100de60408801610084565b9350606087013592506080870135915060a0870135801515811461010157600080fd5b80915050929550929550929556fea2646970667358221220cab92ed481ebe37cafdf6b6e1de8b1ec81ae8825b142e8012fd49f7660da76ec64736f6c634300080e0033";

type MockOpynFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOpynFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOpynFactory__factory extends ContractFactory {
  constructor(...args: MockOpynFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockOpynFactory> {
    return super.deploy(overrides || {}) as Promise<MockOpynFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockOpynFactory {
    return super.attach(address) as MockOpynFactory;
  }
  override connect(signer: Signer): MockOpynFactory__factory {
    return super.connect(signer) as MockOpynFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOpynFactoryInterface {
    return new utils.Interface(_abi) as MockOpynFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOpynFactory {
    return new Contract(address, _abi, signerOrProvider) as MockOpynFactory;
  }
}
