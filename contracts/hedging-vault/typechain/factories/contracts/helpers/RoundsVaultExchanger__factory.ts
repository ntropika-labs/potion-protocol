/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RoundsVaultExchanger,
  RoundsVaultExchangerInterface,
} from "../../../contracts/helpers/RoundsVaultExchanger";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IBaseRoundsVault",
        name: "inputVault",
        type: "address",
      },
      {
        internalType: "contract IBaseRoundsVault",
        name: "outputVault",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "exchangeInputForOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IBaseRoundsVault",
        name: "inputVault",
        type: "address",
      },
      {
        internalType: "contract IBaseRoundsVault",
        name: "outputVault",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "exchangeInputForOutputBatch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109d9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633a30bab71461003b5780633e61c57c14610060575b600080fd5b61004e61004936600461076d565b610073565b60405190815260200160405180910390f35b61004e61006e366004610802565b6101ea565b6000806001600160a01b038816631c8af6608787878730336040518763ffffffff1660e01b81526004016100ac9695949392919061087e565b6020604051808303816000875af11580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef91906108cc565b905061015d886001600160a01b0316635898ec3b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610132573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015691906108e5565b888361036c565b6001600160a01b038716636e553f6582336040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044016020604051808303816000875af11580156101ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101de91906108cc565b98975050505050505050565b60408051639ce56ebf60e01b81526004810184905260248101839052306044820152336064820152905160009182916001600160a01b03881691639ce56ebf916084808301926020929190829003018187875af115801561024f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027391906108cc565b90506102e1866001600160a01b0316635898ec3b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102da91906108e5565b868361036c565b6001600160a01b038516636e553f6582336040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044016020604051808303816000875af115801561033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036291906108cc565b9695505050505050565b8015806103e65750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e491906108cc565b155b61045d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526104af9084906104b4565b505050565b6000610509826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105869092919063ffffffff16565b8051909150156104af57808060200190518101906105279190610902565b6104af5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610454565b6060610595848460008561059f565b90505b9392505050565b6060824710156106005760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610454565b6001600160a01b0385163b6106575760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610454565b600080866001600160a01b031685876040516106739190610954565b60006040518083038185875af1925050503d80600081146106b0576040519150601f19603f3d011682016040523d82523d6000602084013e6106b5565b606091505b50915091506106c58282866106d0565b979650505050505050565b606083156106df575081610598565b8251156106ef5782518084602001fd5b8160405162461bcd60e51b81526004016104549190610970565b6001600160a01b038116811461071e57600080fd5b50565b60008083601f84011261073357600080fd5b50813567ffffffffffffffff81111561074b57600080fd5b6020830191508360208260051b850101111561076657600080fd5b9250929050565b6000806000806000806080878903121561078657600080fd5b863561079181610709565b955060208701356107a181610709565b9450604087013567ffffffffffffffff808211156107be57600080fd5b6107ca8a838b01610721565b909650945060608901359150808211156107e357600080fd5b506107f089828a01610721565b979a9699509497509295939492505050565b6000806000806080858703121561081857600080fd5b843561082381610709565b9350602085013561083381610709565b93969395505050506040820135916060013590565b81835260006001600160fb1b0383111561086157600080fd5b8260051b8083602087013760009401602001938452509192915050565b60808152600061089260808301888a610848565b82810360208401526108a5818789610848565b9150506001600160a01b038085166040840152808416606084015250979650505050505050565b6000602082840312156108de57600080fd5b5051919050565b6000602082840312156108f757600080fd5b815161059881610709565b60006020828403121561091457600080fd5b8151801515811461059857600080fd5b60005b8381101561093f578181015183820152602001610927565b8381111561094e576000848401525b50505050565b60008251610966818460208701610924565b9190910192915050565b602081526000825180602084015261098f816040850160208701610924565b601f01601f1916919091016040019291505056fea264697066735822122030a1e11dff80de73e2d18c48ccd6c96edb69327cb306c607a3bd87b718aaf21164736f6c634300080e0033";

type RoundsVaultExchangerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoundsVaultExchangerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RoundsVaultExchanger__factory extends ContractFactory {
  constructor(...args: RoundsVaultExchangerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RoundsVaultExchanger> {
    return super.deploy(overrides || {}) as Promise<RoundsVaultExchanger>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RoundsVaultExchanger {
    return super.attach(address) as RoundsVaultExchanger;
  }
  override connect(signer: Signer): RoundsVaultExchanger__factory {
    return super.connect(signer) as RoundsVaultExchanger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoundsVaultExchangerInterface {
    return new utils.Interface(_abi) as RoundsVaultExchangerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RoundsVaultExchanger {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RoundsVaultExchanger;
  }
}
