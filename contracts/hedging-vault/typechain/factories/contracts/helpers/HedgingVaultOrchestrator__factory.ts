/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  HedgingVaultOrchestrator,
  HedgingVaultOrchestratorInterface,
} from "../../../contracts/helpers/HedgingVaultOrchestrator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "canEnterNextRound",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "investmentVault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "inputToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "expectedPriceRate",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "swapPath",
            type: "bytes",
          },
        ],
        internalType: "struct IUniswapV3Oracle.SwapInfo",
        name: "prevRoundExitSwapInfo",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "lp",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "poolId",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "int256",
                    name: "a_59x18",
                    type: "int256",
                  },
                  {
                    internalType: "int256",
                    name: "b_59x18",
                    type: "int256",
                  },
                  {
                    internalType: "int256",
                    name: "c_59x18",
                    type: "int256",
                  },
                  {
                    internalType: "int256",
                    name: "d_59x18",
                    type: "int256",
                  },
                  {
                    internalType: "int256",
                    name: "max_util_59x18",
                    type: "int256",
                  },
                ],
                internalType: "struct ICurveManager.Curve",
                name: "curve",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "underlyingAsset",
                    type: "address",
                  },
                  {
                    internalType: "address",
                    name: "strikeAsset",
                    type: "address",
                  },
                  {
                    internalType: "bool",
                    name: "isPut",
                    type: "bool",
                  },
                  {
                    internalType: "uint256",
                    name: "maxStrikePercent",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "maxDurationInDays",
                    type: "uint256",
                  },
                ],
                internalType: "struct ICriteriaManager.Criteria",
                name: "criteria",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "orderSizeInOtokens",
                type: "uint256",
              },
            ],
            internalType: "struct IPotionLiquidityPool.CounterpartyDetails[]",
            name: "sellers",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "targetPotionAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "underlyingAsset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "strikePriceInUSDC",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expirationTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expectedPremiumInUSDC",
            type: "uint256",
          },
        ],
        internalType: "struct PotionBuyInfo",
        name: "nextRoundPotionBuyInfo",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "inputToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "expectedPriceRate",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "swapPath",
            type: "bytes",
          },
        ],
        internalType: "struct IUniswapV3Oracle.SwapInfo",
        name: "nextRoundEnterSwapInfo",
        type: "tuple",
      },
    ],
    name: "nextRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "potionBuyAction",
    outputs: [
      {
        internalType: "contract IPotionBuyAction",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "roundsInputVault",
    outputs: [
      {
        internalType: "contract IRoundsInputVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundsOutputVault",
    outputs: [
      {
        internalType: "contract IRoundsOutputVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "investmentVault_",
        type: "address",
      },
      {
        internalType: "address",
        name: "potionBuyAction_",
        type: "address",
      },
      {
        internalType: "address",
        name: "roundsInputVault_",
        type: "address",
      },
      {
        internalType: "address",
        name: "roundsOutputVault_",
        type: "address",
      },
    ],
    name: "setSystemAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b9b8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063cad136b611610066578063cad136b614610115578063f2fde38b14610128578063f3173f931461013b578063f473ecb91461014e578063fd94172c1461016157600080fd5b8063058283a5146100a3578063715018a6146100c05780638da5cb5b146100ca5780639957cf8e146100ef5780639bc9b83914610102575b600080fd5b6100ab610174565b60405190151581526020015b60405180910390f35b6100c86101e7565b005b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100b7565b6004546100d7906001600160a01b031681565b6001546100d7906001600160a01b031681565b6100c8610123366004610728565b610226565b6100c86101363660046107d4565b6105ab565b6100c86101493660046107f6565b610646565b6003546100d7906001600160a01b031681565b6002546100d7906001600160a01b031681565b600154604080516325385ba360e11b815290516000926001600160a01b031691634a70b7469160048083019260209291908290030181865afa1580156101be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e29190610858565b905090565b6000546001600160a01b0316331461021a5760405162461bcd60e51b815260040161021190610875565b60405180910390fd5b61022460006106c0565b565b6000546001600160a01b031633146102505760405162461bcd60e51b815260040161021190610875565b60015460408051635479cf7960e01b815290516000926001600160a01b031691635479cf799160048083019260209291908290030181865afa15801561029a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102be91906108aa565b905060028160028111156102d4576102d46108cb565b036103b657600254604051636d29753d60e11b81526001600160a01b039091169063da52ea7a9061030990879060040161090a565b600060405180830381600087803b15801561032357600080fd5b505af1158015610337573d6000803e3d6000fd5b50505050600160009054906101000a90046001600160a01b03166001600160a01b031663997292166040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b491906109a6565b505b600360009054906101000a90046001600160a01b03166001600160a01b03166347e405536040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b505060048054604080516347e4055360e01b815290516001600160a01b0390921694506347e405539350808301926000929182900301818387803b15801561046157600080fd5b505af1158015610475573d6000803e3d6000fd5b505060025460405163cbec894760e01b81526001600160a01b03909116925063cbec894791506104a9908690600401610aa3565b600060405180830381600087803b1580156104c357600080fd5b505af11580156104d7573d6000803e3d6000fd5b5050600254604051636d29753d60e11b81526001600160a01b03909116925063da52ea7a915061050b90859060040161090a565b600060405180830381600087803b15801561052557600080fd5b505af1158015610539573d6000803e3d6000fd5b50505050600160009054906101000a90046001600160a01b03166001600160a01b0316633dc6eabf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561058d57600080fd5b505af11580156105a1573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146105d55760405162461bcd60e51b815260040161021190610875565b6001600160a01b03811661063a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610211565b610643816106c0565b50565b6000546001600160a01b031633146106705760405162461bcd60e51b815260040161021190610875565b600180546001600160a01b039586166001600160a01b0319918216179091556002805494861694821694909417909355600380549285169284169290921790915560048054919093169116179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006080828403121561072257600080fd5b50919050565b60008060006060848603121561073d57600080fd5b833567ffffffffffffffff8082111561075557600080fd5b61076187838801610710565b9450602086013591508082111561077757600080fd5b9085019060c0828803121561078b57600080fd5b909250604085013590808211156107a157600080fd5b506107ae86828701610710565b9150509250925092565b80356001600160a01b03811681146107cf57600080fd5b919050565b6000602082840312156107e657600080fd5b6107ef826107b8565b9392505050565b6000806000806080858703121561080c57600080fd5b610815856107b8565b9350610823602086016107b8565b9250610831604086016107b8565b915061083f606086016107b8565b905092959194509250565b801515811461064357600080fd5b60006020828403121561086a57600080fd5b81516107ef8161084a565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156108bc57600080fd5b8151600381106107ef57600080fd5b634e487b7160e01b600052602160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006001600160a01b0380610922856107b8565b16602084015280610935602086016107b8565b16604084015250604083013560608301526060830135601e1984360301811261095d57600080fd5b830160208101903567ffffffffffffffff81111561097a57600080fd5b80360382131561098957600080fd5b60808085015261099d60a0850182846108e1565b95945050505050565b6000602082840312156109b857600080fd5b5051919050565b8183526000602080850194508260005b85811015610a98576001600160a01b03806109e9846107b8565b168852828401358489015260408084013590890152606080840135908901526080808401359089015260a0808401359089015260c0808401359089015260e081610a348286016107b8565b169089015261010081610a488583016107b8565b16908901525061012082810135610a5e8161084a565b1515908801526101408281013590880152610160808301359088015261018080830135908801526101a096870196909101906001016109cf565b509495945050505050565b6020815260008235601e19843603018112610abd57600080fd5b830160208101903567ffffffffffffffff811115610ada57600080fd5b6101a081023603821315610aed57600080fd5b60c06020850152610b0260e0850182846109bf565b915050610b11602085016107b8565b6001600160a01b038116604085015250610b2d604085016107b8565b6001600160a01b03811660608501525060608401356080840152608084013560a084015260a084013560c0840152809150509291505056fea26469706673582212200a0478e16430cccee56cde1878e5eecace7ec9735f9b124fed466f60c133f03c64736f6c634300080e0033";

type HedgingVaultOrchestratorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HedgingVaultOrchestratorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HedgingVaultOrchestrator__factory extends ContractFactory {
  constructor(...args: HedgingVaultOrchestratorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<HedgingVaultOrchestrator> {
    return super.deploy(overrides || {}) as Promise<HedgingVaultOrchestrator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HedgingVaultOrchestrator {
    return super.attach(address) as HedgingVaultOrchestrator;
  }
  override connect(signer: Signer): HedgingVaultOrchestrator__factory {
    return super.connect(signer) as HedgingVaultOrchestrator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HedgingVaultOrchestratorInterface {
    return new utils.Interface(_abi) as HedgingVaultOrchestratorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HedgingVaultOrchestrator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as HedgingVaultOrchestrator;
  }
}
