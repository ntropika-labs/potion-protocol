/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LifecycleStates,
  LifecycleStatesInterface,
} from "../../../../contracts/common/LifecycleStatesUpgradeable.sol/LifecycleStates";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "currentState",
    outputs: [
      {
        internalType: "enum LifecycleStates.LifecycleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getState",
    outputs: [
      {
        internalType: "enum LifecycleStates.LifecycleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ca8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80630c3f6acf1460375780631865c57d14605d575b600080fd5b60005460499062010000900460ff1681565b60405160549190606d565b60405180910390f35b60005462010000900460ff166049565b6020810160038310608e57634e487b7160e01b600052602160045260246000fd5b9190529056fea264697066735822122027c85154c92aeecb2f721113d58183be27583d8f4dc0e98a4b06a419d0100eda64736f6c634300080e0033";

type LifecycleStatesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LifecycleStatesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LifecycleStates__factory extends ContractFactory {
  constructor(...args: LifecycleStatesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LifecycleStates> {
    return super.deploy(overrides || {}) as Promise<LifecycleStates>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LifecycleStates {
    return super.attach(address) as LifecycleStates;
  }
  override connect(signer: Signer): LifecycleStates__factory {
    return super.connect(signer) as LifecycleStates__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LifecycleStatesInterface {
    return new utils.Interface(_abi) as LifecycleStatesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LifecycleStates {
    return new Contract(address, _abi, signerOrProvider) as LifecycleStates;
  }
}
