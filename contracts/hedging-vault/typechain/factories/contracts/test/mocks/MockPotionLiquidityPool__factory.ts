/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockPotionLiquidityPool,
  MockPotionLiquidityPoolInterface,
} from "../../../../contracts/test/mocks/MockPotionLiquidityPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IOtoken",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "lp",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "poolId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "a_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "b_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "c_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "d_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "max_util_59x18",
                type: "int256",
              },
            ],
            internalType: "struct ICurveManager.Curve",
            name: "curve",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "underlyingAsset",
                type: "address",
              },
              {
                internalType: "address",
                name: "strikeAsset",
                type: "address",
              },
              {
                internalType: "bool",
                name: "isPut",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "maxStrikePercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxDurationInDays",
                type: "uint256",
              },
            ],
            internalType: "struct ICriteriaManager.Criteria",
            name: "criteria",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "orderSizeInOtokens",
            type: "uint256",
          },
        ],
        internalType: "struct IPotionLiquidityPool.CounterpartyDetails[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "_maxPremium",
        type: "uint256",
      },
    ],
    name: "buyOtokens",
    outputs: [
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "lp",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "poolId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "a_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "b_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "c_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "d_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "max_util_59x18",
                type: "int256",
              },
            ],
            internalType: "struct ICurveManager.Curve",
            name: "curve",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "underlyingAsset",
                type: "address",
              },
              {
                internalType: "address",
                name: "strikeAsset",
                type: "address",
              },
              {
                internalType: "bool",
                name: "isPut",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "maxStrikePercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxDurationInDays",
                type: "uint256",
              },
            ],
            internalType: "struct ICriteriaManager.Criteria",
            name: "criteria",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "orderSizeInOtokens",
            type: "uint256",
          },
        ],
        internalType: "struct IPotionLiquidityPool.CounterpartyDetails[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "maxPremium",
        type: "uint256",
      },
    ],
    name: "createAndBuyOtokens",
    outputs: [
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IOtoken",
        name: "",
        type: "address",
      },
    ],
    name: "getVaultId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "lpPools",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "total",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "locked",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "curveHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "criteriaSetHash",
            type: "bytes32",
          },
        ],
        internalType: "struct IPotionLiquidityPool.PoolOfCapital",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IOtoken",
        name: "",
        type: "address",
      },
    ],
    name: "settleAfterExpiry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610564806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063151745441461005c5780631d292c2e1461007457806322d8755f146100a0578063344bd722146100be578063c352e7a0146100d2575b600080fd5b61007261006a3660046101d6565b506001600055565b005b61008d610082366004610406565b600160005592915050565b6040519081526020015b60405180910390f35b61008d6100ae36600461045f565b6001600055979650505050505050565b61008d6100cc3660046101d6565b50600190565b6100e56100e0366004610502565b610118565b60405161009791908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6040805160808101825260008082526020820181905291810182905260608101919091526000604051806080016040528064d5935157e58152602001600081526020018260405160200161016e91815260200190565b6040516020818303038152906040528051906020012081526020018260405160200161019c91815260200190565b6040516020818303038152906040528051906020012081525091505092915050565b6001600160a01b03811681146101d357600080fd5b50565b6000602082840312156101e857600080fd5b81356101f3816101be565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610233576102336101fa565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610262576102626101fa565b604052919050565b8035801515811461027a57600080fd5b919050565b600060a0828403121561029157600080fd5b610299610210565b905081356102a6816101be565b815260208201356102b6816101be565b60208201526102c76040830161026a565b6040820152606082013560608201526080820135608082015292915050565b600082601f8301126102f757600080fd5b8135602067ffffffffffffffff821115610313576103136101fa565b610321818360051b01610239565b8281526101a0928302850182019282820191908785111561034157600080fd5b8387015b858110156103f9578089038281121561035e5760008081fd5b610366610210565b8235610371816101be565b81528287013587820152604060a0603f1984018113156103915760008081fd5b610399610210565b93508185013584526060808601358a86015260808087013584870152828701358287015260c08701358187015285848601526103d88f60e0890161027f565b91850191909152610180860135908401525050855250928401928101610345565b5090979650505050505050565b60008060006060848603121561041b57600080fd5b8335610426816101be565b9250602084013567ffffffffffffffff81111561044257600080fd5b61044e868287016102e6565b925050604084013590509250925092565b600080600080600080600080610100898b03121561047c57600080fd5b8835610487816101be565b97506020890135610497816101be565b965060408901356104a7816101be565b955060608901359450608089013593506104c360a08a0161026a565b925060c089013567ffffffffffffffff8111156104df57600080fd5b6104eb8b828c016102e6565b92505060e089013590509295985092959890939650565b6000806040838503121561051557600080fd5b8235610520816101be565b94602093909301359350505056fea2646970667358221220405f2de6ce8dc9efda777190e7f55be219f67dabc35b85795a7731245406b56964736f6c634300080e0033";

type MockPotionLiquidityPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPotionLiquidityPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPotionLiquidityPool__factory extends ContractFactory {
  constructor(...args: MockPotionLiquidityPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockPotionLiquidityPool> {
    return super.deploy(overrides || {}) as Promise<MockPotionLiquidityPool>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockPotionLiquidityPool {
    return super.attach(address) as MockPotionLiquidityPool;
  }
  override connect(signer: Signer): MockPotionLiquidityPool__factory {
    return super.connect(signer) as MockPotionLiquidityPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPotionLiquidityPoolInterface {
    return new utils.Interface(_abi) as MockPotionLiquidityPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPotionLiquidityPool {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockPotionLiquidityPool;
  }
}
