/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockPotionLiquidityPool,
  MockPotionLiquidityPoolInterface,
} from "../../../../contracts/test/mocks/MockPotionLiquidityPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IOtoken",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "lp",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "poolId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "a_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "b_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "c_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "d_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "max_util_59x18",
                type: "int256",
              },
            ],
            internalType: "struct ICurveManager.Curve",
            name: "curve",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "underlyingAsset",
                type: "address",
              },
              {
                internalType: "address",
                name: "strikeAsset",
                type: "address",
              },
              {
                internalType: "bool",
                name: "isPut",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "maxStrikePercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxDurationInDays",
                type: "uint256",
              },
            ],
            internalType: "struct ICriteriaManager.Criteria",
            name: "criteria",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "orderSizeInOtokens",
            type: "uint256",
          },
        ],
        internalType: "struct IPotionLiquidityPool.CounterpartyDetails[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "_maxPremium",
        type: "uint256",
      },
    ],
    name: "buyOtokens",
    outputs: [
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "lp",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "poolId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "a_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "b_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "c_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "d_59x18",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "max_util_59x18",
                type: "int256",
              },
            ],
            internalType: "struct ICurveManager.Curve",
            name: "curve",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "underlyingAsset",
                type: "address",
              },
              {
                internalType: "address",
                name: "strikeAsset",
                type: "address",
              },
              {
                internalType: "bool",
                name: "isPut",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "maxStrikePercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxDurationInDays",
                type: "uint256",
              },
            ],
            internalType: "struct ICriteriaManager.Criteria",
            name: "criteria",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "orderSizeInOtokens",
            type: "uint256",
          },
        ],
        internalType: "struct IPotionLiquidityPool.CounterpartyDetails[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "maxPremium",
        type: "uint256",
      },
    ],
    name: "createAndBuyOtokens",
    outputs: [
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IOtoken",
        name: "",
        type: "address",
      },
    ],
    name: "getVaultId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "lpPools",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "total",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "locked",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "curveHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "criteriaSetHash",
            type: "bytes32",
          },
        ],
        internalType: "struct IPotionLiquidityPool.PoolOfCapital",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "enable",
        type: "bool",
      },
    ],
    name: "setRevertBuyOtokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IOtoken",
        name: "",
        type: "address",
      },
    ],
    name: "settleAfterExpiry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IOtoken",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "lp",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "poolId",
            type: "uint256",
          },
        ],
        internalType: "struct IPotionLiquidityPool.PoolIdentifier[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "settleAndRedistributeSettlement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061071a806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063344bd7221161005b578063344bd722146100d35780635b367b08146100e75780637ea6332a146100ff578063c352e7a01461012057600080fd5b806315174544146100825780631d292c2e1461009a57806322d8755f146100c0575b600080fd5b61009861009036600461029f565b506001600055565b005b6100ad6100a83660046104cf565b610166565b6040519081526020015b60405180910390f35b6100ad6100ce366004610528565b61019f565b6100ad6100e136600461029f565b50600190565b6100986100f53660046105cb565b5050600160005550565b61009861010d366004610653565b6001805460ff1916911515919091179055565b61013361012e36600461066e565b6101d4565b6040516100b791908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b60016000818155905460ff16156101985760405162461bcd60e51b815260040161018f9061069a565b60405180910390fd5b5092915050565b60016000818155905460ff16156101c85760405162461bcd60e51b815260040161018f9061069a565b50979650505050505050565b6040805160808101825260008082526020820181905291810182905260608101919091526000604051806080016040528064d5935157e58152602001600081526020018260405160200161022a91815260200190565b6040516020818303038152906040528051906020012081526020018260405160200161025891815260200190565b6040516020818303038152906040528051906020012081525091505092915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461029c57600080fd5b50565b6000602082840312156102b157600080fd5b81356102bc8161027a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156102fc576102fc6102c3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561032b5761032b6102c3565b604052919050565b8035801515811461034357600080fd5b919050565b600060a0828403121561035a57600080fd5b6103626102d9565b9050813561036f8161027a565b8152602082013561037f8161027a565b602082015261039060408301610333565b6040820152606082013560608201526080820135608082015292915050565b600082601f8301126103c057600080fd5b8135602067ffffffffffffffff8211156103dc576103dc6102c3565b6103ea818360051b01610302565b8281526101a0928302850182019282820191908785111561040a57600080fd5b8387015b858110156104c257808903828112156104275760008081fd5b61042f6102d9565b823561043a8161027a565b81528287013587820152604060a0603f19840181131561045a5760008081fd5b6104626102d9565b93508185013584526060808601358a86015260808087013584870152828701358287015260c08701358187015285848601526104a18f60e08901610348565b9185019190915261018086013590840152505085525092840192810161040e565b5090979650505050505050565b6000806000606084860312156104e457600080fd5b83356104ef8161027a565b9250602084013567ffffffffffffffff81111561050b57600080fd5b610517868287016103af565b925050604084013590509250925092565b600080600080600080600080610100898b03121561054557600080fd5b88356105508161027a565b975060208901356105608161027a565b965060408901356105708161027a565b9550606089013594506080890135935061058c60a08a01610333565b925060c089013567ffffffffffffffff8111156105a857600080fd5b6105b48b828c016103af565b92505060e089013590509295985092959890939650565b6000806000604084860312156105e057600080fd5b83356105eb8161027a565b9250602084013567ffffffffffffffff8082111561060857600080fd5b818601915086601f83011261061c57600080fd5b81358181111561062b57600080fd5b8760208260061b850101111561064057600080fd5b6020830194508093505050509250925092565b60006020828403121561066557600080fd5b6102bc82610333565b6000806040838503121561068157600080fd5b823561068c8161027a565b946020939093013593505050565b6020808252602a908201527f4d6f636b506f74696f6e4c6971756964697479506f6f6c3a20627579206f746f6040820152691ad95b8819985a5b195960b21b60608201526080019056fea2646970667358221220355589f2bf75094cece50a867dd6c5b85bfb5c51a45f0a77fb9432cdac8aca9864736f6c634300080e0033";

type MockPotionLiquidityPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPotionLiquidityPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPotionLiquidityPool__factory extends ContractFactory {
  constructor(...args: MockPotionLiquidityPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockPotionLiquidityPool> {
    return super.deploy(overrides || {}) as Promise<MockPotionLiquidityPool>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockPotionLiquidityPool {
    return super.attach(address) as MockPotionLiquidityPool;
  }
  override connect(signer: Signer): MockPotionLiquidityPool__factory {
    return super.connect(signer) as MockPotionLiquidityPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPotionLiquidityPoolInterface {
    return new utils.Interface(_abi) as MockPotionLiquidityPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPotionLiquidityPool {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockPotionLiquidityPool;
  }
}
