/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockOpynFactory,
  MockOpynFactoryInterface,
} from "../../../../contracts/test/mocks/MockOpynFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "otoken_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "OTOKEN_DECIMALS",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "getOtoken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "getTargetOtokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "otoken",
    outputs: [
      {
        internalType: "contract MockERC20PresetMinterPauser",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161021338038061021383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610180806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631154705414610051578063179eaf2114610092578063ae8ecf58146100ac578063b86b9a6414610051575b600080fd5b61007561005f3660046100db565b6000546001600160a01b03169695505050505050565b6040516001600160a01b0390911681526020015b60405180910390f35b61009a600881565b60405160ff9091168152602001610089565b600054610075906001600160a01b031681565b80356001600160a01b03811681146100d657600080fd5b919050565b60008060008060008060c087890312156100f457600080fd5b6100fd876100bf565b955061010b602088016100bf565b9450610119604088016100bf565b9350606087013592506080870135915060a0870135801515811461013c57600080fd5b80915050929550929550929556fea26469706673582212201ea7daf442efc8c69095d1ab775d42d61c781cc198aefaf7e91b2574b888cda864736f6c634300080e0033";

type MockOpynFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOpynFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOpynFactory__factory extends ContractFactory {
  constructor(...args: MockOpynFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    otoken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockOpynFactory> {
    return super.deploy(otoken_, overrides || {}) as Promise<MockOpynFactory>;
  }
  override getDeployTransaction(
    otoken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(otoken_, overrides || {});
  }
  override attach(address: string): MockOpynFactory {
    return super.attach(address) as MockOpynFactory;
  }
  override connect(signer: Signer): MockOpynFactory__factory {
    return super.connect(signer) as MockOpynFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOpynFactoryInterface {
    return new utils.Interface(_abi) as MockOpynFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOpynFactory {
    return new Contract(address, _abi, signerOrProvider) as MockOpynFactory;
  }
}
