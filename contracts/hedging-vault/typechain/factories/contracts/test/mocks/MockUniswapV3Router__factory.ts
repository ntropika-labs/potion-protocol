/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockUniswapV3Router,
  MockUniswapV3RouterInterface,
} from "../../../../contracts/test/mocks/MockUniswapV3Router";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "assets_",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "assets",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256",
          },
        ],
        internalType: "struct ISwapRouter.ExactOutputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactOutputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactOutputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c1838038062000c1883398101604081905262000034916200017c565b60005b8151811015620001415760008282815181106200005857620000586200024e565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558151829082908110620000aa57620000aa6200024e565b602090810291909101015160405163095ea7b360e01b815233600482015260001960248201526001600160a01b039091169063095ea7b3906044016020604051808303816000875af115801562000105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012b919062000264565b508062000138816200028f565b91505062000037565b5050620002b7565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200017757600080fd5b919050565b600060208083850312156200019057600080fd5b82516001600160401b0380821115620001a857600080fd5b818501915085601f830112620001bd57600080fd5b815181811115620001d257620001d262000149565b8060051b604051601f19603f83011681018181108582111715620001fa57620001fa62000149565b6040529182528482019250838101850191888311156200021957600080fd5b938501935b82851015620002425762000232856200015f565b845293850193928501926200021e565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200027757600080fd5b815180151581146200028857600080fd5b9392505050565b600060018201620002b057634e487b7160e01b600052601160045260246000fd5b5060010190565b61095180620002c76000396000f3fe6080604052600436106100555760003560e01c8063414bf3891461005a578063c04b8d5914610080578063cf35bdd014610093578063db3e2198146100cb578063f28c0498146100de578063fa461e33146100f1575b600080fd5b61006d61006836600461072c565b610114565b6040519081526020015b60405180910390f35b61006d61008e366004610762565b61022a565b34801561009f57600080fd5b506100b36100ae36600461079f565b610373565b6040516001600160a01b039091168152602001610077565b61006d6100d936600461072c565b61039d565b61006d6100ec366004610762565b61046b565b3480156100fd57600080fd5b5061011261010c3660046107b8565b50505050565b005b60006101236020830183610838565b6001600160a01b03166323b872dd33308560a001356040518463ffffffff1660e01b815260040161015693929190610861565b6020604051808303816000875af1158015610175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101999190610885565b506101aa6040830160208401610838565b60405163a9059cbb60e01b815233600482015260c084013560248201526001600160a01b03919091169063a9059cbb906044015b6020604051808303816000875af11580156101fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102219190610885565b505060c0013590565b6000808061027561023b85806108a7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061054392505050565b506040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd906102af903390309060608a013590600401610861565b6020604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f29190610885565b5060405163a9059cbb60e01b8152336004820152608085013560248201526001600160a01b0382169063a9059cbb906044015b6020604051808303816000875af1158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190610885565b505050506080013590565b6000818154811061038357600080fd5b6000918252602090912001546001600160a01b0316905081565b60006103ac6020830183610838565b6001600160a01b03166323b872dd33308560c001356040518463ffffffff1660e01b81526004016103df93929190610861565b6020604051808303816000875af11580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104229190610885565b506104336040830160208401610838565b60405163a9059cbb60e01b815233600482015260a084013560248201526001600160a01b03919091169063a9059cbb906044016101de565b6000808061047c61023b85806108a7565b509150915061049582828660800135876060013561057f565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd906104c9903390309060808a013590600401610861565b6020604051808303816000875af11580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190610885565b5060405163a9059cbb60e01b8152336004820152606085013560248201526001600160a01b0382169063a9059cbb90604401610325565b6000808061055184826105dd565b925061055e846014610647565b905061057661056f600360146108f5565b85906105dd565b91509193909250565b6040516001600160a01b03808616602483015284166044820152606481018390526084810182905261010c9060a40160408051601f198184030181529190526020810180516001600160e01b031663153f7cf960e21b1790526106f2565b60006105ea8260146108f5565b835110156106375760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064015b60405180910390fd5b500160200151600160601b900490565b6000816106558160036108f5565b10156106975760405162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b604482015260640161062e565b6106a28260036108f5565b835110156106e95760405162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b604482015260640161062e565b50016003015190565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000610100828403121561072657600080fd5b50919050565b6000610100828403121561073f57600080fd5b6107498383610713565b9392505050565b600060a0828403121561072657600080fd5b60006020828403121561077457600080fd5b813567ffffffffffffffff81111561078b57600080fd5b61079784828501610750565b949350505050565b6000602082840312156107b157600080fd5b5035919050565b600080600080606085870312156107ce57600080fd5b8435935060208501359250604085013567ffffffffffffffff808211156107f457600080fd5b818701915087601f83011261080857600080fd5b81358181111561081757600080fd5b88602082850101111561082957600080fd5b95989497505060200194505050565b60006020828403121561084a57600080fd5b81356001600160a01b038116811461074957600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561089757600080fd5b8151801515811461074957600080fd5b6000808335601e198436030181126108be57600080fd5b83018035915067ffffffffffffffff8211156108d957600080fd5b6020019150368190038213156108ee57600080fd5b9250929050565b6000821982111561091657634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122062e4e374730d0cd58ddf40845d58add5125db60d8851dab7193e2968d0cc8a4864736f6c634300080e0033";

type MockUniswapV3RouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniswapV3RouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniswapV3Router__factory extends ContractFactory {
  constructor(...args: MockUniswapV3RouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    assets_: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockUniswapV3Router> {
    return super.deploy(
      assets_,
      overrides || {}
    ) as Promise<MockUniswapV3Router>;
  }
  override getDeployTransaction(
    assets_: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(assets_, overrides || {});
  }
  override attach(address: string): MockUniswapV3Router {
    return super.attach(address) as MockUniswapV3Router;
  }
  override connect(signer: Signer): MockUniswapV3Router__factory {
    return super.connect(signer) as MockUniswapV3Router__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniswapV3RouterInterface {
    return new utils.Interface(_abi) as MockUniswapV3RouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUniswapV3Router {
    return new Contract(address, _abi, signerOrProvider) as MockUniswapV3Router;
  }
}
