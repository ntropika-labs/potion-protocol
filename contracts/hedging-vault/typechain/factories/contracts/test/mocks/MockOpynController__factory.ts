/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockOpynController,
  MockOpynControllerInterface,
} from "../../../../contracts/test/mocks/MockOpynController";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getProceed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isSettlementAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610118806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063c220101d146037578063e723406c146061575b600080fd5b604e6042366004609c565b6406fc23ac0092915050565b6040519081526020015b60405180910390f35b6072606c36600460c3565b50600190565b60405190151581526020016058565b80356001600160a01b0381168114609757600080fd5b919050565b6000806040838503121560ae57600080fd5b60b5836081565b946020939093013593505050565b60006020828403121560d457600080fd5b60db826081565b939250505056fea26469706673582212200c5cff158bc0e05dff5ca93cda2e9e25d56717e6f035627f0893fcbe1bd79f6464736f6c634300080e0033";

type MockOpynControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOpynControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOpynController__factory extends ContractFactory {
  constructor(...args: MockOpynControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockOpynController> {
    return super.deploy(overrides || {}) as Promise<MockOpynController>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockOpynController {
    return super.attach(address) as MockOpynController;
  }
  override connect(signer: Signer): MockOpynController__factory {
    return super.connect(signer) as MockOpynController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOpynControllerInterface {
    return new utils.Interface(_abi) as MockOpynControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOpynController {
    return new Contract(address, _abi, signerOrProvider) as MockOpynController;
  }
}
