/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockOpynController,
  MockOpynControllerInterface,
} from "../../../../contracts/test/mocks/MockOpynController";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isSettlementAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IOpynController.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "secondAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IOpynController.ActionArgs[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "operate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061039c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063565eea1914610046578063b617f0c614610073578063e723406c14610086575b600080fd5b6100606100543660046100c6565b6406fc23ac0092915050565b6040519081526020015b60405180910390f35b6100846100813660046101e0565b50565b005b61009a610094366004610344565b50600190565b604051901515815260200161006a565b80356001600160a01b03811681146100c157600080fd5b919050565b600080604083850312156100d957600080fd5b6100e2836100aa565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561012a5761012a6100f0565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610159576101596100f0565b604052919050565b8035600b81106100c157600080fd5b600082601f83011261018157600080fd5b813567ffffffffffffffff81111561019b5761019b6100f0565b6101ae601f8201601f1916602001610130565b8181528460208386010111156101c357600080fd5b816020850160208301376000918101602001919091529392505050565b600060208083850312156101f357600080fd5b823567ffffffffffffffff8082111561020b57600080fd5b818501915085601f83011261021f57600080fd5b813581811115610231576102316100f0565b8060051b610240858201610130565b918252838101850191858101908984111561025a57600080fd5b86860192505b83831015610337578235858111156102785760008081fd5b8601610100818c03601f19018113156102915760008081fd5b610299610106565b6102a48a8401610161565b815260406102b38185016100aa565b8b83015260606102c48186016100aa565b82840152608091506102d78286016100aa565b818401525060a0808501358284015260c0915081850135818401525060e080850135828401528385013593508984111561031357600091508182fd5b6103218f8d86880101610170565b9083015250845250509186019190860190610260565b9998505050505050505050565b60006020828403121561035657600080fd5b61035f826100aa565b939250505056fea264697066735822122001ced44ad3983422b59a407dd9d04ba2d4b5ca872354a0895d1fc068bdefce1f64736f6c634300080e0033";

type MockOpynControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOpynControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOpynController__factory extends ContractFactory {
  constructor(...args: MockOpynControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockOpynController> {
    return super.deploy(overrides || {}) as Promise<MockOpynController>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockOpynController {
    return super.attach(address) as MockOpynController;
  }
  override connect(signer: Signer): MockOpynController__factory {
    return super.connect(signer) as MockOpynController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOpynControllerInterface {
    return new utils.Interface(_abi) as MockOpynControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOpynController {
    return new Contract(address, _abi, signerOrProvider) as MockOpynController;
  }
}
