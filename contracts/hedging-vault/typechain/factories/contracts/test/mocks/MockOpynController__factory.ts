/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockOpynController,
  MockOpynControllerInterface,
} from "../../../../contracts/test/mocks/MockOpynController";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getPayout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isSettlementAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IOpynController.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "secondAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "vaultId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IOpynController.ActionArgs[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "operate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103a9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063565eea1914610046578063b617f0c614610073578063e723406c14610086575b600080fd5b6100606100543660046100d3565b6406fc23ac0092915050565b6040519081526020015b60405180910390f35b6100846100813660046101ed565b50565b005b61009a610094366004610351565b50600190565b604051901515815260200161006a565b803573ffffffffffffffffffffffffffffffffffffffff811681146100ce57600080fd5b919050565b600080604083850312156100e657600080fd5b6100ef836100aa565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610137576101376100fd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610166576101666100fd565b604052919050565b8035600b81106100ce57600080fd5b600082601f83011261018e57600080fd5b813567ffffffffffffffff8111156101a8576101a86100fd565b6101bb601f8201601f191660200161013d565b8181528460208386010111156101d057600080fd5b816020850160208301376000918101602001919091529392505050565b6000602080838503121561020057600080fd5b823567ffffffffffffffff8082111561021857600080fd5b818501915085601f83011261022c57600080fd5b81358181111561023e5761023e6100fd565b8060051b61024d85820161013d565b918252838101850191858101908984111561026757600080fd5b86860192505b83831015610344578235858111156102855760008081fd5b8601610100818c03601f190181131561029e5760008081fd5b6102a6610113565b6102b18a840161016e565b815260406102c08185016100aa565b8b83015260606102d18186016100aa565b82840152608091506102e48286016100aa565b818401525060a0808501358284015260c0915081850135818401525060e080850135828401528385013593508984111561032057600091508182fd5b61032e8f8d8688010161017d565b908301525084525050918601919086019061026d565b9998505050505050505050565b60006020828403121561036357600080fd5b61036c826100aa565b939250505056fea26469706673582212208e2f0c30a1324ef621d5cef3a328a43d75af482426e8bb054e21e3e895a0d30c64736f6c634300080e0033";

type MockOpynControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOpynControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOpynController__factory extends ContractFactory {
  constructor(...args: MockOpynControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockOpynController> {
    return super.deploy(overrides || {}) as Promise<MockOpynController>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockOpynController {
    return super.attach(address) as MockOpynController;
  }
  override connect(signer: Signer): MockOpynController__factory {
    return super.connect(signer) as MockOpynController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOpynControllerInterface {
    return new utils.Interface(_abi) as MockOpynControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOpynController {
    return new Contract(address, _abi, signerOrProvider) as MockOpynController;
  }
}
