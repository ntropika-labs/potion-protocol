/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockOpynOracle,
  MockOpynOracleInterface,
} from "../../../../contracts/test/mocks/MockOpynOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "isDisputePeriodOver",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pricePerAsset",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_expiryTimestamp",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_result",
        type: "bool",
      },
    ],
    name: "setIsDisputePeriodOver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setStablePrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610248806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633434979f1461005c57806341976e091461008f5780635fdc7149146100b8578063601407eb146100f6578063854a5bdf14610122575b600080fd5b61007c61006a366004610181565b60006020819052908152604090205481565b6040519081526020015b60405180910390f35b61007c61009d366004610181565b6001600160a01b031660009081526020819052604090205490565b6100e66100c63660046101a3565b600160209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610086565b6101206101043660046101a3565b6001600160a01b03909116600090815260208190526040902055565b005b6101206101303660046101cd565b6001600160a01b0392909216600090815260016020908152604080832093835292905220805460ff1916911515919091179055565b80356001600160a01b038116811461017c57600080fd5b919050565b60006020828403121561019357600080fd5b61019c82610165565b9392505050565b600080604083850312156101b657600080fd5b6101bf83610165565b946020939093013593505050565b6000806000606084860312156101e257600080fd5b6101eb84610165565b9250602084013591506040840135801515811461020757600080fd5b80915050925092509256fea264697066735822122066a858b2539f137de32cb08cfeb7403bdb640bcf452baea37f5a8f40136f1d8a64736f6c634300080e0033";

type MockOpynOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOpynOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOpynOracle__factory extends ContractFactory {
  constructor(...args: MockOpynOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockOpynOracle> {
    return super.deploy(overrides || {}) as Promise<MockOpynOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockOpynOracle {
    return super.attach(address) as MockOpynOracle;
  }
  override connect(signer: Signer): MockOpynOracle__factory {
    return super.connect(signer) as MockOpynOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOpynOracleInterface {
    return new utils.Interface(_abi) as MockOpynOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOpynOracle {
    return new Contract(address, _abi, signerOrProvider) as MockOpynOracle;
  }
}
