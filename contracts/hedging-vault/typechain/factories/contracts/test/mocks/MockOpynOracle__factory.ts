/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockOpynOracle,
  MockOpynOracleInterface,
} from "../../../../contracts/test/mocks/MockOpynOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pricePerAsset",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setStablePrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061016b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633434979f1461004657806341976e0914610078578063601407eb146100a1575b600080fd5b6100666100543660046100e9565b60006020819052908152604090205481565b60405190815260200160405180910390f35b6100666100863660046100e9565b6001600160a01b031660009081526020819052604090205490565b6100cb6100af36600461010b565b6001600160a01b03909116600090815260208190526040902055565b005b80356001600160a01b03811681146100e457600080fd5b919050565b6000602082840312156100fb57600080fd5b610104826100cd565b9392505050565b6000806040838503121561011e57600080fd5b610127836100cd565b94602093909301359350505056fea26469706673582212203a6a36fa13b3395460d6498368dd7401e8f0b1a849e0f3fb704ab4dd7985e86664736f6c634300080e0033";

type MockOpynOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOpynOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOpynOracle__factory extends ContractFactory {
  constructor(...args: MockOpynOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockOpynOracle> {
    return super.deploy(overrides || {}) as Promise<MockOpynOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockOpynOracle {
    return super.attach(address) as MockOpynOracle;
  }
  override connect(signer: Signer): MockOpynOracle__factory {
    return super.connect(signer) as MockOpynOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOpynOracleInterface {
    return new utils.Interface(_abi) as MockOpynOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOpynOracle {
    return new Contract(address, _abi, signerOrProvider) as MockOpynOracle;
  }
}
