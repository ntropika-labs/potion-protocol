/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockChainlinkAggregatorV3,
  MockChainlinkAggregatorV3Interface,
} from "../../../../contracts/test/mocks/MockChainlinkAggregatorV3";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "initialAnswer",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "answer_",
        type: "int256",
      },
    ],
    name: "setAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526305f5e10060005534801561001857600080fd5b506040516102c33803806102c38339810160408190526100379161003f565b600055610058565b60006020828403121561005157600080fd5b5051919050565b61025c806100676000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637284e4161161005b5780637284e416146100b457806399213cd8146100f35780639a6fc8f514610108578063feaf968c1461015957600080fd5b8063313ce5671461008257806350d25bcd1461009657806354fd4d50146100ad575b600080fd5b604051600881526020015b60405180910390f35b61009f60005481565b60405190815260200161008d565b600161009f565b604080518082018252601981527f4d6f636b20436861696e6c696e6b2041676772656761746f72000000000000006020820152905161008d9190610185565b6101066101013660046101da565b600055565b005b6101226101163660046101f3565b60008054919242908290565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00161008d565b61012260008060008060006101746000808054919242908290565b945094509450945094509091929394565b600060208083528351808285015260005b818110156101b257858101830151858201604001528201610196565b818111156101c4576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156101ec57600080fd5b5035919050565b60006020828403121561020557600080fd5b813569ffffffffffffffffffff8116811461021f57600080fd5b939250505056fea26469706673582212202e0c9f5f50e0874157933f65f9534038cb2e485051512abd3dbf9a1cb1b472e164736f6c634300080e0033";

type MockChainlinkAggregatorV3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockChainlinkAggregatorV3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockChainlinkAggregatorV3__factory extends ContractFactory {
  constructor(...args: MockChainlinkAggregatorV3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialAnswer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockChainlinkAggregatorV3> {
    return super.deploy(
      initialAnswer,
      overrides || {}
    ) as Promise<MockChainlinkAggregatorV3>;
  }
  override getDeployTransaction(
    initialAnswer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initialAnswer, overrides || {});
  }
  override attach(address: string): MockChainlinkAggregatorV3 {
    return super.attach(address) as MockChainlinkAggregatorV3;
  }
  override connect(signer: Signer): MockChainlinkAggregatorV3__factory {
    return super.connect(signer) as MockChainlinkAggregatorV3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockChainlinkAggregatorV3Interface {
    return new utils.Interface(_abi) as MockChainlinkAggregatorV3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockChainlinkAggregatorV3 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockChainlinkAggregatorV3;
  }
}
