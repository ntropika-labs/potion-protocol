/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ERC1155MockUpgradeable,
  ERC1155MockUpgradeableInterface,
} from "../../../../contracts/test/mocks/ERC1155MockUpgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "burnBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "mintBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newuri",
        type: "string",
      },
    ],
    name: "setURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611cd7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80634e1273f41161008c578063a22cb46511610066578063a22cb465146101bd578063e985e9c5146101d0578063f242432a1461020c578063f5298aca1461021f57600080fd5b80634e1273f4146101775780636b20c45414610197578063731133e9146101aa57600080fd5b8062fdd58e146100d357806301ffc9a7146100f957806302fe53051461011c5780630e89341c146101315780631f7fdffa146101515780632eb2c2d614610164575b600080fd5b6100e66100e13660046111df565b610232565b6040519081526020015b60405180910390f35b61010c61010736600461121f565b6102cb565b60405190151581526020016100f0565b61012f61012a3660046112e4565b61031d565b005b61014461013f366004611335565b610329565b6040516100f0919061139b565b61012f61015f366004611463565b6103bd565b61012f6101723660046114fc565b6103cf565b61018a6101853660046115a6565b610466565b6040516100f091906116ac565b61012f6101a53660046116bf565b610590565b61012f6101b8366004611733565b6105a0565b61012f6101cb366004611788565b6105ac565b61010c6101de3660046117c4565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b61012f61021a3660046117f7565b6105bb565b61012f61022d36600461185c565b610642565b60006001600160a01b0383166102a35760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806102fc57506001600160e01b031982166303a24d0760e21b145b8061031757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6103268161064d565b50565b6060606780546103389061188f565b80601f01602080910402602001604051908101604052809291908181526020018280546103649061188f565b80156103b15780601f10610386576101008083540402835291602001916103b1565b820191906000526020600020905b81548152906001019060200180831161039457829003601f168201915b50505050509050919050565b6103c984848484610660565b50505050565b6001600160a01b0385163314806103eb57506103eb85336101de565b6104525760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161029a565b61045f85858585856107ac565b5050505050565b606081518351146104cb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161029a565b6000835167ffffffffffffffff8111156104e7576104e7611243565b604051908082528060200260200182016040528015610510578160200160208202803683370190505b50905060005b84518110156105885761055b858281518110610534576105346118c9565b602002602001015185838151811061054e5761054e6118c9565b6020026020010151610232565b82828151811061056d5761056d6118c9565b6020908102919091010152610581816118f5565b9050610516565b509392505050565b61059b83838361094b565b505050565b6103c984848484610ad8565b6105b7338383610bb4565b5050565b6001600160a01b0385163314806105d757506105d785336101de565b6106355760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161029a565b61045f8585858585610c94565b61059b838383610dc2565b80516105b790606790602084019061112a565b6001600160a01b0384166106865760405162461bcd60e51b815260040161029a9061190e565b81518351146106a75760405162461bcd60e51b815260040161029a9061194f565b3360005b8451811015610744578381815181106106c6576106c66118c9565b6020026020010151606560008784815181106106e4576106e46118c9565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461072c9190611997565b9091555081905061073c816118f5565b9150506106ab565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516107959291906119af565b60405180910390a461045f81600087878787610ec9565b81518351146107cd5760405162461bcd60e51b815260040161029a9061194f565b6001600160a01b0384166107f35760405162461bcd60e51b815260040161029a906119dd565b3360005b84518110156108dd576000858281518110610814576108146118c9565b602002602001015190506000858381518110610832576108326118c9565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156108835760405162461bcd60e51b815260040161029a90611a22565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906108c2908490611997565b92505081905550505050806108d6906118f5565b90506107f7565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161092d9291906119af565b60405180910390a4610943818787878787610ec9565b505050505050565b6001600160a01b0383166109715760405162461bcd60e51b815260040161029a90611a6c565b80518251146109925760405162461bcd60e51b815260040161029a9061194f565b604080516020810190915260009081905233905b8351811015610a6b5760008482815181106109c3576109c36118c9565b6020026020010151905060008483815181106109e1576109e16118c9565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015610a325760405162461bcd60e51b815260040161029a90611aaf565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580610a63816118f5565b9150506109a6565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610abc9291906119af565b60405180910390a46040805160208101909152600090526103c9565b6001600160a01b038416610afe5760405162461bcd60e51b815260040161029a9061190e565b336000610b0a85611024565b90506000610b1785611024565b905060008681526065602090815260408083206001600160a01b038b16845290915281208054879290610b4b908490611997565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610bab8360008989898961106f565b50505050505050565b816001600160a01b0316836001600160a01b031603610c275760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161029a565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610cba5760405162461bcd60e51b815260040161029a906119dd565b336000610cc685611024565b90506000610cd385611024565b905060008681526065602090815260408083206001600160a01b038c16845290915290205485811015610d185760405162461bcd60e51b815260040161029a90611a22565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290610d57908490611997565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610db7848a8a8a8a8a61106f565b505050505050505050565b6001600160a01b038316610de85760405162461bcd60e51b815260040161029a90611a6c565b336000610df484611024565b90506000610e0184611024565b6040805160208082018352600091829052888252606581528282206001600160a01b038b1683529052205490915084811015610e4f5760405162461bcd60e51b815260040161029a90611aaf565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052610bab565b6001600160a01b0384163b156109435760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610f0d9089908990889088908890600401611af3565b6020604051808303816000875af1925050508015610f48575060408051601f3d908101601f19168201909252610f4591810190611b51565b60015b610ff457610f54611b6e565b806308c379a003610f8d5750610f68611b8a565b80610f735750610f8f565b8060405162461bcd60e51b815260040161029a919061139b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161029a565b6001600160e01b0319811663bc197c8160e01b14610bab5760405162461bcd60e51b815260040161029a90611c14565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061105e5761105e6118c9565b602090810291909101015292915050565b6001600160a01b0384163b156109435760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906110b39089908990889088908890600401611c5c565b6020604051808303816000875af19250505080156110ee575060408051601f3d908101601f191682019092526110eb91810190611b51565b60015b6110fa57610f54611b6e565b6001600160e01b0319811663f23a6e6160e01b14610bab5760405162461bcd60e51b815260040161029a90611c14565b8280546111369061188f565b90600052602060002090601f016020900481019282611158576000855561119e565b82601f1061117157805160ff191683800117855561119e565b8280016001018555821561119e579182015b8281111561119e578251825591602001919060010190611183565b506111aa9291506111ae565b5090565b5b808211156111aa57600081556001016111af565b80356001600160a01b03811681146111da57600080fd5b919050565b600080604083850312156111f257600080fd5b6111fb836111c3565b946020939093013593505050565b6001600160e01b03198116811461032657600080fd5b60006020828403121561123157600080fd5b813561123c81611209565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561127f5761127f611243565b6040525050565b600067ffffffffffffffff8311156112a0576112a0611243565b6040516112b7601f8501601f191660200182611259565b8091508381528484840111156112cc57600080fd5b83836020830137600060208583010152509392505050565b6000602082840312156112f657600080fd5b813567ffffffffffffffff81111561130d57600080fd5b8201601f8101841361131e57600080fd5b61132d84823560208401611286565b949350505050565b60006020828403121561134757600080fd5b5035919050565b6000815180845260005b8181101561137457602081850181015186830182015201611358565b81811115611386576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061123c602083018461134e565b600067ffffffffffffffff8211156113c8576113c8611243565b5060051b60200190565b600082601f8301126113e357600080fd5b813560206113f0826113ae565b6040516113fd8282611259565b83815260059390931b850182019282810191508684111561141d57600080fd5b8286015b848110156114385780358352918301918301611421565b509695505050505050565b600082601f83011261145457600080fd5b61123c83833560208501611286565b6000806000806080858703121561147957600080fd5b611482856111c3565b9350602085013567ffffffffffffffff8082111561149f57600080fd5b6114ab888389016113d2565b945060408701359150808211156114c157600080fd5b6114cd888389016113d2565b935060608701359150808211156114e357600080fd5b506114f087828801611443565b91505092959194509250565b600080600080600060a0868803121561151457600080fd5b61151d866111c3565b945061152b602087016111c3565b9350604086013567ffffffffffffffff8082111561154857600080fd5b61155489838a016113d2565b9450606088013591508082111561156a57600080fd5b61157689838a016113d2565b9350608088013591508082111561158c57600080fd5b5061159988828901611443565b9150509295509295909350565b600080604083850312156115b957600080fd5b823567ffffffffffffffff808211156115d157600080fd5b818501915085601f8301126115e557600080fd5b813560206115f2826113ae565b6040516115ff8282611259565b83815260059390931b850182019282810191508984111561161f57600080fd5b948201945b8386101561164457611635866111c3565b82529482019490820190611624565b9650508601359250508082111561165a57600080fd5b50611667858286016113d2565b9150509250929050565b600081518084526020808501945080840160005b838110156116a157815187529582019590820190600101611685565b509495945050505050565b60208152600061123c6020830184611671565b6000806000606084860312156116d457600080fd5b6116dd846111c3565b9250602084013567ffffffffffffffff808211156116fa57600080fd5b611706878388016113d2565b9350604086013591508082111561171c57600080fd5b50611729868287016113d2565b9150509250925092565b6000806000806080858703121561174957600080fd5b611752856111c3565b93506020850135925060408501359150606085013567ffffffffffffffff81111561177c57600080fd5b6114f087828801611443565b6000806040838503121561179b57600080fd5b6117a4836111c3565b9150602083013580151581146117b957600080fd5b809150509250929050565b600080604083850312156117d757600080fd5b6117e0836111c3565b91506117ee602084016111c3565b90509250929050565b600080600080600060a0868803121561180f57600080fd5b611818866111c3565b9450611826602087016111c3565b93506040860135925060608601359150608086013567ffffffffffffffff81111561185057600080fd5b61159988828901611443565b60008060006060848603121561187157600080fd5b61187a846111c3565b95602085013595506040909401359392505050565b600181811c908216806118a357607f821691505b6020821081036118c357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611907576119076118df565b5060010190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b600082198211156119aa576119aa6118df565b500190565b6040815260006119c26040830185611671565b82810360208401526119d48185611671565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090611b1f90830186611671565b8281036060840152611b318186611671565b90508281036080840152611b45818561134e565b98975050505050505050565b600060208284031215611b6357600080fd5b815161123c81611209565b600060033d1115611b875760046000803e5060005160e01c5b90565b600060443d1015611b985790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611bc857505050505090565b8285019150815181811115611be05750505050505090565b843d8701016020828501011115611bfa5750505050505090565b611c0960208286010187611259565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611c969083018461134e565b97965050505050505056fea264697066735822122021dc84ccd4bef01faafde45c62a06adefb2f7af8c635bab46230621a7276ac5564736f6c634300080e0033";

type ERC1155MockUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1155MockUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1155MockUpgradeable__factory extends ContractFactory {
  constructor(...args: ERC1155MockUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC1155MockUpgradeable> {
    return super.deploy(overrides || {}) as Promise<ERC1155MockUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC1155MockUpgradeable {
    return super.attach(address) as ERC1155MockUpgradeable;
  }
  override connect(signer: Signer): ERC1155MockUpgradeable__factory {
    return super.connect(signer) as ERC1155MockUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1155MockUpgradeableInterface {
    return new utils.Interface(_abi) as ERC1155MockUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1155MockUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC1155MockUpgradeable;
  }
}
