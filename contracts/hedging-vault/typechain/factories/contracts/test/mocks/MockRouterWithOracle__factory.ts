/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockRouterWithOracle,
  MockRouterWithOracleInterface,
} from "../../../../contracts/test/mocks/MockRouterWithOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "assets_",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "oracles_",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__FromUintOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256",
          },
        ],
        internalType: "struct ISwapRouter.ExactOutputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactOutputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactOutputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "oracles",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "assetOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMinimum",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015c7380380620015c7833981016040819052620000349162000256565b8051825114620000c95760405162461bcd60e51b815260206004820152605060248201527f4d6f636b556e69737761705633526f75746572576974684f7261636c653a206160448201527f737365747320616e64206f7261636c657320617272617973206d75737420626560648201526f040e8d0ca40e6c2daca40d8cadccee8d60831b608482015260a40160405180910390fd5b60005b82518110156200016d57818181518110620000eb57620000eb620002c0565b60200260200101516000808584815181106200010b576200010b620002c0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080806200016490620002d6565b915050620000cc565b505050620002fe565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620001a457600080fd5b919050565b600082601f830112620001bb57600080fd5b815160206001600160401b0380831115620001da57620001da62000176565b8260051b604051601f19603f8301168101818110848211171562000202576200020262000176565b6040529384528581018301938381019250878511156200022157600080fd5b83870191505b848210156200024b576200023b826200018c565b8352918301919083019062000227565b979650505050505050565b600080604083850312156200026a57600080fd5b82516001600160401b03808211156200028257600080fd5b6200029086838701620001a9565b93506020850151915080821115620002a757600080fd5b50620002b685828601620001a9565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060018201620002f757634e487b7160e01b600052601160045260246000fd5b5060010190565b6112b9806200030e6000396000f3fe60806040526004361061007b5760003560e01c8063db3e21981161004e578063db3e219814610127578063f28c04981461013a578063fa461e331461014d578063fe0291561461017057600080fd5b8063414bf3891461008057806370a08231146100a6578063addd5099146100c6578063c04b8d5914610114575b600080fd5b61009361008e366004610e0b565b610190565b6040519081526020015b60405180910390f35b3480156100b257600080fd5b506100936100c1366004610e44565b6101c7565b3480156100d257600080fd5b506100fc6100e1366004610e44565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161009d565b610093610122366004610e71565b610232565b610093610135366004610e0b565b61029e565b610093610148366004610e71565b6102cf565b34801561015957600080fd5b5061016e610168366004610ea6565b50505050565b005b34801561017c57600080fd5b5061016e61018b366004610f26565b6102f9565b60006101c16101a26020840184610e44565b6101b26040850160208601610e44565b8460a001358560c0013561030c565b92915050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c19190610f68565b6000808061027d6102438580610f81565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106a792505050565b509150915061029682828660600135876080013561030c565b949350505050565b60006101c16102b06020840184610e44565b6102c06040850160208601610e44565b8460c001358560a001356106e3565b600080806102e06102438580610f81565b50915091506102968282866080013587606001356106e3565b6103058484848461030c565b5050505050565b6001600160a01b0380851660009081526020819052604080822054868416835290822054919290811691168161035d5760405162461bcd60e51b815260040161035490610fcf565b60405180910390fd5b6001600160a01b0381166103835760405162461bcd60e51b81526004016103549061102c565b6000826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e791906110a3565b5050509150506000826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906110a3565b5050509150506000896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb91906110f3565b90506000896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052191906110f3565b90506105368260ff168260ff168b8787610a27565b9650878710156105ae5760405162461bcd60e51b815260206004820152603b60248201527f4d6f636b556e69737761705633526f75746572576974684f7261636c653a206160448201527f6d6f756e744f7574203c20616d6f756e744f75744d696e696d756d00000000006064820152608401610354565b6040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038c16906323b872dd906064016020604051808303816000875af1158015610601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106259190611116565b5060405163a9059cbb60e01b8152336004820152602481018890526001600160a01b038b169063a9059cbb906044015b6020604051808303816000875af1158015610674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106989190611116565b50505050505050949350505050565b600080806106b58482610adb565b92506106c2846014610b40565b90506106da6106d36003601461114e565b8590610adb565b91509193909250565b6001600160a01b0380851660009081526020819052604080822054868416835290822054919290811691168161072b5760405162461bcd60e51b815260040161035490610fcf565b6001600160a01b0381166107515760405162461bcd60e51b81526004016103549061102c565b6000826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b591906110a3565b5050509150506000826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f91906110a3565b5050509150506000896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610865573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088991906110f3565b90506000896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ef91906110f3565b90506109048160ff168360ff168a8688610a27565b96508887111561097c5760405162461bcd60e51b815260206004820152603960248201527f4d6f636b556e69737761705633526f75746572576974684f7261636c653a206160448201527f6d6f756e74496e203e20616d6f756e74496e4d6178696d756d000000000000006064820152608401610354565b6040516323b872dd60e01b8152336004820152306024820152604481018890526001600160a01b038c16906323b872dd906064016020604051808303816000875af11580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f39190611116565b5060405163a9059cbb60e01b8152336004820152602481018990526001600160a01b038b169063a9059cbb90604401610655565b600080610a44610a3685610beb565b610a3f85610beb565b610c38565b905085871115610a81576000610a5a8789611166565b9050610a79610a72610a6d83600a611261565b610beb565b8390610c38565b915050610ab3565b85871015610ab3576000610a958888611166565b9050610aaf610aa8610a6d83600a611261565b8390610c54565b9150505b610ad0610ac2610aa887610beb565b670de0b6b3a7640000900490565b979650505050505050565b6000610ae882601461114e565b83511015610b305760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610354565b500160200151600160601b900490565b600081610b4e81600361114e565b1015610b905760405162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b6044820152606401610354565b610b9b82600361114e565b83511015610be25760405162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b6044820152606401610354565b50016003015190565b60007812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21821115610c2a57604051633492ffd960e01b815260048101839052602401610354565b50670de0b6b3a76400000290565b6000610c4d83670de0b6b3a764000084610c60565b9392505050565b6000610c4d8383610d2c565b6000808060001985870985870292508281108382030391505080600003610c9a57838281610c9057610c9061126d565b0492505050610c4d565b838110610cc457604051631dcf306360e21b81526004810182905260248101859052604401610354565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110610d705760405163698d9a0160e11b815260048101829052602401610354565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff8211905082600003610dae5780670de0b6b3a76400008504019450505050506101c1565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b60006101008284031215610e0557600080fd5b50919050565b60006101008284031215610e1e57600080fd5b610c4d8383610df2565b80356001600160a01b0381168114610e3f57600080fd5b919050565b600060208284031215610e5657600080fd5b610c4d82610e28565b600060a08284031215610e0557600080fd5b600060208284031215610e8357600080fd5b813567ffffffffffffffff811115610e9a57600080fd5b61029684828501610e5f565b60008060008060608587031215610ebc57600080fd5b8435935060208501359250604085013567ffffffffffffffff80821115610ee257600080fd5b818701915087601f830112610ef657600080fd5b813581811115610f0557600080fd5b886020828501011115610f1757600080fd5b95989497505060200194505050565b60008060008060808587031215610f3c57600080fd5b610f4585610e28565b9350610f5360208601610e28565b93969395505050506040820135916060013590565b600060208284031215610f7a57600080fd5b5051919050565b6000808335601e19843603018112610f9857600080fd5b83018035915067ffffffffffffffff821115610fb357600080fd5b602001915036819003821315610fc857600080fd5b9250929050565b6020808252603b908201527f4d6f636b556e69737761705633526f75746572576974684f7261636c653a206f60408201527f7261636c6520666f72206173736574496e206e6f7420666f756e640000000000606082015260800190565b6020808252603c908201527f4d6f636b556e69737761705633526f75746572576974684f7261636c653a206f60408201527f7261636c6520666f722061737365744f7574206e6f7420666f756e6400000000606082015260800190565b805169ffffffffffffffffffff81168114610e3f57600080fd5b600080600080600060a086880312156110bb57600080fd5b6110c486611089565b94506020860151935060408601519250606086015191506110e760808701611089565b90509295509295909350565b60006020828403121561110557600080fd5b815160ff81168114610c4d57600080fd5b60006020828403121561112857600080fd5b81518015158114610c4d57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561116157611161611138565b500190565b60008282101561117857611178611138565b500390565b600181815b808511156111b857816000190482111561119e5761119e611138565b808516156111ab57918102915b93841c9390800290611182565b509250929050565b6000826111cf575060016101c1565b816111dc575060006101c1565b81600181146111f257600281146111fc57611218565b60019150506101c1565b60ff84111561120d5761120d611138565b50506001821b6101c1565b5060208310610133831016604e8410600b841016171561123b575081810a6101c1565b611245838361117d565b806000190482111561125957611259611138565b029392505050565b6000610c4d83836111c0565b634e487b7160e01b600052601260045260246000fdfea26469706673582212206c420d03e9ac14d070ca5d029b55752186a0597a17ddd24b9763907e77f46fb764736f6c634300080e0033";

type MockRouterWithOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRouterWithOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRouterWithOracle__factory extends ContractFactory {
  constructor(...args: MockRouterWithOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    assets_: PromiseOrValue<string>[],
    oracles_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRouterWithOracle> {
    return super.deploy(
      assets_,
      oracles_,
      overrides || {}
    ) as Promise<MockRouterWithOracle>;
  }
  override getDeployTransaction(
    assets_: PromiseOrValue<string>[],
    oracles_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(assets_, oracles_, overrides || {});
  }
  override attach(address: string): MockRouterWithOracle {
    return super.attach(address) as MockRouterWithOracle;
  }
  override connect(signer: Signer): MockRouterWithOracle__factory {
    return super.connect(signer) as MockRouterWithOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRouterWithOracleInterface {
    return new utils.Interface(_abi) as MockRouterWithOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRouterWithOracle {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockRouterWithOracle;
  }
}
