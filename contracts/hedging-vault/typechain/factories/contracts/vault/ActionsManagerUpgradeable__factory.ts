/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ActionsManagerUpgradeable,
  ActionsManagerUpgradeableInterface,
} from "../../../contracts/vault/ActionsManagerUpgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IAction[]",
        name: "actions",
        type: "address[]",
      },
    ],
    name: "ActionsAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getAction",
    outputs: [
      {
        internalType: "contract IAction",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getActionsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060fd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063b6e76873146037578063e78c65aa146063575b600080fd5b6046604236600460b0565b6073565b6040516001600160a01b0390911681526020015b60405180910390f35b600154604051908152602001605a565b600060018281548110609557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b60006020828403121560c0578081fd5b503591905056fea26469706673582212200a17cbfc851d56ae428ac7c50e07abc115912e69078a2d01d8401033b2cf55b764736f6c63430008040033";

type ActionsManagerUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ActionsManagerUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ActionsManagerUpgradeable__factory extends ContractFactory {
  constructor(...args: ActionsManagerUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ActionsManagerUpgradeable> {
    return super.deploy(overrides || {}) as Promise<ActionsManagerUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ActionsManagerUpgradeable {
    return super.attach(address) as ActionsManagerUpgradeable;
  }
  override connect(signer: Signer): ActionsManagerUpgradeable__factory {
    return super.connect(signer) as ActionsManagerUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ActionsManagerUpgradeableInterface {
    return new utils.Interface(_abi) as ActionsManagerUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ActionsManagerUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ActionsManagerUpgradeable;
  }
}
