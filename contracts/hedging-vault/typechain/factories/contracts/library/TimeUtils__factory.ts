/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TimeUtils,
  TimeUtilsInterface,
} from "../../../contracts/library/TimeUtils";

const _abi = [
  {
    inputs: [],
    name: "SECONDS_IN_DAY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SECONDS_IN_HOUR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SECONDS_TO_0800_UTC",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e1610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060475760003560e01c806361a52a3614604c5780638793f2c7146067578063de4971e814606f575b600080fd5b60556201518081565b60405190815260200160405180910390f35b6055610e1081565b6055607c610e106008607f565b81565b600081600019048311821515161560a657634e487b7160e01b600052601160045260246000fd5b50029056fea2646970667358221220cc6b714c1c3c5e4dfa5e2e26676f62ebfc629de5480e1fc3863f8973e0ca4aa764736f6c634300080e0033";

type TimeUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TimeUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TimeUtils__factory extends ContractFactory {
  constructor(...args: TimeUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TimeUtils> {
    return super.deploy(overrides || {}) as Promise<TimeUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TimeUtils {
    return super.attach(address) as TimeUtils;
  }
  override connect(signer: Signer): TimeUtils__factory {
    return super.connect(signer) as TimeUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TimeUtilsInterface {
    return new utils.Interface(_abi) as TimeUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TimeUtils {
    return new Contract(address, _abi, signerOrProvider) as TimeUtils;
  }
}
