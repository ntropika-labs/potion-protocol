/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestWrapperActionsContainer,
  TestWrapperActionsContainerInterface,
} from "../../../contracts/test-wrappers/TestWrapperActionsContainer";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IAction[]",
        name: "actions",
        type: "address[]",
      },
    ],
    name: "ActionsAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getAction",
    outputs: [
      {
        internalType: "contract IAction",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getActionsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAction[]",
        name: "actions",
        type: "address[]",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105b5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a224cee714610046578063b6e768731461005b578063e78c65aa1461008b575b600080fd5b6100596100543660046103d0565b61009c565b005b61006e610069366004610445565b610115565b6040516001600160a01b0390911681526020015b60405180910390f35b600154604051908152602001610082565b60006100a86001610145565b905080156100c0576000805461ff0019166101001790555b6100ca83836101d6565b8015610110576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60006001828154811061012a5761012a61045e565b6000918252602090912001546001600160a01b031692915050565b60008054610100900460ff1615610195578160ff1660011480156101685750303b155b61018d5760405162461bcd60e51b815260040161018490610474565b60405180910390fd5b506000919050565b60005460ff8084169116106101bc5760405162461bcd60e51b815260040161018490610474565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166102415760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610184565b8067ffffffffffffffff81111561025a5761025a6104c2565b604051908082528060200260200182016040528015610283578160200160208202803683370190505b50805161029891600191602090910190610356565b5060005b81811015610319578282828181106102b6576102b661045e565b90506020020160208101906102cb91906104d8565b600182815481106102de576102de61045e565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061031181610508565b91505061029c565b507fe3fa68abdc4e3e7248b515aa82f93f671e5a70358342a2cbd4fea9d278cf15b4600160405161034a919061052f565b60405180910390a15050565b8280548282559060005260206000209081019282156103ab579160200282015b828111156103ab57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610376565b506103b79291506103bb565b5090565b5b808211156103b757600081556001016103bc565b600080602083850312156103e357600080fd5b823567ffffffffffffffff808211156103fb57600080fd5b818501915085601f83011261040f57600080fd5b81358181111561041e57600080fd5b8660208260051b850101111561043357600080fd5b60209290920196919550909350505050565b60006020828403121561045757600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156104ea57600080fd5b81356001600160a01b038116811461050157600080fd5b9392505050565b60006001820161052857634e487b7160e01b600052601160045260246000fd5b5060010190565b6020808252825482820181905260008481528281209092916040850190845b818110156105735783546001600160a01b03168352600193840193928501920161054e565b5090969550505050505056fea26469706673582212206c97d145ca639678d0f625794124c9cdd3b55583e4de2ddeb8bdc139ff2e90e764736f6c634300080e0033";

type TestWrapperActionsContainerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWrapperActionsContainerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWrapperActionsContainer__factory extends ContractFactory {
  constructor(...args: TestWrapperActionsContainerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestWrapperActionsContainer> {
    return super.deploy(
      overrides || {}
    ) as Promise<TestWrapperActionsContainer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestWrapperActionsContainer {
    return super.attach(address) as TestWrapperActionsContainer;
  }
  override connect(signer: Signer): TestWrapperActionsContainer__factory {
    return super.connect(signer) as TestWrapperActionsContainer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWrapperActionsContainerInterface {
    return new utils.Interface(_abi) as TestWrapperActionsContainerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWrapperActionsContainer {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestWrapperActionsContainer;
  }
}
