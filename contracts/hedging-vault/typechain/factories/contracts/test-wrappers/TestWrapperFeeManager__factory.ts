/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestWrapperFeeManager,
  TestWrapperFeeManagerInterface,
} from "../../../contracts/test-wrappers/TestWrapperFeeManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "prevAdminAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newAdminAddress",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "receipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "managementAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "performanceAmount",
        type: "uint256",
      },
    ],
    name: "FeesETHSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldFeeReceipient",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newFeeReceipient",
        type: "address",
      },
    ],
    name: "FeesReceipientChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "receipient",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "managementAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "performanceAmount",
        type: "uint256",
      },
    ],
    name: "FeesSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldManagementFee",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newManagementFee",
        type: "uint256",
      },
    ],
    name: "ManagementFeeChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "prevOperatorAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOperatorAddress",
        type: "address",
      },
    ],
    name: "OperatorChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldPerformanceFee",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPerformanceFee",
        type: "uint256",
      },
    ],
    name: "PerformanceFeeChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "prevStrategistAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newStrategistAddress",
        type: "address",
      },
    ],
    name: "StrategistChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "principalAmount",
        type: "uint256",
      },
    ],
    name: "calculateManagementPayment",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "earningsAmount",
        type: "uint256",
      },
    ],
    name: "calculatePerformancePayment",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdminAddress",
        type: "address",
      },
    ],
    name: "changeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOperatorAddress",
        type: "address",
      },
    ],
    name: "changeOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newStrategistAddress",
        type: "address",
      },
    ],
    name: "changeStrategist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFeesRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getManagementFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPerformanceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStrategist",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "managementFee_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "performanceFee_",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "feeReceipient_",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "principalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "earningsAmount",
        type: "uint256",
      },
    ],
    name: "payFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "principalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "earningsAmount",
        type: "uint256",
      },
    ],
    name: "payFeesETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "newFeesRecipient",
        type: "address",
      },
    ],
    name: "setFeesRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newManagementFee",
        type: "uint256",
      },
    ],
    name: "setManagementFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newPerformanceFee",
        type: "uint256",
      },
    ],
    name: "setPerformanceFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611427806100206000396000f3fe6080604052600436106101025760003560e01c80636e9960c3116100955780638f283970116100645780638f283970146102a25780639c2b1a95146102c25780639e3d87cd146102d7578063e7f43c68146102f7578063fe56e2321461031557600080fd5b80636e9960c31461022457806370897b231461024257806372eb05b91461026257806384b7719a1461028257600080fd5b806334d9b2dc116100d157806334d9b2dc146101a657806344ff7d28146101c45780634abd2b8c146101e45780635ebc75071461020457600080fd5b806306394c9b1461010e578063235c3603146101305780632374f6fb1461015457806328a8317a1461017457600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e610129366004611040565b610335565b005b34801561013c57600080fd5b506066545b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061012e61016f36600461105d565b61037d565b34801561018057600080fd5b506067546001600160a01b03165b6040516001600160a01b03909116815260200161014b565b3480156101b257600080fd5b506034546001600160a01b031661018e565b3480156101d057600080fd5b506101416101df366004611092565b61038d565b3480156101f057600080fd5b506101416101ff366004611092565b61039e565b34801561021057600080fd5b5061012e61021f3660046110ab565b6103a9565b34801561023057600080fd5b506033546001600160a01b031661018e565b34801561024e57600080fd5b5061012e61025d366004611092565b6103b7565b34801561026e57600080fd5b5061012e61027d366004611040565b6103f3565b34801561028e57600080fd5b5061012e61029d366004611040565b61042f565b3480156102ae57600080fd5b5061012e6102bd366004611040565b61046b565b3480156102ce57600080fd5b50606554610141565b3480156102e357600080fd5b5061012e6102f23660046110cd565b6104a7565b34801561030357600080fd5b506035546001600160a01b031661018e565b34801561032157600080fd5b5061012e610330366004611092565b61052e565b6033546001600160a01b0316336001600160a01b0316146103715760405162461bcd60e51b815260040161036890611117565b60405180910390fd5b61037a8161056a565b50565b61038883838361062a565b505050565b6000610398826106bb565b92915050565b6000610398826106d2565b6103b382826106e9565b5050565b6033546001600160a01b0316336001600160a01b0316146103ea5760405162461bcd60e51b815260040161036890611117565b61037a81610771565b6033546001600160a01b0316336001600160a01b0316146104265760405162461bcd60e51b815260040161036890611117565b61037a81610826565b6033546001600160a01b0316336001600160a01b0316146104625760405162461bcd60e51b815260040161036890611117565b61037a816108e8565b6033546001600160a01b0316336001600160a01b03161461049e5760405162461bcd60e51b815260040161036890611117565b61037a816109a2565b60006104b36001610a5f565b905080156104cb576000805461ff0019166101001790555b6104d6858687610ae7565b6104e1848484610b29565b8015610527576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6033546001600160a01b0316336001600160a01b0316146105615760405162461bcd60e51b815260040161036890611117565b61037a81610b6b565b6001600160a01b0381166105d85760405162461bcd60e51b815260206004820152602f60248201527f4e6577204f70657261746f7220616464726573732063616e6e6f74206265207460448201526e6865206e756c6c206164647265737360881b6064820152608401610368565b603580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fd58299b712891143e76310d5e664c4203c940a67db37cf856bdaa3c5c76a802c90600090a35050565b6000610635836106bb565b90506000610642836106d2565b60675460408051858152602081018490529293506001600160a01b03888116939216917f5241d2cb58e4448964f455d109aca8b485a5301cb9d9a0dc4da3ec6cc70e67c9910160405180910390a3606754610527906001600160a01b03166106aa8385611172565b6001600160a01b0388169190610c17565b600061039860655483610c6990919063ffffffff16565b600061039860665483610c6990919063ffffffff16565b60006106f4836106bb565b90506000610701836106d2565b60675460408051858152602081018490529293506001600160a01b03909116917f59f1b1b83406dc43f1ae9ce3dbdcfdd582378575079233e1e22543938fa55afa910160405180910390a261076b6107598284611172565b6067546001600160a01b031690610c9d565b50505050565b61077a81610db6565b6107e05760405162461bcd60e51b815260206004820152603160248201527f506572666f726d616e636520666565206d757374206265206c6573732074686160448201527006e206f7220657175616c20746f2031303607c1b6064820152608401610368565b606680549082905560408051828152602081018490527ffac39c9265fbab8fd6b4293b3f584cb3b1c0c39fb315acbcd4d1bef067c340cd91015b60405180910390a15050565b6001600160a01b0381166108965760405162461bcd60e51b815260206004820152603160248201527f4e6577205374726174656769737420616464726573732063616e6e6f7420626560448201527020746865206e756c6c206164647265737360781b6064820152608401610368565b603480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f3a76e21b656d08e1747e6decb6c6dcb819ace8e654b6582f4fcc50875ff9f85490600090a35050565b6067546001600160a01b03908116908216036109525760405162461bcd60e51b8152602060048201526024808201527f4665657320726563697069656e74206973207468652073616d65206173206265604482015263666f726560e01b6064820152608401610368565b606780546001600160a01b0319166001600160a01b03831690811790915560405182919081907fc5d8512a1ce98ff41b33712f195414dde7fd3a1a996a15dafab8933d9d32084490600090a35050565b6001600160a01b038116610a0d5760405162461bcd60e51b815260206004820152602c60248201527f4e65772041646d696e20616464726573732063616e6e6f74206265207468652060448201526b6e756c6c206164647265737360a01b6064820152608401610368565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a35050565b60008054610100900460ff1615610aa6578160ff166001148015610a825750303b155b610a9e5760405162461bcd60e51b81526004016103689061118a565b506000919050565b60005460ff808416911610610acd5760405162461bcd60e51b81526004016103689061118a565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16610b0e5760405162461bcd60e51b8152600401610368906111d8565b610b17836109a2565b610b2082610826565b6103888161056a565b600054610100900460ff16610b505760405162461bcd60e51b8152600401610368906111d8565b610b5983610b6b565b610b6282610771565b610388816108e8565b610b7481610db6565b610bd95760405162461bcd60e51b815260206004820152603060248201527f4d616e6167656d656e7420666565206d757374206265206c657373207468616e60448201526f0206f7220657175616c20746f203130360841b6064820152608401610368565b606580549082905560408051828152602081018490527ffac39c9265fbab8fd6b4293b3f584cb3b1c0c39fb315acbcd4d1bef067c340cd910161081a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610388908490610dd8565b6000610c776006600a611307565b610c82906064611313565b610c8c8385611313565b610c969190611332565b9392505050565b80471015610ced5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610368565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d3a576040519150601f19603f3d011682016040523d82523d6000602084013e610d3f565b606091505b50509050806103885760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610368565b6000610dc46006600a611307565b610dcf906064611313565b90911115919050565b6000610e2d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eaa9092919063ffffffff16565b8051909150156103885780806020019051810190610e4b9190611354565b6103885760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610368565b6060610eb98484600085610ec1565b949350505050565b606082471015610f225760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610368565b6001600160a01b0385163b610f795760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610368565b600080866001600160a01b03168587604051610f9591906113a2565b60006040518083038185875af1925050503d8060008114610fd2576040519150601f19603f3d011682016040523d82523d6000602084013e610fd7565b606091505b5091509150610fe7828286610ff2565b979650505050505050565b60608315611001575081610c96565b8251156110115782518084602001fd5b8160405162461bcd60e51b815260040161036891906113be565b6001600160a01b038116811461037a57600080fd5b60006020828403121561105257600080fd5b8135610c968161102b565b60008060006060848603121561107257600080fd5b833561107d8161102b565b95602085013595506040909401359392505050565b6000602082840312156110a457600080fd5b5035919050565b600080604083850312156110be57600080fd5b50508035926020909101359150565b600080600080608085870312156110e357600080fd5b84356110ee8161102b565b93506020850135925060408501359150606085013561110c8161102b565b939692955090935050565b60208082526025908201527f4f6e6c79207468652041646d696e2063616e2063616c6c20746869732066756e60408201526431ba34b7b760d91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082198211156111855761118561115c565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600181815b8085111561125e5781600019048211156112445761124461115c565b8085161561125157918102915b93841c9390800290611228565b509250929050565b60008261127557506001610398565b8161128257506000610398565b816001811461129857600281146112a2576112be565b6001915050610398565b60ff8411156112b3576112b361115c565b50506001821b610398565b5060208310610133831016604e8410600b84101617156112e1575081810a610398565b6112eb8383611223565b80600019048211156112ff576112ff61115c565b029392505050565b6000610c968383611266565b600081600019048311821515161561132d5761132d61115c565b500290565b60008261134f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561136657600080fd5b81518015158114610c9657600080fd5b60005b83811015611391578181015183820152602001611379565b8381111561076b5750506000910152565b600082516113b4818460208701611376565b9190910192915050565b60208152600082518060208401526113dd816040850160208701611376565b601f01601f1916919091016040019291505056fea26469706673582212205dc824b1fb906de0b554889b3d460f94927e689d17403ebb9667e2aaa65e83ba64736f6c634300080e0033";

type TestWrapperFeeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWrapperFeeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWrapperFeeManager__factory extends ContractFactory {
  constructor(...args: TestWrapperFeeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestWrapperFeeManager> {
    return super.deploy(overrides || {}) as Promise<TestWrapperFeeManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestWrapperFeeManager {
    return super.attach(address) as TestWrapperFeeManager;
  }
  override connect(signer: Signer): TestWrapperFeeManager__factory {
    return super.connect(signer) as TestWrapperFeeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWrapperFeeManagerInterface {
    return new utils.Interface(_abi) as TestWrapperFeeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWrapperFeeManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestWrapperFeeManager;
  }
}
