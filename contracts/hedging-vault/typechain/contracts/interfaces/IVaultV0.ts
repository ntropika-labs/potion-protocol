/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IVaultV0 {
  export type StrategyStruct = {
    actionsIndexes: PromiseOrValue<BigNumberish>[];
    principalPercentages: PromiseOrValue<BigNumberish>[];
  };

  export type StrategyStructOutput = [BigNumber[], BigNumber[]] & {
    actionsIndexes: BigNumber[];
    principalPercentages: BigNumber[];
  };
}

export interface IVaultV0Interface extends utils.Interface {
  functions: {
    "canPositionBeEntered()": FunctionFragment;
    "canPositionBeEnteredWith((uint256[],uint256[]))": FunctionFragment;
    "canPositionBeExited()": FunctionFragment;
    "enterPosition()": FunctionFragment;
    "enterPositionWith((uint256[],uint256[]))": FunctionFragment;
    "exitPosition()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canPositionBeEntered"
      | "canPositionBeEnteredWith"
      | "canPositionBeExited"
      | "enterPosition"
      | "enterPositionWith"
      | "exitPosition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canPositionBeEntered",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canPositionBeEnteredWith",
    values: [IVaultV0.StrategyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "canPositionBeExited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterPositionWith",
    values: [IVaultV0.StrategyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPosition",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "canPositionBeEntered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canPositionBeEnteredWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canPositionBeExited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterPositionWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPosition",
    data: BytesLike
  ): Result;

  events: {
    "VaultPositionEntered(uint256,uint256,tuple)": EventFragment;
    "VaultPositionExited(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VaultPositionEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultPositionExited"): EventFragment;
}

export interface VaultPositionEnteredEventObject {
  totalPrincipalAmount: BigNumber;
  principalAmountInvested: BigNumber;
  strategy: IVaultV0.StrategyStructOutput;
}
export type VaultPositionEnteredEvent = TypedEvent<
  [BigNumber, BigNumber, IVaultV0.StrategyStructOutput],
  VaultPositionEnteredEventObject
>;

export type VaultPositionEnteredEventFilter =
  TypedEventFilter<VaultPositionEnteredEvent>;

export interface VaultPositionExitedEventObject {
  newPrincipalAmount: BigNumber;
  strategy: IVaultV0.StrategyStructOutput;
}
export type VaultPositionExitedEvent = TypedEvent<
  [BigNumber, IVaultV0.StrategyStructOutput],
  VaultPositionExitedEventObject
>;

export type VaultPositionExitedEventFilter =
  TypedEventFilter<VaultPositionExitedEvent>;

export interface IVaultV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canPositionBeEntered(
      overrides?: CallOverrides
    ): Promise<[boolean] & { canEnter: boolean }>;

    canPositionBeEnteredWith(
      strategy: IVaultV0.StrategyStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { canEnter: boolean }>;

    canPositionBeExited(
      overrides?: CallOverrides
    ): Promise<[boolean] & { canExit: boolean }>;

    enterPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterPositionWith(
      strategy: IVaultV0.StrategyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canPositionBeEntered(overrides?: CallOverrides): Promise<boolean>;

  canPositionBeEnteredWith(
    strategy: IVaultV0.StrategyStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canPositionBeExited(overrides?: CallOverrides): Promise<boolean>;

  enterPosition(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterPositionWith(
    strategy: IVaultV0.StrategyStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitPosition(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canPositionBeEntered(overrides?: CallOverrides): Promise<boolean>;

    canPositionBeEnteredWith(
      strategy: IVaultV0.StrategyStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canPositionBeExited(overrides?: CallOverrides): Promise<boolean>;

    enterPosition(overrides?: CallOverrides): Promise<void>;

    enterPositionWith(
      strategy: IVaultV0.StrategyStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPosition(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "VaultPositionEntered(uint256,uint256,tuple)"(
      totalPrincipalAmount?: null,
      principalAmountInvested?: null,
      strategy?: null
    ): VaultPositionEnteredEventFilter;
    VaultPositionEntered(
      totalPrincipalAmount?: null,
      principalAmountInvested?: null,
      strategy?: null
    ): VaultPositionEnteredEventFilter;

    "VaultPositionExited(uint256,tuple)"(
      newPrincipalAmount?: null,
      strategy?: null
    ): VaultPositionExitedEventFilter;
    VaultPositionExited(
      newPrincipalAmount?: null,
      strategy?: null
    ): VaultPositionExitedEventFilter;
  };

  estimateGas: {
    canPositionBeEntered(overrides?: CallOverrides): Promise<BigNumber>;

    canPositionBeEnteredWith(
      strategy: IVaultV0.StrategyStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canPositionBeExited(overrides?: CallOverrides): Promise<BigNumber>;

    enterPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterPositionWith(
      strategy: IVaultV0.StrategyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canPositionBeEntered(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canPositionBeEnteredWith(
      strategy: IVaultV0.StrategyStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canPositionBeExited(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterPositionWith(
      strategy: IVaultV0.StrategyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
