/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IActionInterface extends utils.Interface {
  functions: {
    "canPositionBeEntered(address)": FunctionFragment;
    "canPositionBeExited(address)": FunctionFragment;
    "enterPosition(address,uint256)": FunctionFragment;
    "exitPosition(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canPositionBeEntered"
      | "canPositionBeExited"
      | "enterPosition"
      | "exitPosition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canPositionBeEntered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canPositionBeExited",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enterPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPosition",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "canPositionBeEntered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canPositionBeExited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPosition",
    data: BytesLike
  ): Result;

  events: {
    "ActionPositionEntered(address,uint256)": EventFragment;
    "ActionPositionExited(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionPositionEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActionPositionExited"): EventFragment;
}

export interface ActionPositionEnteredEventObject {
  investmentAsset: string;
  amountToInvest: BigNumber;
}
export type ActionPositionEnteredEvent = TypedEvent<
  [string, BigNumber],
  ActionPositionEnteredEventObject
>;

export type ActionPositionEnteredEventFilter =
  TypedEventFilter<ActionPositionEnteredEvent>;

export interface ActionPositionExitedEventObject {
  investmentAsset: string;
  amountReturned: BigNumber;
}
export type ActionPositionExitedEvent = TypedEvent<
  [string, BigNumber],
  ActionPositionExitedEventObject
>;

export type ActionPositionExitedEventFilter =
  TypedEventFilter<ActionPositionExitedEvent>;

export interface IAction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IActionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canPositionBeEntered(
      investmentAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { canEnter: boolean }>;

    canPositionBeExited(
      investmentAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { canExit: boolean }>;

    enterPosition(
      investmentAsset: PromiseOrValue<string>,
      amountToInvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitPosition(
      investmentAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canPositionBeEntered(
    investmentAsset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canPositionBeExited(
    investmentAsset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  enterPosition(
    investmentAsset: PromiseOrValue<string>,
    amountToInvest: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitPosition(
    investmentAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canPositionBeEntered(
      investmentAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canPositionBeExited(
      investmentAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enterPosition(
      investmentAsset: PromiseOrValue<string>,
      amountToInvest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPosition(
      investmentAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ActionPositionEntered(address,uint256)"(
      investmentAsset?: PromiseOrValue<string> | null,
      amountToInvest?: null
    ): ActionPositionEnteredEventFilter;
    ActionPositionEntered(
      investmentAsset?: PromiseOrValue<string> | null,
      amountToInvest?: null
    ): ActionPositionEnteredEventFilter;

    "ActionPositionExited(address,uint256)"(
      investmentAsset?: PromiseOrValue<string> | null,
      amountReturned?: null
    ): ActionPositionExitedEventFilter;
    ActionPositionExited(
      investmentAsset?: PromiseOrValue<string> | null,
      amountReturned?: null
    ): ActionPositionExitedEventFilter;
  };

  estimateGas: {
    canPositionBeEntered(
      investmentAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canPositionBeExited(
      investmentAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterPosition(
      investmentAsset: PromiseOrValue<string>,
      amountToInvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitPosition(
      investmentAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canPositionBeEntered(
      investmentAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canPositionBeExited(
      investmentAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterPosition(
      investmentAsset: PromiseOrValue<string>,
      amountToInvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitPosition(
      investmentAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
