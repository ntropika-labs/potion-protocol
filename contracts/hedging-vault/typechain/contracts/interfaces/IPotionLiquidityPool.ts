/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ICurveManager {
  export type CurveStruct = {
    a_59x18: PromiseOrValue<BigNumberish>;
    b_59x18: PromiseOrValue<BigNumberish>;
    c_59x18: PromiseOrValue<BigNumberish>;
    d_59x18: PromiseOrValue<BigNumberish>;
    max_util_59x18: PromiseOrValue<BigNumberish>;
  };

  export type CurveStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    a_59x18: BigNumber;
    b_59x18: BigNumber;
    c_59x18: BigNumber;
    d_59x18: BigNumber;
    max_util_59x18: BigNumber;
  };
}

export declare namespace ICriteriaManager {
  export type CriteriaStruct = {
    underlyingAsset: PromiseOrValue<string>;
    strikeAsset: PromiseOrValue<string>;
    isPut: PromiseOrValue<boolean>;
    maxStrikePercent: PromiseOrValue<BigNumberish>;
    maxDurationInDays: PromiseOrValue<BigNumberish>;
  };

  export type CriteriaStructOutput = [
    string,
    string,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    underlyingAsset: string;
    strikeAsset: string;
    isPut: boolean;
    maxStrikePercent: BigNumber;
    maxDurationInDays: BigNumber;
  };
}

export declare namespace IPotionLiquidityPool {
  export type CounterpartyDetailsStruct = {
    lp: PromiseOrValue<string>;
    poolId: PromiseOrValue<BigNumberish>;
    curve: ICurveManager.CurveStruct;
    criteria: ICriteriaManager.CriteriaStruct;
    orderSizeInOtokens: PromiseOrValue<BigNumberish>;
  };

  export type CounterpartyDetailsStructOutput = [
    string,
    BigNumber,
    ICurveManager.CurveStructOutput,
    ICriteriaManager.CriteriaStructOutput,
    BigNumber
  ] & {
    lp: string;
    poolId: BigNumber;
    curve: ICurveManager.CurveStructOutput;
    criteria: ICriteriaManager.CriteriaStructOutput;
    orderSizeInOtokens: BigNumber;
  };

  export type PoolOfCapitalStruct = {
    total: PromiseOrValue<BigNumberish>;
    locked: PromiseOrValue<BigNumberish>;
    curveHash: PromiseOrValue<BytesLike>;
    criteriaSetHash: PromiseOrValue<BytesLike>;
  };

  export type PoolOfCapitalStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    total: BigNumber;
    locked: BigNumber;
    curveHash: string;
    criteriaSetHash: string;
  };

  export type PoolIdentifierStruct = {
    lp: PromiseOrValue<string>;
    poolId: PromiseOrValue<BigNumberish>;
  };

  export type PoolIdentifierStructOutput = [string, BigNumber] & {
    lp: string;
    poolId: BigNumber;
  };
}

export interface IPotionLiquidityPoolInterface extends utils.Interface {
  functions: {
    "buyOtokens(address,(address,uint256,(int256,int256,int256,int256,int256),(address,address,bool,uint256,uint256),uint256)[],uint256)": FunctionFragment;
    "createAndBuyOtokens(address,address,address,uint256,uint256,bool,(address,uint256,(int256,int256,int256,int256,int256),(address,address,bool,uint256,uint256),uint256)[],uint256)": FunctionFragment;
    "getVaultId(address)": FunctionFragment;
    "lpPools(address,uint256)": FunctionFragment;
    "settleAfterExpiry(address)": FunctionFragment;
    "settleAndRedistributeSettlement(address,(address,uint256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyOtokens"
      | "createAndBuyOtokens"
      | "getVaultId"
      | "lpPools"
      | "settleAfterExpiry"
      | "settleAndRedistributeSettlement"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyOtokens",
    values: [
      PromiseOrValue<string>,
      IPotionLiquidityPool.CounterpartyDetailsStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createAndBuyOtokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      IPotionLiquidityPool.CounterpartyDetailsStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lpPools",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAfterExpiry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAndRedistributeSettlement",
    values: [
      PromiseOrValue<string>,
      IPotionLiquidityPool.PoolIdentifierStruct[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "buyOtokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAndBuyOtokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaultId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleAfterExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAndRedistributeSettlement",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPotionLiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPotionLiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyOtokens(
      _otoken: PromiseOrValue<string>,
      _sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAndBuyOtokens(
      underlyingAsset: PromiseOrValue<string>,
      strikeAsset: PromiseOrValue<string>,
      collateralAsset: PromiseOrValue<string>,
      strikePrice: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[],
      maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVaultId(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lpPools(
      lpAddress: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPotionLiquidityPool.PoolOfCapitalStructOutput]>;

    settleAfterExpiry(
      _otoken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleAndRedistributeSettlement(
      _otoken: PromiseOrValue<string>,
      _pools: IPotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyOtokens(
    _otoken: PromiseOrValue<string>,
    _sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[],
    _maxPremium: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAndBuyOtokens(
    underlyingAsset: PromiseOrValue<string>,
    strikeAsset: PromiseOrValue<string>,
    collateralAsset: PromiseOrValue<string>,
    strikePrice: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    isPut: PromiseOrValue<boolean>,
    sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[],
    maxPremium: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVaultId(
    _otoken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lpPools(
    lpAddress: PromiseOrValue<string>,
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPotionLiquidityPool.PoolOfCapitalStructOutput>;

  settleAfterExpiry(
    _otoken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleAndRedistributeSettlement(
    _otoken: PromiseOrValue<string>,
    _pools: IPotionLiquidityPool.PoolIdentifierStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyOtokens(
      _otoken: PromiseOrValue<string>,
      _sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAndBuyOtokens(
      underlyingAsset: PromiseOrValue<string>,
      strikeAsset: PromiseOrValue<string>,
      collateralAsset: PromiseOrValue<string>,
      strikePrice: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[],
      maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultId(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpPools(
      lpAddress: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPotionLiquidityPool.PoolOfCapitalStructOutput>;

    settleAfterExpiry(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAndRedistributeSettlement(
      _otoken: PromiseOrValue<string>,
      _pools: IPotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buyOtokens(
      _otoken: PromiseOrValue<string>,
      _sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAndBuyOtokens(
      underlyingAsset: PromiseOrValue<string>,
      strikeAsset: PromiseOrValue<string>,
      collateralAsset: PromiseOrValue<string>,
      strikePrice: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[],
      maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVaultId(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpPools(
      lpAddress: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleAfterExpiry(
      _otoken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleAndRedistributeSettlement(
      _otoken: PromiseOrValue<string>,
      _pools: IPotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyOtokens(
      _otoken: PromiseOrValue<string>,
      _sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAndBuyOtokens(
      underlyingAsset: PromiseOrValue<string>,
      strikeAsset: PromiseOrValue<string>,
      collateralAsset: PromiseOrValue<string>,
      strikePrice: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[],
      maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVaultId(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpPools(
      lpAddress: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settleAfterExpiry(
      _otoken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleAndRedistributeSettlement(
      _otoken: PromiseOrValue<string>,
      _pools: IPotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
