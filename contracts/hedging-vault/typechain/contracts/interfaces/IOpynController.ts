/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IOpynController {
  export type ActionArgsStruct = {
    actionType: BigNumberish;
    owner: string;
    secondAddress: string;
    asset: string;
    vaultId: BigNumberish;
    amount: BigNumberish;
    index: BigNumberish;
    data: BytesLike;
  };

  export type ActionArgsStructOutput = [
    number,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    actionType: number;
    owner: string;
    secondAddress: string;
    asset: string;
    vaultId: BigNumber;
    amount: BigNumber;
    index: BigNumber;
    data: string;
  };
}

export interface IOpynControllerInterface extends utils.Interface {
  functions: {
    "getPayout(address,uint256)": FunctionFragment;
    "isSettlementAllowed(address)": FunctionFragment;
    "operate((uint8,address,address,address,uint256,uint256,uint256,bytes)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getPayout" | "isSettlementAllowed" | "operate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPayout",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSettlementAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "operate",
    values: [IOpynController.ActionArgsStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "getPayout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSettlementAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;

  events: {};
}

export interface IOpynController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOpynControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operate(
      _actions: IOpynController.ActionArgsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getPayout(
    _otoken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isSettlementAllowed(
    _otoken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operate(
    _actions: IOpynController.ActionArgsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operate(
      _actions: IOpynController.ActionArgsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operate(
      _actions: IOpynController.ActionArgsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operate(
      _actions: IOpynController.ActionArgsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
