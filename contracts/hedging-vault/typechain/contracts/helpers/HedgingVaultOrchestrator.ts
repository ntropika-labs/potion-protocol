/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type PotionBuyInfoStruct = {
  sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[];
  targetPotionAddress: PromiseOrValue<string>;
  underlyingAsset: PromiseOrValue<string>;
  strikePriceInUSDC: PromiseOrValue<BigNumberish>;
  expirationTimestamp: PromiseOrValue<BigNumberish>;
  expectedPremiumInUSDC: PromiseOrValue<BigNumberish>;
};

export type PotionBuyInfoStructOutput = [
  IPotionLiquidityPool.CounterpartyDetailsStructOutput[],
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  sellers: IPotionLiquidityPool.CounterpartyDetailsStructOutput[];
  targetPotionAddress: string;
  underlyingAsset: string;
  strikePriceInUSDC: BigNumber;
  expirationTimestamp: BigNumber;
  expectedPremiumInUSDC: BigNumber;
};

export declare namespace IUniswapV3Oracle {
  export type SwapInfoStruct = {
    inputToken: PromiseOrValue<string>;
    outputToken: PromiseOrValue<string>;
    expectedPriceRate: PromiseOrValue<BigNumberish>;
    swapPath: PromiseOrValue<BytesLike>;
  };

  export type SwapInfoStructOutput = [string, string, BigNumber, string] & {
    inputToken: string;
    outputToken: string;
    expectedPriceRate: BigNumber;
    swapPath: string;
  };
}

export declare namespace ICurveManager {
  export type CurveStruct = {
    a_59x18: PromiseOrValue<BigNumberish>;
    b_59x18: PromiseOrValue<BigNumberish>;
    c_59x18: PromiseOrValue<BigNumberish>;
    d_59x18: PromiseOrValue<BigNumberish>;
    max_util_59x18: PromiseOrValue<BigNumberish>;
  };

  export type CurveStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    a_59x18: BigNumber;
    b_59x18: BigNumber;
    c_59x18: BigNumber;
    d_59x18: BigNumber;
    max_util_59x18: BigNumber;
  };
}

export declare namespace ICriteriaManager {
  export type CriteriaStruct = {
    underlyingAsset: PromiseOrValue<string>;
    strikeAsset: PromiseOrValue<string>;
    isPut: PromiseOrValue<boolean>;
    maxStrikePercent: PromiseOrValue<BigNumberish>;
    maxDurationInDays: PromiseOrValue<BigNumberish>;
  };

  export type CriteriaStructOutput = [
    string,
    string,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    underlyingAsset: string;
    strikeAsset: string;
    isPut: boolean;
    maxStrikePercent: BigNumber;
    maxDurationInDays: BigNumber;
  };
}

export declare namespace IPotionLiquidityPool {
  export type CounterpartyDetailsStruct = {
    lp: PromiseOrValue<string>;
    poolId: PromiseOrValue<BigNumberish>;
    curve: ICurveManager.CurveStruct;
    criteria: ICriteriaManager.CriteriaStruct;
    orderSizeInOtokens: PromiseOrValue<BigNumberish>;
  };

  export type CounterpartyDetailsStructOutput = [
    string,
    BigNumber,
    ICurveManager.CurveStructOutput,
    ICriteriaManager.CriteriaStructOutput,
    BigNumber
  ] & {
    lp: string;
    poolId: BigNumber;
    curve: ICurveManager.CurveStructOutput;
    criteria: ICriteriaManager.CriteriaStructOutput;
    orderSizeInOtokens: BigNumber;
  };
}

export interface HedgingVaultOrchestratorInterface extends utils.Interface {
  functions: {
    "canEnterNextRound()": FunctionFragment;
    "investmentVault()": FunctionFragment;
    "nextRound((address,address,uint256,bytes),((address,uint256,(int256,int256,int256,int256,int256),(address,address,bool,uint256,uint256),uint256)[],address,address,uint256,uint256,uint256),(address,address,uint256,bytes))": FunctionFragment;
    "owner()": FunctionFragment;
    "potionBuyAction()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roundsInputVault()": FunctionFragment;
    "roundsOutputVault()": FunctionFragment;
    "setSystemAddresses(address,address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canEnterNextRound"
      | "investmentVault"
      | "nextRound"
      | "owner"
      | "potionBuyAction"
      | "renounceOwnership"
      | "roundsInputVault"
      | "roundsOutputVault"
      | "setSystemAddresses"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canEnterNextRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investmentVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextRound",
    values: [
      IUniswapV3Oracle.SwapInfoStruct,
      PotionBuyInfoStruct,
      IUniswapV3Oracle.SwapInfoStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "potionBuyAction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundsInputVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundsOutputVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "canEnterNextRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investmentVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "potionBuyAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundsInputVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundsOutputVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface HedgingVaultOrchestrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HedgingVaultOrchestratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canEnterNextRound(overrides?: CallOverrides): Promise<[boolean]>;

    investmentVault(overrides?: CallOverrides): Promise<[string]>;

    nextRound(
      prevRoundExitSwapInfo: IUniswapV3Oracle.SwapInfoStruct,
      nextRoundPotionBuyInfo: PotionBuyInfoStruct,
      nextRoundEnterSwapInfo: IUniswapV3Oracle.SwapInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    potionBuyAction(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roundsInputVault(overrides?: CallOverrides): Promise<[string]>;

    roundsOutputVault(overrides?: CallOverrides): Promise<[string]>;

    setSystemAddresses(
      investmentVault_: PromiseOrValue<string>,
      potionBuyAction_: PromiseOrValue<string>,
      roundsInputVault_: PromiseOrValue<string>,
      roundsOutputVault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canEnterNextRound(overrides?: CallOverrides): Promise<boolean>;

  investmentVault(overrides?: CallOverrides): Promise<string>;

  nextRound(
    prevRoundExitSwapInfo: IUniswapV3Oracle.SwapInfoStruct,
    nextRoundPotionBuyInfo: PotionBuyInfoStruct,
    nextRoundEnterSwapInfo: IUniswapV3Oracle.SwapInfoStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  potionBuyAction(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roundsInputVault(overrides?: CallOverrides): Promise<string>;

  roundsOutputVault(overrides?: CallOverrides): Promise<string>;

  setSystemAddresses(
    investmentVault_: PromiseOrValue<string>,
    potionBuyAction_: PromiseOrValue<string>,
    roundsInputVault_: PromiseOrValue<string>,
    roundsOutputVault_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canEnterNextRound(overrides?: CallOverrides): Promise<boolean>;

    investmentVault(overrides?: CallOverrides): Promise<string>;

    nextRound(
      prevRoundExitSwapInfo: IUniswapV3Oracle.SwapInfoStruct,
      nextRoundPotionBuyInfo: PotionBuyInfoStruct,
      nextRoundEnterSwapInfo: IUniswapV3Oracle.SwapInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    potionBuyAction(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roundsInputVault(overrides?: CallOverrides): Promise<string>;

    roundsOutputVault(overrides?: CallOverrides): Promise<string>;

    setSystemAddresses(
      investmentVault_: PromiseOrValue<string>,
      potionBuyAction_: PromiseOrValue<string>,
      roundsInputVault_: PromiseOrValue<string>,
      roundsOutputVault_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    canEnterNextRound(overrides?: CallOverrides): Promise<BigNumber>;

    investmentVault(overrides?: CallOverrides): Promise<BigNumber>;

    nextRound(
      prevRoundExitSwapInfo: IUniswapV3Oracle.SwapInfoStruct,
      nextRoundPotionBuyInfo: PotionBuyInfoStruct,
      nextRoundEnterSwapInfo: IUniswapV3Oracle.SwapInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    potionBuyAction(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roundsInputVault(overrides?: CallOverrides): Promise<BigNumber>;

    roundsOutputVault(overrides?: CallOverrides): Promise<BigNumber>;

    setSystemAddresses(
      investmentVault_: PromiseOrValue<string>,
      potionBuyAction_: PromiseOrValue<string>,
      roundsInputVault_: PromiseOrValue<string>,
      roundsOutputVault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canEnterNextRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investmentVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextRound(
      prevRoundExitSwapInfo: IUniswapV3Oracle.SwapInfoStruct,
      nextRoundPotionBuyInfo: PotionBuyInfoStruct,
      nextRoundEnterSwapInfo: IUniswapV3Oracle.SwapInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    potionBuyAction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roundsInputVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundsOutputVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSystemAddresses(
      investmentVault_: PromiseOrValue<string>,
      potionBuyAction_: PromiseOrValue<string>,
      roundsInputVault_: PromiseOrValue<string>,
      roundsOutputVault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
