/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface FeeManagerUpgradeableInterface extends utils.Interface {
  functions: {
    "FEE_DECIMALS()": FunctionFragment;
    "FEE_SCALE()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "changeKeeper(address)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getKeeper()": FunctionFragment;
    "getManagementFee()": FunctionFragment;
    "getPerformanceFee()": FunctionFragment;
    "setFeesRecipient(address)": FunctionFragment;
    "setManagementFee(uint256)": FunctionFragment;
    "setPerformanceFee(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_DECIMALS"
      | "FEE_SCALE"
      | "changeAdmin"
      | "changeKeeper"
      | "getAdmin"
      | "getKeeper"
      | "getManagementFee"
      | "getPerformanceFee"
      | "setFeesRecipient"
      | "setManagementFee"
      | "setPerformanceFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FEE_SCALE", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeKeeper",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "getKeeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getManagementFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPerformanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_SCALE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFee",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "FeesETHSent(address,uint256,uint256)": EventFragment;
    "FeesReceipientChanged(address,address)": EventFragment;
    "FeesSent(address,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "KeeperChanged(address,address)": EventFragment;
    "ManagementFeeChanged(uint256,uint256)": EventFragment;
    "PerformanceFeeChanged(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesETHSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesReceipientChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagementFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerformanceFeeChanged"): EventFragment;
}

export interface AdminChangedEventObject {
  prevAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface FeesETHSentEventObject {
  receipient: string;
  managementAmount: BigNumber;
  performanceAmount: BigNumber;
}
export type FeesETHSentEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FeesETHSentEventObject
>;

export type FeesETHSentEventFilter = TypedEventFilter<FeesETHSentEvent>;

export interface FeesReceipientChangedEventObject {
  oldFeeReceipient: string;
  newFeeReceipient: string;
}
export type FeesReceipientChangedEvent = TypedEvent<
  [string, string],
  FeesReceipientChangedEventObject
>;

export type FeesReceipientChangedEventFilter =
  TypedEventFilter<FeesReceipientChangedEvent>;

export interface FeesSentEventObject {
  receipient: string;
  token: string;
  managementAmount: BigNumber;
  performanceAmount: BigNumber;
}
export type FeesSentEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  FeesSentEventObject
>;

export type FeesSentEventFilter = TypedEventFilter<FeesSentEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KeeperChangedEventObject {
  prevKeeper: string;
  newKeeper: string;
}
export type KeeperChangedEvent = TypedEvent<
  [string, string],
  KeeperChangedEventObject
>;

export type KeeperChangedEventFilter = TypedEventFilter<KeeperChangedEvent>;

export interface ManagementFeeChangedEventObject {
  oldManagementFee: BigNumber;
  newManagementFee: BigNumber;
}
export type ManagementFeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ManagementFeeChangedEventObject
>;

export type ManagementFeeChangedEventFilter =
  TypedEventFilter<ManagementFeeChangedEvent>;

export interface PerformanceFeeChangedEventObject {
  oldPerformanceFee: BigNumber;
  newPerformanceFee: BigNumber;
}
export type PerformanceFeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PerformanceFeeChangedEventObject
>;

export type PerformanceFeeChangedEventFilter =
  TypedEventFilter<PerformanceFeeChangedEvent>;

export interface FeeManagerUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeManagerUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    FEE_SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    getKeeper(overrides?: CallOverrides): Promise<[string]>;

    getManagementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPerformanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeesRecipient(
      newFeesRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FEE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  FEE_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeKeeper(
    newKeeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getKeeper(overrides?: CallOverrides): Promise<string>;

  getManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

  getPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  setFeesRecipient(
    newFeesRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManagementFee(
    newManagementFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    newPerformanceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    changeKeeper(newKeeper: string, overrides?: CallOverrides): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    getKeeper(overrides?: CallOverrides): Promise<string>;

    getManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    setFeesRecipient(
      newFeesRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      prevAdmin?: string | null,
      newAdmin?: string | null
    ): AdminChangedEventFilter;
    AdminChanged(
      prevAdmin?: string | null,
      newAdmin?: string | null
    ): AdminChangedEventFilter;

    "FeesETHSent(address,uint256,uint256)"(
      receipient?: string | null,
      managementAmount?: null,
      performanceAmount?: null
    ): FeesETHSentEventFilter;
    FeesETHSent(
      receipient?: string | null,
      managementAmount?: null,
      performanceAmount?: null
    ): FeesETHSentEventFilter;

    "FeesReceipientChanged(address,address)"(
      oldFeeReceipient?: string | null,
      newFeeReceipient?: string | null
    ): FeesReceipientChangedEventFilter;
    FeesReceipientChanged(
      oldFeeReceipient?: string | null,
      newFeeReceipient?: string | null
    ): FeesReceipientChangedEventFilter;

    "FeesSent(address,address,uint256,uint256)"(
      receipient?: string | null,
      token?: string | null,
      managementAmount?: null,
      performanceAmount?: null
    ): FeesSentEventFilter;
    FeesSent(
      receipient?: string | null,
      token?: string | null,
      managementAmount?: null,
      performanceAmount?: null
    ): FeesSentEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "KeeperChanged(address,address)"(
      prevKeeper?: string | null,
      newKeeper?: string | null
    ): KeeperChangedEventFilter;
    KeeperChanged(
      prevKeeper?: string | null,
      newKeeper?: string | null
    ): KeeperChangedEventFilter;

    "ManagementFeeChanged(uint256,uint256)"(
      oldManagementFee?: null,
      newManagementFee?: null
    ): ManagementFeeChangedEventFilter;
    ManagementFeeChanged(
      oldManagementFee?: null,
      newManagementFee?: null
    ): ManagementFeeChangedEventFilter;

    "PerformanceFeeChanged(uint256,uint256)"(
      oldPerformanceFee?: null,
      newPerformanceFee?: null
    ): PerformanceFeeChangedEventFilter;
    PerformanceFeeChanged(
      oldPerformanceFee?: null,
      newPerformanceFee?: null
    ): PerformanceFeeChangedEventFilter;
  };

  estimateGas: {
    FEE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    getManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    setFeesRecipient(
      newFeesRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getManagementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPerformanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeesRecipient(
      newFeesRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManagementFee(
      newManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      newPerformanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
