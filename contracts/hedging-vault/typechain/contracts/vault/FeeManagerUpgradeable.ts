/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";

export interface FeeManagerUpgradeableInterface extends utils.Interface {
    functions: {
        "ADMIN_ROLE()": FunctionFragment;
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "INVESTOR_ROLE()": FunctionFragment;
        "OPERATOR_ROLE()": FunctionFragment;
        "STRATEGIST_ROLE()": FunctionFragment;
        "VAULT_ROLE()": FunctionFragment;
        "getFeesRecipient()": FunctionFragment;
        "getManagementFee()": FunctionFragment;
        "getPerformanceFee()": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getRoleMember(bytes32,uint256)": FunctionFragment;
        "getRoleMemberCount(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setFeesRecipient(address)": FunctionFragment;
        "setManagementFee(uint256)": FunctionFragment;
        "setPerformanceFee(uint256)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "ADMIN_ROLE"
            | "DEFAULT_ADMIN_ROLE"
            | "INVESTOR_ROLE"
            | "OPERATOR_ROLE"
            | "STRATEGIST_ROLE"
            | "VAULT_ROLE"
            | "getFeesRecipient"
            | "getManagementFee"
            | "getPerformanceFee"
            | "getRoleAdmin"
            | "getRoleMember"
            | "getRoleMemberCount"
            | "grantRole"
            | "hasRole"
            | "renounceRole"
            | "revokeRole"
            | "setFeesRecipient"
            | "setManagementFee"
            | "setPerformanceFee"
            | "supportsInterface",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "INVESTOR_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "OPERATOR_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "STRATEGIST_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "VAULT_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFeesRecipient", values?: undefined): string;
    encodeFunctionData(functionFragment: "getManagementFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "getPerformanceFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getRoleMember", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleMemberCount", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "setFeesRecipient", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setManagementFee", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPerformanceFee", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;

    decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "INVESTOR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OPERATOR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "STRATEGIST_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VAULT_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeesRecipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getManagementFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPerformanceFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMemberCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeesRecipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setManagementFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPerformanceFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;

    events: {
        "FeesETHSent(address,uint256,uint256)": EventFragment;
        "FeesReceipientChanged(address,address)": EventFragment;
        "FeesSent(address,address,uint256,uint256)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "ManagementFeeChanged(uint256,uint256)": EventFragment;
        "PerformanceFeeChanged(uint256,uint256)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "FeesETHSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FeesReceipientChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FeesSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ManagementFeeChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PerformanceFeeChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface FeesETHSentEventObject {
    receipient: string;
    managementAmount: BigNumber;
    performanceAmount: BigNumber;
}
export type FeesETHSentEvent = TypedEvent<[string, BigNumber, BigNumber], FeesETHSentEventObject>;

export type FeesETHSentEventFilter = TypedEventFilter<FeesETHSentEvent>;

export interface FeesReceipientChangedEventObject {
    oldFeeReceipient: string;
    newFeeReceipient: string;
}
export type FeesReceipientChangedEvent = TypedEvent<[string, string], FeesReceipientChangedEventObject>;

export type FeesReceipientChangedEventFilter = TypedEventFilter<FeesReceipientChangedEvent>;

export interface FeesSentEventObject {
    receipient: string;
    token: string;
    managementAmount: BigNumber;
    performanceAmount: BigNumber;
}
export type FeesSentEvent = TypedEvent<[string, string, BigNumber, BigNumber], FeesSentEventObject>;

export type FeesSentEventFilter = TypedEventFilter<FeesSentEvent>;

export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ManagementFeeChangedEventObject {
    oldManagementFee: BigNumber;
    newManagementFee: BigNumber;
}
export type ManagementFeeChangedEvent = TypedEvent<[BigNumber, BigNumber], ManagementFeeChangedEventObject>;

export type ManagementFeeChangedEventFilter = TypedEventFilter<ManagementFeeChangedEvent>;

export interface PerformanceFeeChangedEventObject {
    oldPerformanceFee: BigNumber;
    newPerformanceFee: BigNumber;
}
export type PerformanceFeeChangedEvent = TypedEvent<[BigNumber, BigNumber], PerformanceFeeChangedEventObject>;

export type PerformanceFeeChangedEventFilter = TypedEventFilter<PerformanceFeeChangedEvent>;

export interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface FeeManagerUpgradeable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: FeeManagerUpgradeableInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        INVESTOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

        STRATEGIST_ROLE(overrides?: CallOverrides): Promise<[string]>;

        VAULT_ROLE(overrides?: CallOverrides): Promise<[string]>;

        getFeesRecipient(overrides?: CallOverrides): Promise<[string]>;

        getManagementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

        getPerformanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

        getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

        getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setFeesRecipient(
            newFeesRecipient: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        setManagementFee(
            newManagementFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        setPerformanceFee(
            newPerformanceFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
    };

    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    INVESTOR_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    STRATEGIST_ROLE(overrides?: CallOverrides): Promise<string>;

    VAULT_ROLE(overrides?: CallOverrides): Promise<string>;

    getFeesRecipient(overrides?: CallOverrides): Promise<string>;

    getManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeesRecipient(
        newFeesRecipient: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setManagementFee(
        newManagementFee: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPerformanceFee(
        newPerformanceFee: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    callStatic: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        INVESTOR_ROLE(overrides?: CallOverrides): Promise<string>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

        STRATEGIST_ROLE(overrides?: CallOverrides): Promise<string>;

        VAULT_ROLE(overrides?: CallOverrides): Promise<string>;

        getFeesRecipient(overrides?: CallOverrides): Promise<string>;

        getManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

        getPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

        getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

        getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

        renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        setFeesRecipient(newFeesRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        setManagementFee(newManagementFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        setPerformanceFee(newPerformanceFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    };

    filters: {
        "FeesETHSent(address,uint256,uint256)"(
            receipient?: PromiseOrValue<string> | null,
            managementAmount?: null,
            performanceAmount?: null,
        ): FeesETHSentEventFilter;
        FeesETHSent(
            receipient?: PromiseOrValue<string> | null,
            managementAmount?: null,
            performanceAmount?: null,
        ): FeesETHSentEventFilter;

        "FeesReceipientChanged(address,address)"(
            oldFeeReceipient?: PromiseOrValue<string> | null,
            newFeeReceipient?: PromiseOrValue<string> | null,
        ): FeesReceipientChangedEventFilter;
        FeesReceipientChanged(
            oldFeeReceipient?: PromiseOrValue<string> | null,
            newFeeReceipient?: PromiseOrValue<string> | null,
        ): FeesReceipientChangedEventFilter;

        "FeesSent(address,address,uint256,uint256)"(
            receipient?: PromiseOrValue<string> | null,
            token?: PromiseOrValue<string> | null,
            managementAmount?: null,
            performanceAmount?: null,
        ): FeesSentEventFilter;
        FeesSent(
            receipient?: PromiseOrValue<string> | null,
            token?: PromiseOrValue<string> | null,
            managementAmount?: null,
            performanceAmount?: null,
        ): FeesSentEventFilter;

        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;

        "ManagementFeeChanged(uint256,uint256)"(
            oldManagementFee?: null,
            newManagementFee?: null,
        ): ManagementFeeChangedEventFilter;
        ManagementFeeChanged(oldManagementFee?: null, newManagementFee?: null): ManagementFeeChangedEventFilter;

        "PerformanceFeeChanged(uint256,uint256)"(
            oldPerformanceFee?: null,
            newPerformanceFee?: null,
        ): PerformanceFeeChangedEventFilter;
        PerformanceFeeChanged(oldPerformanceFee?: null, newPerformanceFee?: null): PerformanceFeeChangedEventFilter;

        "RoleAdminChanged(bytes32,bytes32,bytes32)"(
            role?: BytesLike | null,
            previousAdminRole?: BytesLike | null,
            newAdminRole?: BytesLike | null,
        ): RoleAdminChangedEventFilter;
        RoleAdminChanged(
            role?: BytesLike | null,
            previousAdminRole?: BytesLike | null,
            newAdminRole?: BytesLike | null,
        ): RoleAdminChangedEventFilter;

        "RoleGranted(bytes32,address,address)"(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null,
        ): RoleGrantedEventFilter;
        RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

        "RoleRevoked(bytes32,address,address)"(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null,
        ): RoleRevokedEventFilter;
        RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;
    };

    estimateGas: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        INVESTOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        STRATEGIST_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        VAULT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        getFeesRecipient(overrides?: CallOverrides): Promise<BigNumber>;

        getManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

        getPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setFeesRecipient(
            newFeesRecipient: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        setManagementFee(
            newManagementFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        setPerformanceFee(
            newPerformanceFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        INVESTOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        STRATEGIST_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        VAULT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getFeesRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getManagementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getPerformanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setFeesRecipient(
            newFeesRecipient: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        setManagementFee(
            newManagementFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        setPerformanceFee(
            newPerformanceFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
