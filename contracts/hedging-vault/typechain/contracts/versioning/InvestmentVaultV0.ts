/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface InvestmentVaultV0Interface extends utils.Interface {
  functions: {
    "MIN_CYCLE_DURATION()": FunctionFragment;
    "cycleDurationSeconds()": FunctionFragment;
    "principalPercentages(uint256)": FunctionFragment;
    "setCycleDuration(uint256)": FunctionFragment;
    "setPrincipalPercentages(uint256[])": FunctionFragment;
    "totalPrincipalPercentages()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_CYCLE_DURATION"
      | "cycleDurationSeconds"
      | "principalPercentages"
      | "setCycleDuration"
      | "setPrincipalPercentages"
      | "totalPrincipalPercentages"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_CYCLE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "principalPercentages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCycleDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrincipalPercentages",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPrincipalPercentages",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_CYCLE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "principalPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCycleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrincipalPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPrincipalPercentages",
    data: BytesLike
  ): Result;

  events: {};
}

export interface InvestmentVaultV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InvestmentVaultV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_CYCLE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    principalPercentages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setCycleDuration(
      cycleDurationSeconds_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrincipalPercentages(
      principalPercentages_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalPrincipalPercentages(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MIN_CYCLE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  cycleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  principalPercentages(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setCycleDuration(
    cycleDurationSeconds_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrincipalPercentages(
    principalPercentages_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalPrincipalPercentages(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MIN_CYCLE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    cycleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    principalPercentages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCycleDuration(
      cycleDurationSeconds_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrincipalPercentages(
      principalPercentages_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    totalPrincipalPercentages(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    MIN_CYCLE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    cycleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    principalPercentages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCycleDuration(
      cycleDurationSeconds_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrincipalPercentages(
      principalPercentages_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalPrincipalPercentages(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_CYCLE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycleDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    principalPercentages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCycleDuration(
      cycleDurationSeconds_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrincipalPercentages(
      principalPercentages_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalPrincipalPercentages(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
