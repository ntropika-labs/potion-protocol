/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SwapToUSDCActionV0Interface extends utils.Interface {
  functions: {
    "USDC()": FunctionFragment;
    "maxSwapDurationSecs()": FunctionFragment;
    "setMaxSwapDuration(uint256)": FunctionFragment;
    "setSwapPercentage(uint256)": FunctionFragment;
    "setSwapSlippage(uint256)": FunctionFragment;
    "swapPercentage()": FunctionFragment;
    "swapSlippage()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "USDC"
      | "maxSwapDurationSecs"
      | "setMaxSwapDuration"
      | "setSwapPercentage"
      | "setSwapSlippage"
      | "swapPercentage"
      | "swapSlippage"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxSwapDurationSecs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSwapDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapSlippage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapSlippage",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSwapDurationSecs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSwapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSlippage",
    data: BytesLike
  ): Result;

  events: {
    "MaxSwapDurationChanged(uint256)": EventFragment;
    "SwapPercentageChanged(uint256)": EventFragment;
    "SwapSlippageChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MaxSwapDurationChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPercentageChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapSlippageChanged"): EventFragment;
}

export interface MaxSwapDurationChangedEventObject {
  maxSwapDurationSecs: BigNumber;
}
export type MaxSwapDurationChangedEvent = TypedEvent<
  [BigNumber],
  MaxSwapDurationChangedEventObject
>;

export type MaxSwapDurationChangedEventFilter =
  TypedEventFilter<MaxSwapDurationChangedEvent>;

export interface SwapPercentageChangedEventObject {
  swapPercentage: BigNumber;
}
export type SwapPercentageChangedEvent = TypedEvent<
  [BigNumber],
  SwapPercentageChangedEventObject
>;

export type SwapPercentageChangedEventFilter =
  TypedEventFilter<SwapPercentageChangedEvent>;

export interface SwapSlippageChangedEventObject {
  swapSlippage: BigNumber;
}
export type SwapSlippageChangedEvent = TypedEvent<
  [BigNumber],
  SwapSlippageChangedEventObject
>;

export type SwapSlippageChangedEventFilter =
  TypedEventFilter<SwapSlippageChangedEvent>;

export interface SwapToUSDCActionV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapToUSDCActionV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    USDC(overrides?: CallOverrides): Promise<[string]>;

    maxSwapDurationSecs(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMaxSwapDuration(
      durationSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapPercentage(
      swapPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapSlippage(
      swapSlippage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  USDC(overrides?: CallOverrides): Promise<string>;

  maxSwapDurationSecs(overrides?: CallOverrides): Promise<BigNumber>;

  setMaxSwapDuration(
    durationSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapPercentage(
    swapPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapSlippage(
    swapSlippage_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  swapSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    USDC(overrides?: CallOverrides): Promise<string>;

    maxSwapDurationSecs(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxSwapDuration(
      durationSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapPercentage(
      swapPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapSlippage(
      swapSlippage_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    swapSlippage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "MaxSwapDurationChanged(uint256)"(
      maxSwapDurationSecs?: null
    ): MaxSwapDurationChangedEventFilter;
    MaxSwapDurationChanged(
      maxSwapDurationSecs?: null
    ): MaxSwapDurationChangedEventFilter;

    "SwapPercentageChanged(uint256)"(
      swapPercentage?: null
    ): SwapPercentageChangedEventFilter;
    SwapPercentageChanged(
      swapPercentage?: null
    ): SwapPercentageChangedEventFilter;

    "SwapSlippageChanged(uint256)"(
      swapSlippage?: null
    ): SwapSlippageChangedEventFilter;
    SwapSlippageChanged(swapSlippage?: null): SwapSlippageChangedEventFilter;
  };

  estimateGas: {
    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    maxSwapDurationSecs(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxSwapDuration(
      durationSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapPercentage(
      swapPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapSlippage(
      swapSlippage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    swapSlippage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSwapDurationSecs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxSwapDuration(
      durationSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapPercentage(
      swapPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapSlippage(
      swapSlippage_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
