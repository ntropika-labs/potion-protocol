/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace ICurveManager {
  export type CurveStruct = {
    a_59x18: BigNumberish;
    b_59x18: BigNumberish;
    c_59x18: BigNumberish;
    d_59x18: BigNumberish;
    max_util_59x18: BigNumberish;
  };

  export type CurveStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    a_59x18: BigNumber;
    b_59x18: BigNumber;
    c_59x18: BigNumber;
    d_59x18: BigNumber;
    max_util_59x18: BigNumber;
  };
}

export declare namespace ICriteriaManager {
  export type CriteriaStruct = {
    underlyingAsset: string;
    strikeAsset: string;
    isPut: boolean;
    maxStrikePercent: BigNumberish;
    maxDurationInDays: BigNumberish;
  };

  export type CriteriaStructOutput = [
    string,
    string,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    underlyingAsset: string;
    strikeAsset: string;
    isPut: boolean;
    maxStrikePercent: BigNumber;
    maxDurationInDays: BigNumber;
  };
}

export declare namespace IPotionLiquidityPool {
  export type CounterpartyDetailsStruct = {
    lp: string;
    poolId: BigNumberish;
    curve: ICurveManager.CurveStruct;
    criteria: ICriteriaManager.CriteriaStruct;
    orderSizeInOtokens: BigNumberish;
  };

  export type CounterpartyDetailsStructOutput = [
    string,
    BigNumber,
    ICurveManager.CurveStructOutput,
    ICriteriaManager.CriteriaStructOutput,
    BigNumber
  ] & {
    lp: string;
    poolId: BigNumber;
    curve: ICurveManager.CurveStructOutput;
    criteria: ICriteriaManager.CriteriaStructOutput;
    orderSizeInOtokens: BigNumber;
  };
}

export declare namespace PotionProtocolOracleUpgradeable {
  export type PotionBuyInfoStruct = {
    potion: string;
    sellers: IPotionLiquidityPool.CounterpartyDetailsStruct[];
    expectedPremium: BigNumberish;
    totalSizeInPotions: BigNumberish;
  };

  export type PotionBuyInfoStructOutput = [
    string,
    IPotionLiquidityPool.CounterpartyDetailsStructOutput[],
    BigNumber,
    BigNumber
  ] & {
    potion: string;
    sellers: IPotionLiquidityPool.CounterpartyDetailsStructOutput[];
    expectedPremium: BigNumber;
    totalSizeInPotions: BigNumber;
  };
}

export interface PotionBuyActionInterface extends utils.Interface {
  functions: {
    "canPositionBeExited()": FunctionFragment;
    "canRefund(address)": FunctionFragment;
    "canRefundETH()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "changeKeeper(address)": FunctionFragment;
    "enterPosition(address,uint256)": FunctionFragment;
    "exitPosition(address)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getKeeper()": FunctionFragment;
    "getLifecycleState()": FunctionFragment;
    "getPotion(address)": FunctionFragment;
    "getPotionBuyInfo(address)": FunctionFragment;
    "getUSDC()": FunctionFragment;
    "getUSDCBalance(address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "maxPremiumPercentage()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "premiumSlippage()": FunctionFragment;
    "refund(address,uint256,address)": FunctionFragment;
    "refundETH(uint256,address)": FunctionFragment;
    "setMaxPremiumPercentage(uint256)": FunctionFragment;
    "setPotionBuyInfo((address,(address,uint256,(int256,int256,int256,int256,int256),(address,address,bool,uint256,uint256),uint256)[],uint256,uint256))": FunctionFragment;
    "setPremiumSlippage(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canPositionBeExited"
      | "canRefund"
      | "canRefundETH"
      | "changeAdmin"
      | "changeKeeper"
      | "enterPosition"
      | "exitPosition"
      | "getAdmin"
      | "getKeeper"
      | "getLifecycleState"
      | "getPotion"
      | "getPotionBuyInfo"
      | "getUSDC"
      | "getUSDCBalance"
      | "initialize"
      | "maxPremiumPercentage"
      | "pause"
      | "paused"
      | "premiumSlippage"
      | "refund"
      | "refundETH"
      | "setMaxPremiumPercentage"
      | "setPotionBuyInfo"
      | "setPremiumSlippage"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canPositionBeExited",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "canRefund", values: [string]): string;
  encodeFunctionData(
    functionFragment: "canRefundETH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterPosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPosition",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "getKeeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLifecycleState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPotion", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPotionBuyInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getUSDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUSDCBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPremiumPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "premiumSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refundETH",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPremiumPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPotionBuyInfo",
    values: [PotionProtocolOracleUpgradeable.PotionBuyInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "canPositionBeExited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canRefund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canRefundETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLifecycleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPotion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPotionBuyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUSDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUSDCBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxPremiumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "premiumSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPremiumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPotionBuyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "KeeperChanged(address,address)": EventFragment;
    "LifecycleStateChanged(uint8,uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LifecycleStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AdminChangedEventObject {
  prevAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KeeperChangedEventObject {
  prevKeeper: string;
  newKeeper: string;
}
export type KeeperChangedEvent = TypedEvent<
  [string, string],
  KeeperChangedEventObject
>;

export type KeeperChangedEventFilter = TypedEventFilter<KeeperChangedEvent>;

export interface LifecycleStateChangedEventObject {
  prevState: number;
  newState: number;
}
export type LifecycleStateChangedEvent = TypedEvent<
  [number, number],
  LifecycleStateChangedEventObject
>;

export type LifecycleStateChangedEventFilter =
  TypedEventFilter<LifecycleStateChangedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface PotionBuyAction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PotionBuyActionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canPositionBeExited(overrides?: CallOverrides): Promise<[boolean]>;

    canRefund(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    canRefundETH(overrides?: CallOverrides): Promise<[boolean]>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterPosition(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    exitPosition(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    getKeeper(overrides?: CallOverrides): Promise<[string]>;

    getLifecycleState(overrides?: CallOverrides): Promise<[number]>;

    getPotion(
      hedgedAsset: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPotionBuyInfo(
      potion: string,
      overrides?: CallOverrides
    ): Promise<[PotionProtocolOracleUpgradeable.PotionBuyInfoStructOutput]>;

    getUSDC(overrides?: CallOverrides): Promise<[string]>;

    getUSDCBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      adminRole: string,
      keeperRole: string,
      loanedAsset: string,
      USDC: string,
      potionLiquidityPoolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxPremiumPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    premiumSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    refund(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refundETH(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPremiumPercentage(
      maxPremiumPercentage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPotionBuyInfo(
      info: PotionProtocolOracleUpgradeable.PotionBuyInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumSlippage(
      premiumSlippage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  canPositionBeExited(overrides?: CallOverrides): Promise<boolean>;

  canRefund(token: string, overrides?: CallOverrides): Promise<boolean>;

  canRefundETH(overrides?: CallOverrides): Promise<boolean>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeKeeper(
    newKeeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterPosition(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  exitPosition(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getKeeper(overrides?: CallOverrides): Promise<string>;

  getLifecycleState(overrides?: CallOverrides): Promise<number>;

  getPotion(hedgedAsset: string, overrides?: CallOverrides): Promise<string>;

  getPotionBuyInfo(
    potion: string,
    overrides?: CallOverrides
  ): Promise<PotionProtocolOracleUpgradeable.PotionBuyInfoStructOutput>;

  getUSDC(overrides?: CallOverrides): Promise<string>;

  getUSDCBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    adminRole: string,
    keeperRole: string,
    loanedAsset: string,
    USDC: string,
    potionLiquidityPoolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxPremiumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  premiumSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  refund(
    token: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refundETH(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPremiumPercentage(
    maxPremiumPercentage_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPotionBuyInfo(
    info: PotionProtocolOracleUpgradeable.PotionBuyInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumSlippage(
    premiumSlippage_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canPositionBeExited(overrides?: CallOverrides): Promise<boolean>;

    canRefund(token: string, overrides?: CallOverrides): Promise<boolean>;

    canRefundETH(overrides?: CallOverrides): Promise<boolean>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    changeKeeper(newKeeper: string, overrides?: CallOverrides): Promise<void>;

    enterPosition(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPosition(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    getKeeper(overrides?: CallOverrides): Promise<string>;

    getLifecycleState(overrides?: CallOverrides): Promise<number>;

    getPotion(hedgedAsset: string, overrides?: CallOverrides): Promise<string>;

    getPotionBuyInfo(
      potion: string,
      overrides?: CallOverrides
    ): Promise<PotionProtocolOracleUpgradeable.PotionBuyInfoStructOutput>;

    getUSDC(overrides?: CallOverrides): Promise<string>;

    getUSDCBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      adminRole: string,
      keeperRole: string,
      loanedAsset: string,
      USDC: string,
      potionLiquidityPoolManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxPremiumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    premiumSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    refundETH(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPremiumPercentage(
      maxPremiumPercentage_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPotionBuyInfo(
      info: PotionProtocolOracleUpgradeable.PotionBuyInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumSlippage(
      premiumSlippage_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      prevAdmin?: string | null,
      newAdmin?: string | null
    ): AdminChangedEventFilter;
    AdminChanged(
      prevAdmin?: string | null,
      newAdmin?: string | null
    ): AdminChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "KeeperChanged(address,address)"(
      prevKeeper?: string | null,
      newKeeper?: string | null
    ): KeeperChangedEventFilter;
    KeeperChanged(
      prevKeeper?: string | null,
      newKeeper?: string | null
    ): KeeperChangedEventFilter;

    "LifecycleStateChanged(uint8,uint8)"(
      prevState?: BigNumberish | null,
      newState?: BigNumberish | null
    ): LifecycleStateChangedEventFilter;
    LifecycleStateChanged(
      prevState?: BigNumberish | null,
      newState?: BigNumberish | null
    ): LifecycleStateChangedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    canPositionBeExited(overrides?: CallOverrides): Promise<BigNumber>;

    canRefund(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    canRefundETH(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterPosition(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitPosition(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    getLifecycleState(overrides?: CallOverrides): Promise<BigNumber>;

    getPotion(
      hedgedAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPotionBuyInfo(
      potion: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDCBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      adminRole: string,
      keeperRole: string,
      loanedAsset: string,
      USDC: string,
      potionLiquidityPoolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxPremiumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    premiumSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refundETH(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPremiumPercentage(
      maxPremiumPercentage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPotionBuyInfo(
      info: PotionProtocolOracleUpgradeable.PotionBuyInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumSlippage(
      premiumSlippage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canPositionBeExited(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRefund(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRefundETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterPosition(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitPosition(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLifecycleState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPotion(
      hedgedAsset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPotionBuyInfo(
      potion: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUSDCBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      adminRole: string,
      keeperRole: string,
      loanedAsset: string,
      USDC: string,
      potionLiquidityPoolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxPremiumPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premiumSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refundETH(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPremiumPercentage(
      maxPremiumPercentage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPotionBuyInfo(
      info: PotionProtocolOracleUpgradeable.PotionBuyInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumSlippage(
      premiumSlippage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
