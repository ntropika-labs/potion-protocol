/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace UniswapV3SwapLib {
  export type SwapInputParametersStruct = {
    inputToken: PromiseOrValue<string>;
    exactAmountIn: PromiseOrValue<BigNumberish>;
    expectedAmountOut: PromiseOrValue<BigNumberish>;
    slippage: PromiseOrValue<BigNumberish>;
    maxDuration: PromiseOrValue<BigNumberish>;
    swapPath: PromiseOrValue<BytesLike>;
  };

  export type SwapInputParametersStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    inputToken: string;
    exactAmountIn: BigNumber;
    expectedAmountOut: BigNumber;
    slippage: BigNumber;
    maxDuration: BigNumber;
    swapPath: string;
  };

  export type SwapOutputParametersStruct = {
    inputToken: PromiseOrValue<string>;
    exactAmountOut: PromiseOrValue<BigNumberish>;
    expectedAmountIn: PromiseOrValue<BigNumberish>;
    slippage: PromiseOrValue<BigNumberish>;
    maxDuration: PromiseOrValue<BigNumberish>;
    swapPath: PromiseOrValue<BytesLike>;
  };

  export type SwapOutputParametersStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    inputToken: string;
    exactAmountOut: BigNumber;
    expectedAmountIn: BigNumber;
    slippage: BigNumber;
    maxDuration: BigNumber;
    swapPath: string;
  };
}

export interface TestWrapperUniswapV3SwapLibInterface extends utils.Interface {
  functions: {
    "swapInput(address,(address,uint256,uint256,uint256,uint256,bytes))": FunctionFragment;
    "swapOutput(address,(address,uint256,uint256,uint256,uint256,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "swapInput" | "swapOutput"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swapInput",
    values: [PromiseOrValue<string>, UniswapV3SwapLib.SwapInputParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOutput",
    values: [
      PromiseOrValue<string>,
      UniswapV3SwapLib.SwapOutputParametersStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "swapInput", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapOutput", data: BytesLike): Result;

  events: {};
}

export interface TestWrapperUniswapV3SwapLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestWrapperUniswapV3SwapLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swapInput(
      swapRouter: PromiseOrValue<string>,
      parameters: UniswapV3SwapLib.SwapInputParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapOutput(
      swapRouter: PromiseOrValue<string>,
      parameters: UniswapV3SwapLib.SwapOutputParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  swapInput(
    swapRouter: PromiseOrValue<string>,
    parameters: UniswapV3SwapLib.SwapInputParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapOutput(
    swapRouter: PromiseOrValue<string>,
    parameters: UniswapV3SwapLib.SwapOutputParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    swapInput(
      swapRouter: PromiseOrValue<string>,
      parameters: UniswapV3SwapLib.SwapInputParametersStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOutput(
      swapRouter: PromiseOrValue<string>,
      parameters: UniswapV3SwapLib.SwapOutputParametersStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    swapInput(
      swapRouter: PromiseOrValue<string>,
      parameters: UniswapV3SwapLib.SwapInputParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapOutput(
      swapRouter: PromiseOrValue<string>,
      parameters: UniswapV3SwapLib.SwapOutputParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swapInput(
      swapRouter: PromiseOrValue<string>,
      parameters: UniswapV3SwapLib.SwapInputParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapOutput(
      swapRouter: PromiseOrValue<string>,
      parameters: UniswapV3SwapLib.SwapOutputParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
