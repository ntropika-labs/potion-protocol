/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface TestWrapperPercentageUtilsInterface extends utils.Interface {
  functions: {
    "PERCENTAGE_100()": FunctionFragment;
    "PERCENTAGE_DECIMALS()": FunctionFragment;
    "PERCENTAGE_FACTOR()": FunctionFragment;
    "addPercentage(uint256,uint256)": FunctionFragment;
    "applyPercentage(uint256,uint256)": FunctionFragment;
    "isPercentageInRange(uint256)": FunctionFragment;
    "substractPercentage(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PERCENTAGE_100"
      | "PERCENTAGE_DECIMALS"
      | "PERCENTAGE_FACTOR"
      | "addPercentage"
      | "applyPercentage"
      | "isPercentageInRange"
      | "substractPercentage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PERCENTAGE_100",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPercentage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyPercentage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPercentageInRange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "substractPercentage",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PERCENTAGE_100",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPercentageInRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "substractPercentage",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestWrapperPercentageUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestWrapperPercentageUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PERCENTAGE_100(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENTAGE_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isPercentageInRange(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    substractPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  PERCENTAGE_100(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENTAGE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  addPercentage(
    amount: BigNumberish,
    percentage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyPercentage(
    amount: BigNumberish,
    percentage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isPercentageInRange(
    percentage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  substractPercentage(
    amount: BigNumberish,
    percentage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PERCENTAGE_100(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    addPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPercentageInRange(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    substractPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    PERCENTAGE_100(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    addPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPercentageInRange(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    substractPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERCENTAGE_100(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTAGE_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPercentageInRange(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    substractPercentage(
      amount: BigNumberish,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
