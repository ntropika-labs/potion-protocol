/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface MockOpynAddressBookInterface extends utils.Interface {
  functions: {
    "getController()": FunctionFragment;
    "getOracle()": FunctionFragment;
    "getOtokenFactory()": FunctionFragment;
    "opynController()": FunctionFragment;
    "opynFactory()": FunctionFragment;
    "opynOracle()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getController"
      | "getOracle"
      | "getOtokenFactory"
      | "opynController"
      | "opynFactory"
      | "opynOracle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOtokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "opynController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "opynFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "opynOracle",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOtokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opynController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opynFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "opynOracle", data: BytesLike): Result;

  events: {};
}

export interface MockOpynAddressBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockOpynAddressBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getController(overrides?: CallOverrides): Promise<[string]>;

    getOracle(overrides?: CallOverrides): Promise<[string]>;

    getOtokenFactory(overrides?: CallOverrides): Promise<[string]>;

    opynController(overrides?: CallOverrides): Promise<[string]>;

    opynFactory(overrides?: CallOverrides): Promise<[string]>;

    opynOracle(overrides?: CallOverrides): Promise<[string]>;
  };

  getController(overrides?: CallOverrides): Promise<string>;

  getOracle(overrides?: CallOverrides): Promise<string>;

  getOtokenFactory(overrides?: CallOverrides): Promise<string>;

  opynController(overrides?: CallOverrides): Promise<string>;

  opynFactory(overrides?: CallOverrides): Promise<string>;

  opynOracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getController(overrides?: CallOverrides): Promise<string>;

    getOracle(overrides?: CallOverrides): Promise<string>;

    getOtokenFactory(overrides?: CallOverrides): Promise<string>;

    opynController(overrides?: CallOverrides): Promise<string>;

    opynFactory(overrides?: CallOverrides): Promise<string>;

    opynOracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getController(overrides?: CallOverrides): Promise<BigNumber>;

    getOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getOtokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    opynController(overrides?: CallOverrides): Promise<BigNumber>;

    opynFactory(overrides?: CallOverrides): Promise<BigNumber>;

    opynOracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOtokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    opynController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    opynFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    opynOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
