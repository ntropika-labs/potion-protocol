/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ICriteriaManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICriteriaManager__factory>;
    getContractFactory(
      name: "ICurveManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurveManager__factory>;
    getContractFactory(
      name: "AddressBookInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressBookInterface__factory>;
    getContractFactory(
      name: "ControllerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerInterface__factory>;
    getContractFactory(
      name: "OracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterface__factory>;
    getContractFactory(
      name: "OtokenFactoryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OtokenFactoryInterface__factory>;
    getContractFactory(
      name: "OtokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OtokenInterface__factory>;
    getContractFactory(
      name: "WhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistInterface__factory>;
    getContractFactory(
      name: "PotionLiquidityPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotionLiquidityPool__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "BaseActionUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseActionUpgradeable__factory>;
    getContractFactory(
      name: "PotionProtocolHelperUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotionProtocolHelperUpgradeable__factory>;
    getContractFactory(
      name: "PotionProtocolOracleUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotionProtocolOracleUpgradeable__factory>;
    getContractFactory(
      name: "UniswapV3HelperUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3HelperUpgradeable__factory>;
    getContractFactory(
      name: "UniswapV3OracleUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3OracleUpgradeable__factory>;
    getContractFactory(
      name: "PotionBuyAction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotionBuyAction__factory>;
    getContractFactory(
      name: "EmergencyLockUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmergencyLockUpgradeable__factory>;
    getContractFactory(
      name: "LifecycleStatesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LifecycleStatesUpgradeable__factory>;
    getContractFactory(
      name: "RefundsHelperUpgreadable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RefundsHelperUpgreadable__factory>;
    getContractFactory(
      name: "RolesManagerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RolesManagerUpgradeable__factory>;
    getContractFactory(
      name: "ERC4626CapUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC4626CapUpgradeable__factory>;
    getContractFactory(
      name: "IAction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAction__factory>;
    getContractFactory(
      name: "IOtoken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOtoken__factory>;
    getContractFactory(
      name: "IPotionLiquidityPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPotionLiquidityPool__factory>;
    getContractFactory(
      name: "PercentageUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PercentageUtils__factory>;
    getContractFactory(
      name: "SlippageUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlippageUtils__factory>;
    getContractFactory(
      name: "ERC4626Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC4626Upgradeable__factory>;
    getContractFactory(
      name: "IERC4626Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626Upgradeable__factory>;
    getContractFactory(
      name: "ActionsManagerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ActionsManagerUpgradeable__factory>;
    getContractFactory(
      name: "BaseVaultUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseVaultUpgradeable__factory>;
    getContractFactory(
      name: "FeeManagerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeManagerUpgradeable__factory>;
    getContractFactory(
      name: "HedgingVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HedgingVault__factory>;
    getContractFactory(
      name: "HedgingVaultV0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HedgingVaultV0__factory>;
    getContractFactory(
      name: "PotionBuyActionV0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotionBuyActionV0__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ICriteriaManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICriteriaManager>;
    getContractAt(
      name: "ICurveManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurveManager>;
    getContractAt(
      name: "AddressBookInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressBookInterface>;
    getContractAt(
      name: "ControllerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ControllerInterface>;
    getContractAt(
      name: "OracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleInterface>;
    getContractAt(
      name: "OtokenFactoryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OtokenFactoryInterface>;
    getContractAt(
      name: "OtokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OtokenInterface>;
    getContractAt(
      name: "WhitelistInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistInterface>;
    getContractAt(
      name: "PotionLiquidityPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotionLiquidityPool>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "BaseActionUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseActionUpgradeable>;
    getContractAt(
      name: "PotionProtocolHelperUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotionProtocolHelperUpgradeable>;
    getContractAt(
      name: "PotionProtocolOracleUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotionProtocolOracleUpgradeable>;
    getContractAt(
      name: "UniswapV3HelperUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3HelperUpgradeable>;
    getContractAt(
      name: "UniswapV3OracleUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3OracleUpgradeable>;
    getContractAt(
      name: "PotionBuyAction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotionBuyAction>;
    getContractAt(
      name: "EmergencyLockUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmergencyLockUpgradeable>;
    getContractAt(
      name: "LifecycleStatesUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LifecycleStatesUpgradeable>;
    getContractAt(
      name: "RefundsHelperUpgreadable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RefundsHelperUpgreadable>;
    getContractAt(
      name: "RolesManagerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RolesManagerUpgradeable>;
    getContractAt(
      name: "ERC4626CapUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC4626CapUpgradeable>;
    getContractAt(
      name: "IAction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAction>;
    getContractAt(
      name: "IOtoken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOtoken>;
    getContractAt(
      name: "IPotionLiquidityPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPotionLiquidityPool>;
    getContractAt(
      name: "PercentageUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PercentageUtils>;
    getContractAt(
      name: "SlippageUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlippageUtils>;
    getContractAt(
      name: "ERC4626Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC4626Upgradeable>;
    getContractAt(
      name: "IERC4626Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626Upgradeable>;
    getContractAt(
      name: "ActionsManagerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ActionsManagerUpgradeable>;
    getContractAt(
      name: "BaseVaultUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseVaultUpgradeable>;
    getContractAt(
      name: "FeeManagerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeManagerUpgradeable>;
    getContractAt(
      name: "HedgingVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HedgingVault>;
    getContractAt(
      name: "HedgingVaultV0",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HedgingVaultV0>;
    getContractAt(
      name: "PotionBuyActionV0",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotionBuyActionV0>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
