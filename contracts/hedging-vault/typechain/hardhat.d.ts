/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "EmergencyLockUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmergencyLockUpgradeable__factory>;
    getContractFactory(
      name: "LifecycleStates",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LifecycleStates__factory>;
    getContractFactory(
      name: "RefundsHelperUpgreadable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RefundsHelperUpgreadable__factory>;
    getContractFactory(
      name: "RolesManagerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RolesManagerUpgradeable__factory>;

    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "EmergencyLockUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmergencyLockUpgradeable>;
    getContractAt(
      name: "LifecycleStates",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LifecycleStates>;
    getContractAt(
      name: "RefundsHelperUpgreadable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RefundsHelperUpgreadable>;
    getContractAt(
      name: "RolesManagerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RolesManagerUpgradeable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
