/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace ICriteriaManager {
  export type CriteriaStruct = {
    underlyingAsset: string;
    strikeAsset: string;
    isPut: boolean;
    maxStrikePercent: BigNumberish;
    maxDurationInDays: BigNumberish;
  };

  export type CriteriaStructOutput = [
    string,
    string,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    underlyingAsset: string;
    strikeAsset: string;
    isPut: boolean;
    maxStrikePercent: BigNumber;
    maxDurationInDays: BigNumber;
  };

  export type OtokenPropertiesStruct = {
    percentStrikeValue: BigNumberish;
    wholeDaysRemaining: BigNumberish;
    underlyingAsset: string;
    strikeAsset: string;
    isPut: boolean;
  };

  export type OtokenPropertiesStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    boolean
  ] & {
    percentStrikeValue: BigNumber;
    wholeDaysRemaining: BigNumber;
    underlyingAsset: string;
    strikeAsset: string;
    isPut: boolean;
  };
}

export interface ICriteriaManagerInterface extends utils.Interface {
  functions: {
    "addCriteria((address,address,bool,uint256,uint256))": FunctionFragment;
    "addCriteriaSet(bytes32[])": FunctionFragment;
    "hashCriteria((address,address,bool,uint256,uint256))": FunctionFragment;
    "hashOfSortedHashes(bytes32[])": FunctionFragment;
    "isCriteriaSetHash(bytes32)": FunctionFragment;
    "isInCriteriaSet(bytes32,bytes32)": FunctionFragment;
    "requireOtokenMeetsCriteria((address,address,bool,uint256,uint256),(uint256,uint256,address,address,bool))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCriteria"
      | "addCriteriaSet"
      | "hashCriteria"
      | "hashOfSortedHashes"
      | "isCriteriaSetHash"
      | "isInCriteriaSet"
      | "requireOtokenMeetsCriteria"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCriteria",
    values: [ICriteriaManager.CriteriaStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addCriteriaSet",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hashCriteria",
    values: [ICriteriaManager.CriteriaStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOfSortedHashes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isCriteriaSetHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInCriteriaSet",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requireOtokenMeetsCriteria",
    values: [
      ICriteriaManager.CriteriaStruct,
      ICriteriaManager.OtokenPropertiesStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCriteriaSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashOfSortedHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCriteriaSetHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInCriteriaSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireOtokenMeetsCriteria",
    data: BytesLike
  ): Result;

  events: {
    "CriteriaAdded(bytes32,tuple)": EventFragment;
    "CriteriaSetAdded(bytes32,bytes32[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CriteriaAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CriteriaSetAdded"): EventFragment;
}

export interface CriteriaAddedEventObject {
  criteriaHash: string;
  criteria: ICriteriaManager.CriteriaStructOutput;
}
export type CriteriaAddedEvent = TypedEvent<
  [string, ICriteriaManager.CriteriaStructOutput],
  CriteriaAddedEventObject
>;

export type CriteriaAddedEventFilter = TypedEventFilter<CriteriaAddedEvent>;

export interface CriteriaSetAddedEventObject {
  criteriaSetHash: string;
  criteriaSet: string[];
}
export type CriteriaSetAddedEvent = TypedEvent<
  [string, string[]],
  CriteriaSetAddedEventObject
>;

export type CriteriaSetAddedEventFilter =
  TypedEventFilter<CriteriaSetAddedEvent>;

export interface ICriteriaManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICriteriaManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCriteriaSet(
      _hashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hashCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashOfSortedHashes(
      _hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    isCriteriaSetHash(
      _criteriaSetHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    isInCriteriaSet(
      _criteriaSetHash: BytesLike,
      _criteriaHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isInSet: boolean }>;

    requireOtokenMeetsCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      _otokenCache: ICriteriaManager.OtokenPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  addCriteria(
    _criteria: ICriteriaManager.CriteriaStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCriteriaSet(
    _hashes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hashCriteria(
    _criteria: ICriteriaManager.CriteriaStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  hashOfSortedHashes(
    _hashes: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  isCriteriaSetHash(
    _criteriaSetHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInCriteriaSet(
    _criteriaSetHash: BytesLike,
    _criteriaHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requireOtokenMeetsCriteria(
    _criteria: ICriteriaManager.CriteriaStruct,
    _otokenCache: ICriteriaManager.OtokenPropertiesStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    addCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    addCriteriaSet(
      _hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    hashCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    hashOfSortedHashes(
      _hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    isCriteriaSetHash(
      _criteriaSetHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInCriteriaSet(
      _criteriaSetHash: BytesLike,
      _criteriaHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requireOtokenMeetsCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      _otokenCache: ICriteriaManager.OtokenPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CriteriaAdded(bytes32,tuple)"(
      criteriaHash?: BytesLike | null,
      criteria?: null
    ): CriteriaAddedEventFilter;
    CriteriaAdded(
      criteriaHash?: BytesLike | null,
      criteria?: null
    ): CriteriaAddedEventFilter;

    "CriteriaSetAdded(bytes32,bytes32[])"(
      criteriaSetHash?: BytesLike | null,
      criteriaSet?: null
    ): CriteriaSetAddedEventFilter;
    CriteriaSetAdded(
      criteriaSetHash?: BytesLike | null,
      criteriaSet?: null
    ): CriteriaSetAddedEventFilter;
  };

  estimateGas: {
    addCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCriteriaSet(
      _hashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hashCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOfSortedHashes(
      _hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCriteriaSetHash(
      _criteriaSetHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInCriteriaSet(
      _criteriaSetHash: BytesLike,
      _criteriaHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireOtokenMeetsCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      _otokenCache: ICriteriaManager.OtokenPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCriteriaSet(
      _hashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hashCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOfSortedHashes(
      _hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCriteriaSetHash(
      _criteriaSetHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInCriteriaSet(
      _criteriaSetHash: BytesLike,
      _criteriaHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireOtokenMeetsCriteria(
      _criteria: ICriteriaManager.CriteriaStruct,
      _otokenCache: ICriteriaManager.OtokenPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
