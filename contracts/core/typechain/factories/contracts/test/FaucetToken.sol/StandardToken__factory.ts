/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StandardToken,
  StandardTokenInterface,
} from "../../../../contracts/test/FaucetToken.sol/StandardToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialAmount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_tokenName",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimalUnits",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "_tokenSymbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000b8838038062000b888339810160408190526200003491620001ec565b6003849055336000908152600560209081526040822086905584516200005e929186019062000093565b5080516200007490600190602084019062000093565b50506002805460ff191660ff9290921691909117905550620002ca9050565b828054620000a19062000277565b90600052602060002090601f016020900481019282620000c5576000855562000110565b82601f10620000e057805160ff191683800117855562000110565b8280016001018555821562000110579182015b8281111562000110578251825591602001919060010190620000f3565b506200011e92915062000122565b5090565b5b808211156200011e576000815560010162000123565b600082601f8301126200014a578081fd5b81516001600160401b0380821115620001675762000167620002b4565b604051601f8301601f19908116603f01168101908282118183101715620001925762000192620002b4565b81604052838152602092508683858801011115620001ae578485fd5b8491505b83821015620001d15785820183015181830184015290820190620001b2565b83821115620001e257848385830101525b9695505050505050565b6000806000806080858703121562000202578384fd5b845160208601519094506001600160401b038082111562000221578485fd5b6200022f8883890162000139565b94506040870151915060ff8216821462000247578384fd5b6060870151919350808211156200025c578283fd5b506200026b8782880162000139565b91505092959194509250565b600181811c908216806200028c57607f821691505b60208210811415620002ae57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6108ae80620002da6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461010357806370a082311461012257806395d89b4114610142578063a9059cbb1461014a578063dd62ed3e1461015d57600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100f0575b600080fd5b6100a0610188565b6040516100ad9190610766565b60405180910390f35b6100c96100c43660046106f2565b610216565b60405190151581526020016100ad565b6100e260035481565b6040519081526020016100ad565b6100c96100fe3660046106b7565b610282565b6002546101109060ff1681565b60405160ff90911681526020016100ad565b6100e261013036600461066b565b60056020526000908152604090205481565b6100a0610497565b6100c96101583660046106f2565b6104a4565b6100e261016b366004610685565b600460209081526000928352604080842090915290825290205481565b60008054610195906107f4565b80601f01602080910402602001604051908101604052809291908181526020018280546101c1906107f4565b801561020e5780601f106101e35761010080835404028352916020019161020e565b820191906000526020600020905b8154815290600101906020018083116101f157829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102719086815260200190565b60405180910390a350600192915050565b60006102a56040518060600160405280603381526020016108466033913961053b565b6102d66040518060400160405280600f81526020016e029ba30b73230b9322a37b5b2b71d1608d1b81525030610581565b61030b60405180604001604052806013815260200172029ba30b73230b9322a37b5b2b71039b9319d1606d1b81525085610581565b61034060405180604001604052806013815260200172029ba30b73230b9322a37b5b2b7103239ba1d1606d1b81525084610581565b61037860405180604001604052806016815260200175029ba30b73230b9322a37b5b2b71030b6b7bab73a1d160551b815250836105ca565b6103996040518060600160405280603381526020016108466033913961053b565b6001600160a01b03841660009081526004602090815260408083203384529091529020546103c7908361060f565b6001600160a01b038516600081815260046020908152604080832033845282528083209490945591815260059091522054610402908361060f565b6001600160a01b0380861660009081526005602052604080822093909355908516815220546104319083610622565b6001600160a01b0380851660008181526005602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104859086815260200190565b60405180910390a35060019392505050565b60018054610195906107f4565b336000908152600560205260408120546104be908361060f565b33600090815260056020526040808220929092556001600160a01b038516815220546104ea9083610622565b6001600160a01b0384166000818152600560205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102719086815260200190565b61057e8160405160240161054f9190610766565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261062e565b50565b6105c68282604051602401610597929190610779565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b17905261062e565b5050565b6105c682826040516024016105e09291906107a3565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905261062e565b600061061b82846107dd565b9392505050565b600061061b82846107c5565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b038116811461066657600080fd5b919050565b60006020828403121561067c578081fd5b61061b8261064f565b60008060408385031215610697578081fd5b6106a08361064f565b91506106ae6020840161064f565b90509250929050565b6000806000606084860312156106cb578081fd5b6106d48461064f565b92506106e26020850161064f565b9150604084013590509250925092565b60008060408385031215610704578182fd5b61070d8361064f565b946020939093013593505050565b60008151808452815b8181101561074057602081850181015186830182015201610724565b818111156107515782602083870101525b50601f01601f19169290920160200192915050565b60208152600061061b602083018461071b565b60408152600061078c604083018561071b565b905060018060a01b03831660208301529392505050565b6040815260006107b6604083018561071b565b90508260208301529392505050565b600082198211156107d8576107d861082f565b500190565b6000828210156107ef576107ef61082f565b500390565b600181811c9082168061080857607f821691505b6020821081141561082957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfe2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2da2646970667358221220e13efd260084272018ea0df7bc64b6e28729719a853b4f819857c4496598e7fb64736f6c63430008040033";

type StandardTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StandardTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StandardToken__factory extends ContractFactory {
  constructor(...args: StandardTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _initialAmount: BigNumberish,
    _tokenName: string,
    _decimalUnits: BigNumberish,
    _tokenSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StandardToken> {
    return super.deploy(
      _initialAmount,
      _tokenName,
      _decimalUnits,
      _tokenSymbol,
      overrides || {}
    ) as Promise<StandardToken>;
  }
  override getDeployTransaction(
    _initialAmount: BigNumberish,
    _tokenName: string,
    _decimalUnits: BigNumberish,
    _tokenSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _initialAmount,
      _tokenName,
      _decimalUnits,
      _tokenSymbol,
      overrides || {}
    );
  }
  override attach(address: string): StandardToken {
    return super.attach(address) as StandardToken;
  }
  override connect(signer: Signer): StandardToken__factory {
    return super.connect(signer) as StandardToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StandardTokenInterface {
    return new utils.Interface(_abi) as StandardTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StandardToken {
    return new Contract(address, _abi, signerOrProvider) as StandardToken;
  }
}
