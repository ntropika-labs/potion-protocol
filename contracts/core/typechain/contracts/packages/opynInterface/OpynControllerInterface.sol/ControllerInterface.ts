/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace MarginVaultInterface {
  export type VaultStruct = {
    shortOtokens: PromiseOrValue<string>[];
    longOtokens: PromiseOrValue<string>[];
    collateralAssets: PromiseOrValue<string>[];
    shortAmounts: PromiseOrValue<BigNumberish>[];
    longAmounts: PromiseOrValue<BigNumberish>[];
    collateralAmounts: PromiseOrValue<BigNumberish>[];
  };

  export type VaultStructOutput = [
    string[],
    string[],
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber[]
  ] & {
    shortOtokens: string[];
    longOtokens: string[];
    collateralAssets: string[];
    shortAmounts: BigNumber[];
    longAmounts: BigNumber[];
    collateralAmounts: BigNumber[];
  };
}

export declare namespace Actions {
  export type ActionArgsStruct = {
    actionType: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    secondAddress: PromiseOrValue<string>;
    asset: PromiseOrValue<string>;
    vaultId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type ActionArgsStructOutput = [
    number,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    actionType: number;
    owner: string;
    secondAddress: string;
    asset: string;
    vaultId: BigNumber;
    amount: BigNumber;
    index: BigNumber;
    data: string;
  };
}

export interface ControllerInterfaceInterface extends utils.Interface {
  functions: {
    "addressbook()": FunctionFragment;
    "calculator()": FunctionFragment;
    "callRestricted()": FunctionFragment;
    "canSettleAssets(address,address,address,uint256)": FunctionFragment;
    "donate(address,uint256)": FunctionFragment;
    "fullPauser()": FunctionFragment;
    "getAccountVaultCounter(address)": FunctionFragment;
    "getConfiguration()": FunctionFragment;
    "getPayout(address,uint256)": FunctionFragment;
    "getProceed(address,uint256)": FunctionFragment;
    "getVault(address,uint256)": FunctionFragment;
    "getVaultWithDetails(address,uint256)": FunctionFragment;
    "hasExpired(address)": FunctionFragment;
    "isLiquidatable(address,uint256,uint256)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "isSettlementAllowed(address)": FunctionFragment;
    "operate((uint8,address,address,address,uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "oracle()": FunctionFragment;
    "partialPauser()": FunctionFragment;
    "pool()": FunctionFragment;
    "setOperator(address,bool)": FunctionFragment;
    "sync(address,uint256)": FunctionFragment;
    "systemFullyPaused()": FunctionFragment;
    "systemPartiallyPaused()": FunctionFragment;
    "whitelist()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressbook"
      | "calculator"
      | "callRestricted"
      | "canSettleAssets"
      | "donate"
      | "fullPauser"
      | "getAccountVaultCounter"
      | "getConfiguration"
      | "getPayout"
      | "getProceed"
      | "getVault"
      | "getVaultWithDetails"
      | "hasExpired"
      | "isLiquidatable"
      | "isOperator"
      | "isSettlementAllowed"
      | "operate"
      | "oracle"
      | "partialPauser"
      | "pool"
      | "setOperator"
      | "sync"
      | "systemFullyPaused"
      | "systemPartiallyPaused"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressbook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callRestricted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canSettleAssets",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fullPauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountVaultCounter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayout",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProceed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultWithDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasExpired",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSettlementAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "operate",
    values: [Actions.ActionArgsStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partialPauser",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "sync",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "systemFullyPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemPartiallyPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addressbook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calculator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callRestricted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canSettleAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fullPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountVaultCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProceed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultWithDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasExpired", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSettlementAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemFullyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemPartiallyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {};
}

export interface ControllerInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressbook(overrides?: CallOverrides): Promise<[string]>;

    calculator(overrides?: CallOverrides): Promise<[string]>;

    callRestricted(overrides?: CallOverrides): Promise<[boolean]>;

    canSettleAssets(
      _underlying: PromiseOrValue<string>,
      _strike: PromiseOrValue<string>,
      _collateral: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    donate(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fullPauser(overrides?: CallOverrides): Promise<[string]>;

    getAccountVaultCounter(
      _accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConfiguration(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    getPayout(
      _otoken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProceed(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVault(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarginVaultInterface.VaultStructOutput]>;

    getVaultWithDetails(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarginVaultInterface.VaultStructOutput, BigNumber, BigNumber]>;

    hasExpired(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLiquidatable(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    isOperator(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSettlementAllowed(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operate(
      _actions: Actions.ActionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    partialPauser(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _isOperator: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sync(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    systemFullyPaused(overrides?: CallOverrides): Promise<[boolean]>;

    systemPartiallyPaused(overrides?: CallOverrides): Promise<[boolean]>;

    whitelist(overrides?: CallOverrides): Promise<[string]>;
  };

  addressbook(overrides?: CallOverrides): Promise<string>;

  calculator(overrides?: CallOverrides): Promise<string>;

  callRestricted(overrides?: CallOverrides): Promise<boolean>;

  canSettleAssets(
    _underlying: PromiseOrValue<string>,
    _strike: PromiseOrValue<string>,
    _collateral: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  donate(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fullPauser(overrides?: CallOverrides): Promise<string>;

  getAccountVaultCounter(
    _accountOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConfiguration(
    overrides?: CallOverrides
  ): Promise<[string, string, string, string]>;

  getPayout(
    _otoken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProceed(
    _owner: PromiseOrValue<string>,
    _vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVault(
    _owner: PromiseOrValue<string>,
    _vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarginVaultInterface.VaultStructOutput>;

  getVaultWithDetails(
    _owner: PromiseOrValue<string>,
    _vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[MarginVaultInterface.VaultStructOutput, BigNumber, BigNumber]>;

  hasExpired(
    _otoken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLiquidatable(
    _owner: PromiseOrValue<string>,
    _vaultId: PromiseOrValue<BigNumberish>,
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber]>;

  isOperator(
    _owner: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSettlementAllowed(
    _otoken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operate(
    _actions: Actions.ActionArgsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  partialPauser(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  setOperator(
    _operator: PromiseOrValue<string>,
    _isOperator: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sync(
    _owner: PromiseOrValue<string>,
    _vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  systemFullyPaused(overrides?: CallOverrides): Promise<boolean>;

  systemPartiallyPaused(overrides?: CallOverrides): Promise<boolean>;

  whitelist(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addressbook(overrides?: CallOverrides): Promise<string>;

    calculator(overrides?: CallOverrides): Promise<string>;

    callRestricted(overrides?: CallOverrides): Promise<boolean>;

    canSettleAssets(
      _underlying: PromiseOrValue<string>,
      _strike: PromiseOrValue<string>,
      _collateral: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    donate(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fullPauser(overrides?: CallOverrides): Promise<string>;

    getAccountVaultCounter(
      _accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfiguration(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    getPayout(
      _otoken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceed(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarginVaultInterface.VaultStructOutput>;

    getVaultWithDetails(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarginVaultInterface.VaultStructOutput, BigNumber, BigNumber]>;

    hasExpired(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLiquidatable(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    isOperator(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSettlementAllowed(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operate(
      _actions: Actions.ActionArgsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    partialPauser(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _isOperator: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    sync(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    systemFullyPaused(overrides?: CallOverrides): Promise<boolean>;

    systemPartiallyPaused(overrides?: CallOverrides): Promise<boolean>;

    whitelist(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addressbook(overrides?: CallOverrides): Promise<BigNumber>;

    calculator(overrides?: CallOverrides): Promise<BigNumber>;

    callRestricted(overrides?: CallOverrides): Promise<BigNumber>;

    canSettleAssets(
      _underlying: PromiseOrValue<string>,
      _strike: PromiseOrValue<string>,
      _collateral: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donate(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fullPauser(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountVaultCounter(
      _accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getPayout(
      _otoken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceed(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWithDetails(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasExpired(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLiquidatable(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSettlementAllowed(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operate(
      _actions: Actions.ActionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    partialPauser(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _isOperator: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sync(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    systemFullyPaused(overrides?: CallOverrides): Promise<BigNumber>;

    systemPartiallyPaused(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressbook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callRestricted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canSettleAssets(
      _underlying: PromiseOrValue<string>,
      _strike: PromiseOrValue<string>,
      _collateral: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donate(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fullPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountVaultCounter(
      _accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfiguration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayout(
      _otoken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProceed(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultWithDetails(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasExpired(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiquidatable(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSettlementAllowed(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operate(
      _actions: Actions.ActionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partialPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _isOperator: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sync(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    systemFullyPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemPartiallyPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
