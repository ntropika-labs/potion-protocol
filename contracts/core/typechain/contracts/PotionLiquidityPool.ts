/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace ICriteriaManager {
  export type CriteriaStruct = {
    underlyingAsset: string;
    strikeAsset: string;
    isPut: boolean;
    maxStrikePercent: BigNumberish;
    maxDurationInDays: BigNumberish;
  };

  export type CriteriaStructOutput = [
    string,
    string,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    underlyingAsset: string;
    strikeAsset: string;
    isPut: boolean;
    maxStrikePercent: BigNumber;
    maxDurationInDays: BigNumber;
  };
}

export declare namespace ICurveManager {
  export type CurveStruct = {
    a_59x18: BigNumberish;
    b_59x18: BigNumberish;
    c_59x18: BigNumberish;
    d_59x18: BigNumberish;
    max_util_59x18: BigNumberish;
  };

  export type CurveStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    a_59x18: BigNumber;
    b_59x18: BigNumber;
    c_59x18: BigNumber;
    d_59x18: BigNumber;
    max_util_59x18: BigNumber;
  };
}

export declare namespace PotionLiquidityPool {
  export type CounterpartyDetailsStruct = {
    lp: string;
    poolId: BigNumberish;
    curve: ICurveManager.CurveStruct;
    criteria: ICriteriaManager.CriteriaStruct;
    orderSizeInOtokens: BigNumberish;
  };

  export type CounterpartyDetailsStructOutput = [
    string,
    BigNumber,
    ICurveManager.CurveStructOutput,
    ICriteriaManager.CriteriaStructOutput,
    BigNumber
  ] & {
    lp: string;
    poolId: BigNumber;
    curve: ICurveManager.CurveStructOutput;
    criteria: ICriteriaManager.CriteriaStructOutput;
    orderSizeInOtokens: BigNumber;
  };

  export type PoolIdentifierStruct = { lp: string; poolId: BigNumberish };

  export type PoolIdentifierStructOutput = [string, BigNumber] & {
    lp: string;
    poolId: BigNumber;
  };
}

export interface PotionLiquidityPoolInterface extends utils.Interface {
  functions: {
    "addAndSetCriterias(uint256,(address,address,bool,uint256,uint256)[])": FunctionFragment;
    "addAndSetCurve(uint256,(int256,int256,int256,int256,int256))": FunctionFragment;
    "buyOtokens(address,(address,uint256,(int256,int256,int256,int256,int256),(address,address,bool,uint256,uint256),uint256)[],uint256)": FunctionFragment;
    "collateralNeededForPuts(address,uint256)": FunctionFragment;
    "createAndBuyOtokens(address,address,address,uint256,uint256,bool,(address,uint256,(int256,int256,int256,int256,int256),(address,address,bool,uint256,uint256),uint256)[],uint256)": FunctionFragment;
    "createNewVaultId(address)": FunctionFragment;
    "crit()": FunctionFragment;
    "crv()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "depositAndConfigurePool(uint256,uint256,bytes32,bytes32)": FunctionFragment;
    "depositAndCreateCurveAndCriteria(uint256,uint256,(int256,int256,int256,int256,int256),(address,address,bool,uint256,uint256)[])": FunctionFragment;
    "durationInDays(address)": FunctionFragment;
    "getVaultId(address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "isSettled(address)": FunctionFragment;
    "lpLockedAmount(address,uint256)": FunctionFragment;
    "lpPools(address,uint256)": FunctionFragment;
    "lpTotalAmount(address,uint256)": FunctionFragment;
    "maxTotalValueLocked()": FunctionFragment;
    "opynAddressBook()": FunctionFragment;
    "opynController()": FunctionFragment;
    "outstandingSettlement(address,(address,uint256))": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "percentStrike(address)": FunctionFragment;
    "poolCollateralToken()": FunctionFragment;
    "premiums(address,(address,uint256,(int256,int256,int256,int256,int256),(address,address,bool,uint256,uint256),uint256)[])": FunctionFragment;
    "redistributeSettlement(address,(address,uint256)[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCriteriaManager(address)": FunctionFragment;
    "setCurve(uint256,bytes32)": FunctionFragment;
    "setCurveCriteria(uint256,bytes32)": FunctionFragment;
    "setCurveManager(address)": FunctionFragment;
    "setMaxTotalValueLocked(uint256)": FunctionFragment;
    "settleAfterExpiry(address)": FunctionFragment;
    "settleAndRedistributeSettlement(address,(address,uint256)[])": FunctionFragment;
    "sumOfAllLockedBalances()": FunctionFragment;
    "sumOfAllUnlockedBalances()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "util(address,uint256,uint256)": FunctionFragment;
    "vaultCount()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAndSetCriterias"
      | "addAndSetCurve"
      | "buyOtokens"
      | "collateralNeededForPuts"
      | "createAndBuyOtokens"
      | "createNewVaultId"
      | "crit"
      | "crv"
      | "deposit"
      | "depositAndConfigurePool"
      | "depositAndCreateCurveAndCriteria"
      | "durationInDays"
      | "getVaultId"
      | "initialize"
      | "isSettled"
      | "lpLockedAmount"
      | "lpPools"
      | "lpTotalAmount"
      | "maxTotalValueLocked"
      | "opynAddressBook"
      | "opynController"
      | "outstandingSettlement"
      | "owner"
      | "pause"
      | "paused"
      | "percentStrike"
      | "poolCollateralToken"
      | "premiums"
      | "redistributeSettlement"
      | "renounceOwnership"
      | "setCriteriaManager"
      | "setCurve"
      | "setCurveCriteria"
      | "setCurveManager"
      | "setMaxTotalValueLocked"
      | "settleAfterExpiry"
      | "settleAndRedistributeSettlement"
      | "sumOfAllLockedBalances"
      | "sumOfAllUnlockedBalances"
      | "transferOwnership"
      | "unpause"
      | "util"
      | "vaultCount"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAndSetCriterias",
    values: [BigNumberish, ICriteriaManager.CriteriaStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addAndSetCurve",
    values: [BigNumberish, ICurveManager.CurveStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "buyOtokens",
    values: [
      string,
      PotionLiquidityPool.CounterpartyDetailsStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralNeededForPuts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAndBuyOtokens",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      PotionLiquidityPool.CounterpartyDetailsStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewVaultId",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "crit", values?: undefined): string;
  encodeFunctionData(functionFragment: "crv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndConfigurePool",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndCreateCurveAndCriteria",
    values: [
      BigNumberish,
      BigNumberish,
      ICurveManager.CurveStruct,
      ICriteriaManager.CriteriaStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "durationInDays",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVaultId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isSettled", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lpLockedAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lpPools",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTotalAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "opynAddressBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "opynController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outstandingSettlement",
    values: [string, PotionLiquidityPool.PoolIdentifierStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "percentStrike",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolCollateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "premiums",
    values: [string, PotionLiquidityPool.CounterpartyDetailsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redistributeSettlement",
    values: [string, PotionLiquidityPool.PoolIdentifierStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCriteriaManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurve",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurveCriteria",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurveManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalValueLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAfterExpiry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAndRedistributeSettlement",
    values: [string, PotionLiquidityPool.PoolIdentifierStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sumOfAllLockedBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sumOfAllUnlockedBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "util",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAndSetCriterias",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAndSetCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyOtokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralNeededForPuts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAndBuyOtokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewVaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndConfigurePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndCreateCurveAndCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "durationInDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaultId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSettled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opynAddressBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opynController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outstandingSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "percentStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "premiums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redistributeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCriteriaManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCurve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCurveCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAfterExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAndRedistributeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sumOfAllLockedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sumOfAllUnlockedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "util", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CriteriaSetSelected(address,uint256,bytes32)": EventFragment;
    "CurveSelected(address,uint256,bytes32)": EventFragment;
    "Deposited(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OptionSettled(address,uint256)": EventFragment;
    "OptionSettlementDistributed(address,address,uint256,uint256)": EventFragment;
    "OptionsBought(address,address,uint256,uint256)": EventFragment;
    "OptionsSold(address,uint256,address,bytes32,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CriteriaSetSelected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurveSelected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OptionSettled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OptionSettlementDistributed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OptionsBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OptionsSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface CriteriaSetSelectedEventObject {
  lp: string;
  poolId: BigNumber;
  criteriaSetHash: string;
}
export type CriteriaSetSelectedEvent = TypedEvent<
  [string, BigNumber, string],
  CriteriaSetSelectedEventObject
>;

export type CriteriaSetSelectedEventFilter =
  TypedEventFilter<CriteriaSetSelectedEvent>;

export interface CurveSelectedEventObject {
  lp: string;
  poolId: BigNumber;
  curveHash: string;
}
export type CurveSelectedEvent = TypedEvent<
  [string, BigNumber, string],
  CurveSelectedEventObject
>;

export type CurveSelectedEventFilter = TypedEventFilter<CurveSelectedEvent>;

export interface DepositedEventObject {
  lp: string;
  poolId: BigNumber;
  amount: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OptionSettledEventObject {
  otoken: string;
  collateralReturned: BigNumber;
}
export type OptionSettledEvent = TypedEvent<
  [string, BigNumber],
  OptionSettledEventObject
>;

export type OptionSettledEventFilter = TypedEventFilter<OptionSettledEvent>;

export interface OptionSettlementDistributedEventObject {
  otoken: string;
  lp: string;
  poolId: BigNumber;
  collateralReturned: BigNumber;
}
export type OptionSettlementDistributedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  OptionSettlementDistributedEventObject
>;

export type OptionSettlementDistributedEventFilter =
  TypedEventFilter<OptionSettlementDistributedEvent>;

export interface OptionsBoughtEventObject {
  buyer: string;
  otoken: string;
  numberOfOtokens: BigNumber;
  totalPremiumPaid: BigNumber;
}
export type OptionsBoughtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  OptionsBoughtEventObject
>;

export type OptionsBoughtEventFilter = TypedEventFilter<OptionsBoughtEvent>;

export interface OptionsSoldEventObject {
  lp: string;
  poolId: BigNumber;
  otoken: string;
  curveHash: string;
  numberOfOtokens: BigNumber;
  liquidityCollateralized: BigNumber;
  premiumReceived: BigNumber;
}
export type OptionsSoldEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  OptionsSoldEventObject
>;

export type OptionsSoldEventFilter = TypedEventFilter<OptionsSoldEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawnEventObject {
  lp: string;
  poolId: BigNumber;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface PotionLiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PotionLiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAndSetCriterias(
      _poolId: BigNumberish,
      _criterias: ICriteriaManager.CriteriaStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAndSetCurve(
      _poolId: BigNumberish,
      _curve: ICurveManager.CurveStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyOtokens(
      _otoken: string,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralNeededForPuts(
      _otoken: string,
      _otokenQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createAndBuyOtokens(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNewVaultId(
      _otoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crit(overrides?: CallOverrides): Promise<[string]>;

    crv(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndConfigurePool(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _curveHash: BytesLike,
      _criteriaSetHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndCreateCurveAndCriteria(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _curve: ICurveManager.CurveStruct,
      _criterias: ICriteriaManager.CriteriaStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    durationInDays(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultId(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _opynAddressBook: string,
      _poolCollateralToken: string,
      _curveManager: string,
      _criteriaManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isSettled(_otoken: string, overrides?: CallOverrides): Promise<[boolean]>;

    lpLockedAmount(
      _lp: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lpPools(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        total: BigNumber;
        locked: BigNumber;
        curveHash: string;
        criteriaSetHash: string;
      }
    >;

    lpTotalAmount(
      _lp: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTotalValueLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    opynAddressBook(overrides?: CallOverrides): Promise<[string]>;

    opynController(overrides?: CallOverrides): Promise<[string]>;

    outstandingSettlement(
      _otoken: string,
      _pool: PotionLiquidityPool.PoolIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralDueBack: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    percentStrike(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolCollateralToken(overrides?: CallOverrides): Promise<[string]>;

    premiums(
      _otoken: string,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        totalPremiumInCollateralTokens: BigNumber;
        perLpPremiumsInCollateralTokens: BigNumber[];
      }
    >;

    redistributeSettlement(
      _otoken: string,
      _pools: PotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCriteriaManager(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurve(
      _poolId: BigNumberish,
      _curveHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurveCriteria(
      _poolId: BigNumberish,
      _criteriaSetHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurveManager(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalValueLocked(
      _newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAfterExpiry(
      _otoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAndRedistributeSettlement(
      _otoken: string,
      _pools: PotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sumOfAllLockedBalances(overrides?: CallOverrides): Promise<[BigNumber]>;

    sumOfAllUnlockedBalances(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    util(
      _lp: string,
      _poolId: BigNumberish,
      _collateralToLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        utilBeforeAs59x18: BigNumber;
        utilAfterAs59x18: BigNumber;
        lockedAmountBefore: BigNumber;
        lockedAmountAfter: BigNumber;
      }
    >;

    vaultCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAndSetCriterias(
    _poolId: BigNumberish,
    _criterias: ICriteriaManager.CriteriaStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAndSetCurve(
    _poolId: BigNumberish,
    _curve: ICurveManager.CurveStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyOtokens(
    _otoken: string,
    _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
    _maxPremium: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralNeededForPuts(
    _otoken: string,
    _otokenQty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createAndBuyOtokens(
    _underlyingAsset: string,
    _strikeAsset: string,
    _collateralAsset: string,
    _strikePrice: BigNumberish,
    _expiry: BigNumberish,
    _isPut: boolean,
    _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
    _maxPremium: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNewVaultId(
    _otoken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crit(overrides?: CallOverrides): Promise<string>;

  crv(overrides?: CallOverrides): Promise<string>;

  deposit(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndConfigurePool(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    _curveHash: BytesLike,
    _criteriaSetHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndCreateCurveAndCriteria(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    _curve: ICurveManager.CurveStruct,
    _criterias: ICriteriaManager.CriteriaStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  durationInDays(
    _otoken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultId(_otoken: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _opynAddressBook: string,
    _poolCollateralToken: string,
    _curveManager: string,
    _criteriaManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isSettled(_otoken: string, overrides?: CallOverrides): Promise<boolean>;

  lpLockedAmount(
    _lp: string,
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lpPools(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      total: BigNumber;
      locked: BigNumber;
      curveHash: string;
      criteriaSetHash: string;
    }
  >;

  lpTotalAmount(
    _lp: string,
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

  opynAddressBook(overrides?: CallOverrides): Promise<string>;

  opynController(overrides?: CallOverrides): Promise<string>;

  outstandingSettlement(
    _otoken: string,
    _pool: PotionLiquidityPool.PoolIdentifierStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  percentStrike(_otoken: string, overrides?: CallOverrides): Promise<BigNumber>;

  poolCollateralToken(overrides?: CallOverrides): Promise<string>;

  premiums(
    _otoken: string,
    _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & {
      totalPremiumInCollateralTokens: BigNumber;
      perLpPremiumsInCollateralTokens: BigNumber[];
    }
  >;

  redistributeSettlement(
    _otoken: string,
    _pools: PotionLiquidityPool.PoolIdentifierStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCriteriaManager(
    _new: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurve(
    _poolId: BigNumberish,
    _curveHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurveCriteria(
    _poolId: BigNumberish,
    _criteriaSetHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurveManager(
    _new: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalValueLocked(
    _newMax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAfterExpiry(
    _otoken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAndRedistributeSettlement(
    _otoken: string,
    _pools: PotionLiquidityPool.PoolIdentifierStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sumOfAllLockedBalances(overrides?: CallOverrides): Promise<BigNumber>;

  sumOfAllUnlockedBalances(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  util(
    _lp: string,
    _poolId: BigNumberish,
    _collateralToLock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      utilBeforeAs59x18: BigNumber;
      utilAfterAs59x18: BigNumber;
      lockedAmountBefore: BigNumber;
      lockedAmountAfter: BigNumber;
    }
  >;

  vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAndSetCriterias(
      _poolId: BigNumberish,
      _criterias: ICriteriaManager.CriteriaStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    addAndSetCurve(
      _poolId: BigNumberish,
      _curve: ICurveManager.CurveStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    buyOtokens(
      _otoken: string,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralNeededForPuts(
      _otoken: string,
      _otokenQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAndBuyOtokens(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewVaultId(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crit(overrides?: CallOverrides): Promise<string>;

    crv(overrides?: CallOverrides): Promise<string>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndConfigurePool(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _curveHash: BytesLike,
      _criteriaSetHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndCreateCurveAndCriteria(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _curve: ICurveManager.CurveStruct,
      _criterias: ICriteriaManager.CriteriaStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    durationInDays(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultId(_otoken: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _opynAddressBook: string,
      _poolCollateralToken: string,
      _curveManager: string,
      _criteriaManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isSettled(_otoken: string, overrides?: CallOverrides): Promise<boolean>;

    lpLockedAmount(
      _lp: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpPools(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        total: BigNumber;
        locked: BigNumber;
        curveHash: string;
        criteriaSetHash: string;
      }
    >;

    lpTotalAmount(
      _lp: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    opynAddressBook(overrides?: CallOverrides): Promise<string>;

    opynController(overrides?: CallOverrides): Promise<string>;

    outstandingSettlement(
      _otoken: string,
      _pool: PotionLiquidityPool.PoolIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    percentStrike(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCollateralToken(overrides?: CallOverrides): Promise<string>;

    premiums(
      _otoken: string,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        totalPremiumInCollateralTokens: BigNumber;
        perLpPremiumsInCollateralTokens: BigNumber[];
      }
    >;

    redistributeSettlement(
      _otoken: string,
      _pools: PotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCriteriaManager(_new: string, overrides?: CallOverrides): Promise<void>;

    setCurve(
      _poolId: BigNumberish,
      _curveHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurveCriteria(
      _poolId: BigNumberish,
      _criteriaSetHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurveManager(_new: string, overrides?: CallOverrides): Promise<void>;

    setMaxTotalValueLocked(
      _newMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAfterExpiry(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAndRedistributeSettlement(
      _otoken: string,
      _pools: PotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    sumOfAllLockedBalances(overrides?: CallOverrides): Promise<BigNumber>;

    sumOfAllUnlockedBalances(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    util(
      _lp: string,
      _poolId: BigNumberish,
      _collateralToLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        utilBeforeAs59x18: BigNumber;
        utilAfterAs59x18: BigNumber;
        lockedAmountBefore: BigNumber;
        lockedAmountAfter: BigNumber;
      }
    >;

    vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CriteriaSetSelected(address,uint256,bytes32)"(
      lp?: string | null,
      poolId?: BigNumberish | null,
      criteriaSetHash?: null
    ): CriteriaSetSelectedEventFilter;
    CriteriaSetSelected(
      lp?: string | null,
      poolId?: BigNumberish | null,
      criteriaSetHash?: null
    ): CriteriaSetSelectedEventFilter;

    "CurveSelected(address,uint256,bytes32)"(
      lp?: string | null,
      poolId?: BigNumberish | null,
      curveHash?: null
    ): CurveSelectedEventFilter;
    CurveSelected(
      lp?: string | null,
      poolId?: BigNumberish | null,
      curveHash?: null
    ): CurveSelectedEventFilter;

    "Deposited(address,uint256,uint256)"(
      lp?: string | null,
      poolId?: BigNumberish | null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(
      lp?: string | null,
      poolId?: BigNumberish | null,
      amount?: null
    ): DepositedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OptionSettled(address,uint256)"(
      otoken?: string | null,
      collateralReturned?: null
    ): OptionSettledEventFilter;
    OptionSettled(
      otoken?: string | null,
      collateralReturned?: null
    ): OptionSettledEventFilter;

    "OptionSettlementDistributed(address,address,uint256,uint256)"(
      otoken?: string | null,
      lp?: string | null,
      poolId?: BigNumberish | null,
      collateralReturned?: null
    ): OptionSettlementDistributedEventFilter;
    OptionSettlementDistributed(
      otoken?: string | null,
      lp?: string | null,
      poolId?: BigNumberish | null,
      collateralReturned?: null
    ): OptionSettlementDistributedEventFilter;

    "OptionsBought(address,address,uint256,uint256)"(
      buyer?: string | null,
      otoken?: string | null,
      numberOfOtokens?: null,
      totalPremiumPaid?: null
    ): OptionsBoughtEventFilter;
    OptionsBought(
      buyer?: string | null,
      otoken?: string | null,
      numberOfOtokens?: null,
      totalPremiumPaid?: null
    ): OptionsBoughtEventFilter;

    "OptionsSold(address,uint256,address,bytes32,uint256,uint256,uint256)"(
      lp?: string | null,
      poolId?: BigNumberish | null,
      otoken?: string | null,
      curveHash?: null,
      numberOfOtokens?: null,
      liquidityCollateralized?: null,
      premiumReceived?: null
    ): OptionsSoldEventFilter;
    OptionsSold(
      lp?: string | null,
      poolId?: BigNumberish | null,
      otoken?: string | null,
      curveHash?: null,
      numberOfOtokens?: null,
      liquidityCollateralized?: null,
      premiumReceived?: null
    ): OptionsSoldEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdrawn(address,uint256,uint256)"(
      lp?: string | null,
      poolId?: BigNumberish | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      lp?: string | null,
      poolId?: BigNumberish | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    addAndSetCriterias(
      _poolId: BigNumberish,
      _criterias: ICriteriaManager.CriteriaStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAndSetCurve(
      _poolId: BigNumberish,
      _curve: ICurveManager.CurveStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyOtokens(
      _otoken: string,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralNeededForPuts(
      _otoken: string,
      _otokenQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAndBuyOtokens(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNewVaultId(
      _otoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crit(overrides?: CallOverrides): Promise<BigNumber>;

    crv(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndConfigurePool(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _curveHash: BytesLike,
      _criteriaSetHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndCreateCurveAndCriteria(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _curve: ICurveManager.CurveStruct,
      _criterias: ICriteriaManager.CriteriaStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    durationInDays(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultId(_otoken: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _opynAddressBook: string,
      _poolCollateralToken: string,
      _curveManager: string,
      _criteriaManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isSettled(_otoken: string, overrides?: CallOverrides): Promise<BigNumber>;

    lpLockedAmount(
      _lp: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpPools(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpTotalAmount(
      _lp: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    opynAddressBook(overrides?: CallOverrides): Promise<BigNumber>;

    opynController(overrides?: CallOverrides): Promise<BigNumber>;

    outstandingSettlement(
      _otoken: string,
      _pool: PotionLiquidityPool.PoolIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    percentStrike(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCollateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    premiums(
      _otoken: string,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redistributeSettlement(
      _otoken: string,
      _pools: PotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCriteriaManager(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurve(
      _poolId: BigNumberish,
      _curveHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurveCriteria(
      _poolId: BigNumberish,
      _criteriaSetHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurveManager(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTotalValueLocked(
      _newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAfterExpiry(
      _otoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAndRedistributeSettlement(
      _otoken: string,
      _pools: PotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sumOfAllLockedBalances(overrides?: CallOverrides): Promise<BigNumber>;

    sumOfAllUnlockedBalances(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    util(
      _lp: string,
      _poolId: BigNumberish,
      _collateralToLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAndSetCriterias(
      _poolId: BigNumberish,
      _criterias: ICriteriaManager.CriteriaStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAndSetCurve(
      _poolId: BigNumberish,
      _curve: ICurveManager.CurveStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyOtokens(
      _otoken: string,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralNeededForPuts(
      _otoken: string,
      _otokenQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAndBuyOtokens(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      _maxPremium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNewVaultId(
      _otoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndConfigurePool(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _curveHash: BytesLike,
      _criteriaSetHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndCreateCurveAndCriteria(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      _curve: ICurveManager.CurveStruct,
      _criterias: ICriteriaManager.CriteriaStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    durationInDays(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultId(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _opynAddressBook: string,
      _poolCollateralToken: string,
      _curveManager: string,
      _criteriaManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isSettled(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpLockedAmount(
      _lp: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpPools(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTotalAmount(
      _lp: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalValueLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    opynAddressBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    opynController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outstandingSettlement(
      _otoken: string,
      _pool: PotionLiquidityPool.PoolIdentifierStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentStrike(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCollateralToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    premiums(
      _otoken: string,
      _sellers: PotionLiquidityPool.CounterpartyDetailsStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redistributeSettlement(
      _otoken: string,
      _pools: PotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCriteriaManager(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurve(
      _poolId: BigNumberish,
      _curveHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurveCriteria(
      _poolId: BigNumberish,
      _criteriaSetHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurveManager(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalValueLocked(
      _newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAfterExpiry(
      _otoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAndRedistributeSettlement(
      _otoken: string,
      _pools: PotionLiquidityPool.PoolIdentifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sumOfAllLockedBalances(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sumOfAllUnlockedBalances(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    util(
      _lp: string,
      _poolId: BigNumberish,
      _collateralToLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
