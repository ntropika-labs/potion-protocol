/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface MarginPoolInterface extends utils.Interface {
  functions: {
    "addressBook()": FunctionFragment;
    "batchTransferToPool(address[],address[],uint256[])": FunctionFragment;
    "batchTransferToUser(address[],address[],uint256[])": FunctionFragment;
    "farm(address,address,uint256)": FunctionFragment;
    "farmer()": FunctionFragment;
    "getStoredBalance(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFarmer(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferToPool(address,address,uint256)": FunctionFragment;
    "transferToUser(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressBook"
      | "batchTransferToPool"
      | "batchTransferToUser"
      | "farm"
      | "farmer"
      | "getStoredBalance"
      | "owner"
      | "renounceOwnership"
      | "setFarmer"
      | "transferOwnership"
      | "transferToPool"
      | "transferToUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferToPool",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferToUser",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "farm",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "farmer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStoredBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFarmer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStoredBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFarmer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToUser",
    data: BytesLike
  ): Result;

  events: {
    "AssetFarmed(address,address,uint256)": EventFragment;
    "FarmerUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferToPool(address,address,uint256)": EventFragment;
    "TransferToUser(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetFarmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferToPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferToUser"): EventFragment;
}

export interface AssetFarmedEventObject {
  asset: string;
  receiver: string;
  amount: BigNumber;
}
export type AssetFarmedEvent = TypedEvent<
  [string, string, BigNumber],
  AssetFarmedEventObject
>;

export type AssetFarmedEventFilter = TypedEventFilter<AssetFarmedEvent>;

export interface FarmerUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type FarmerUpdatedEvent = TypedEvent<
  [string, string],
  FarmerUpdatedEventObject
>;

export type FarmerUpdatedEventFilter = TypedEventFilter<FarmerUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferToPoolEventObject {
  asset: string;
  user: string;
  amount: BigNumber;
}
export type TransferToPoolEvent = TypedEvent<
  [string, string, BigNumber],
  TransferToPoolEventObject
>;

export type TransferToPoolEventFilter = TypedEventFilter<TransferToPoolEvent>;

export interface TransferToUserEventObject {
  asset: string;
  user: string;
  amount: BigNumber;
}
export type TransferToUserEvent = TypedEvent<
  [string, string, BigNumber],
  TransferToUserEventObject
>;

export type TransferToUserEventFilter = TypedEventFilter<TransferToUserEvent>;

export interface MarginPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarginPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressBook(overrides?: CallOverrides): Promise<[string]>;

    batchTransferToPool(
      _asset: PromiseOrValue<string>[],
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchTransferToUser(
      _asset: PromiseOrValue<string>[],
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    farm(
      _asset: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    farmer(overrides?: CallOverrides): Promise<[string]>;

    getStoredBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFarmer(
      _farmer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferToPool(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferToUser(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addressBook(overrides?: CallOverrides): Promise<string>;

  batchTransferToPool(
    _asset: PromiseOrValue<string>[],
    _user: PromiseOrValue<string>[],
    _amount: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchTransferToUser(
    _asset: PromiseOrValue<string>[],
    _user: PromiseOrValue<string>[],
    _amount: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  farm(
    _asset: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  farmer(overrides?: CallOverrides): Promise<string>;

  getStoredBalance(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFarmer(
    _farmer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferToPool(
    _asset: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferToUser(
    _asset: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressBook(overrides?: CallOverrides): Promise<string>;

    batchTransferToPool(
      _asset: PromiseOrValue<string>[],
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransferToUser(
      _asset: PromiseOrValue<string>[],
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    farm(
      _asset: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    farmer(overrides?: CallOverrides): Promise<string>;

    getStoredBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFarmer(
      _farmer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToPool(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToUser(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetFarmed(address,address,uint256)"(
      asset?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): AssetFarmedEventFilter;
    AssetFarmed(
      asset?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): AssetFarmedEventFilter;

    "FarmerUpdated(address,address)"(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): FarmerUpdatedEventFilter;
    FarmerUpdated(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): FarmerUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TransferToPool(address,address,uint256)"(
      asset?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferToPoolEventFilter;
    TransferToPool(
      asset?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferToPoolEventFilter;

    "TransferToUser(address,address,uint256)"(
      asset?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferToUserEventFilter;
    TransferToUser(
      asset?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferToUserEventFilter;
  };

  estimateGas: {
    addressBook(overrides?: CallOverrides): Promise<BigNumber>;

    batchTransferToPool(
      _asset: PromiseOrValue<string>[],
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchTransferToUser(
      _asset: PromiseOrValue<string>[],
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    farm(
      _asset: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    farmer(overrides?: CallOverrides): Promise<BigNumber>;

    getStoredBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFarmer(
      _farmer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferToPool(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferToUser(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchTransferToPool(
      _asset: PromiseOrValue<string>[],
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchTransferToUser(
      _asset: PromiseOrValue<string>[],
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    farm(
      _asset: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    farmer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStoredBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFarmer(
      _farmer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferToPool(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferToUser(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
