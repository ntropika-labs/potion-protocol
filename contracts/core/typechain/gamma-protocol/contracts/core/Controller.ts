/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace MarginVault {
  export type VaultStruct = {
    shortOtokens: PromiseOrValue<string>[];
    longOtokens: PromiseOrValue<string>[];
    collateralAssets: PromiseOrValue<string>[];
    shortAmounts: PromiseOrValue<BigNumberish>[];
    longAmounts: PromiseOrValue<BigNumberish>[];
    collateralAmounts: PromiseOrValue<BigNumberish>[];
  };

  export type VaultStructOutput = [
    string[],
    string[],
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber[]
  ] & {
    shortOtokens: string[];
    longOtokens: string[];
    collateralAssets: string[];
    shortAmounts: BigNumber[];
    longAmounts: BigNumber[];
    collateralAmounts: BigNumber[];
  };
}

export declare namespace Actions {
  export type ActionArgsStruct = {
    actionType: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    secondAddress: PromiseOrValue<string>;
    asset: PromiseOrValue<string>;
    vaultId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type ActionArgsStructOutput = [
    number,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    actionType: number;
    owner: string;
    secondAddress: string;
    asset: string;
    vaultId: BigNumber;
    amount: BigNumber;
    index: BigNumber;
    data: string;
  };
}

export interface ControllerInterface extends utils.Interface {
  functions: {
    "addressbook()": FunctionFragment;
    "calculator()": FunctionFragment;
    "callRestricted()": FunctionFragment;
    "canSettleAssets(address,address,address,uint256)": FunctionFragment;
    "donate(address,uint256)": FunctionFragment;
    "fullPauser()": FunctionFragment;
    "getAccountVaultCounter(address)": FunctionFragment;
    "getConfiguration()": FunctionFragment;
    "getNakedCap(address)": FunctionFragment;
    "getNakedPoolBalance(address)": FunctionFragment;
    "getPayout(address,uint256)": FunctionFragment;
    "getProceed(address,uint256)": FunctionFragment;
    "getVault(address,uint256)": FunctionFragment;
    "getVaultWithDetails(address,uint256)": FunctionFragment;
    "hasExpired(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isLiquidatable(address,uint256,uint256)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "isSettlementAllowed(address)": FunctionFragment;
    "operate((uint8,address,address,address,uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "partialPauser()": FunctionFragment;
    "pool()": FunctionFragment;
    "refreshConfiguration()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCallRestriction(bool)": FunctionFragment;
    "setFullPauser(address)": FunctionFragment;
    "setNakedCap(address,uint256)": FunctionFragment;
    "setOperator(address,bool)": FunctionFragment;
    "setPartialPauser(address)": FunctionFragment;
    "setSystemFullyPaused(bool)": FunctionFragment;
    "setSystemPartiallyPaused(bool)": FunctionFragment;
    "sync(address,uint256)": FunctionFragment;
    "systemFullyPaused()": FunctionFragment;
    "systemPartiallyPaused()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelist()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressbook"
      | "calculator"
      | "callRestricted"
      | "canSettleAssets"
      | "donate"
      | "fullPauser"
      | "getAccountVaultCounter"
      | "getConfiguration"
      | "getNakedCap"
      | "getNakedPoolBalance"
      | "getPayout"
      | "getProceed"
      | "getVault"
      | "getVaultWithDetails"
      | "hasExpired"
      | "initialize"
      | "isLiquidatable"
      | "isOperator"
      | "isSettlementAllowed"
      | "operate"
      | "oracle"
      | "owner"
      | "partialPauser"
      | "pool"
      | "refreshConfiguration"
      | "renounceOwnership"
      | "setCallRestriction"
      | "setFullPauser"
      | "setNakedCap"
      | "setOperator"
      | "setPartialPauser"
      | "setSystemFullyPaused"
      | "setSystemPartiallyPaused"
      | "sync"
      | "systemFullyPaused"
      | "systemPartiallyPaused"
      | "transferOwnership"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressbook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callRestricted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canSettleAssets",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fullPauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountVaultCounter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNakedCap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNakedPoolBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayout",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProceed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultWithDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasExpired",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSettlementAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "operate",
    values: [Actions.ActionArgsStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partialPauser",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refreshConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCallRestriction",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFullPauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNakedCap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartialPauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemFullyPaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemPartiallyPaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "sync",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "systemFullyPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemPartiallyPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addressbook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calculator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callRestricted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canSettleAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fullPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountVaultCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNakedCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNakedPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProceed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultWithDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasExpired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSettlementAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCallRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFullPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNakedCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartialPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemFullyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemPartiallyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemFullyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemPartiallyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "AccountOperatorUpdated(address,address,bool)": EventFragment;
    "CallExecuted(address,address,bytes)": EventFragment;
    "CallRestricted(bool)": EventFragment;
    "CollateralAssetDeposited(address,address,address,uint256,uint256)": EventFragment;
    "CollateralAssetWithdrawed(address,address,address,uint256,uint256)": EventFragment;
    "Donated(address,address,uint256)": EventFragment;
    "FullPauserUpdated(address,address)": EventFragment;
    "LongOtokenDeposited(address,address,address,uint256,uint256)": EventFragment;
    "LongOtokenWithdrawed(address,address,address,uint256,uint256)": EventFragment;
    "NakedCapUpdated(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PartialPauserUpdated(address,address)": EventFragment;
    "Redeem(address,address,address,address,uint256,uint256)": EventFragment;
    "ShortOtokenBurned(address,address,address,uint256,uint256)": EventFragment;
    "ShortOtokenMinted(address,address,address,uint256,uint256)": EventFragment;
    "SystemFullyPaused(bool)": EventFragment;
    "SystemPartiallyPaused(bool)": EventFragment;
    "VaultLiquidated(address,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "VaultOpened(address,uint256,uint256)": EventFragment;
    "VaultSettled(address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountOperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallRestricted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralAssetDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralAssetWithdrawed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FullPauserUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LongOtokenDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LongOtokenWithdrawed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NakedCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialPauserUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShortOtokenBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShortOtokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SystemFullyPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SystemPartiallyPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultSettled"): EventFragment;
}

export interface AccountOperatorUpdatedEventObject {
  accountOwner: string;
  operator: string;
  isSet: boolean;
}
export type AccountOperatorUpdatedEvent = TypedEvent<
  [string, string, boolean],
  AccountOperatorUpdatedEventObject
>;

export type AccountOperatorUpdatedEventFilter =
  TypedEventFilter<AccountOperatorUpdatedEvent>;

export interface CallExecutedEventObject {
  from: string;
  to: string;
  data: string;
}
export type CallExecutedEvent = TypedEvent<
  [string, string, string],
  CallExecutedEventObject
>;

export type CallExecutedEventFilter = TypedEventFilter<CallExecutedEvent>;

export interface CallRestrictedEventObject {
  isRestricted: boolean;
}
export type CallRestrictedEvent = TypedEvent<
  [boolean],
  CallRestrictedEventObject
>;

export type CallRestrictedEventFilter = TypedEventFilter<CallRestrictedEvent>;

export interface CollateralAssetDepositedEventObject {
  asset: string;
  accountOwner: string;
  from: string;
  vaultId: BigNumber;
  amount: BigNumber;
}
export type CollateralAssetDepositedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  CollateralAssetDepositedEventObject
>;

export type CollateralAssetDepositedEventFilter =
  TypedEventFilter<CollateralAssetDepositedEvent>;

export interface CollateralAssetWithdrawedEventObject {
  asset: string;
  AccountOwner: string;
  to: string;
  vaultId: BigNumber;
  amount: BigNumber;
}
export type CollateralAssetWithdrawedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  CollateralAssetWithdrawedEventObject
>;

export type CollateralAssetWithdrawedEventFilter =
  TypedEventFilter<CollateralAssetWithdrawedEvent>;

export interface DonatedEventObject {
  donator: string;
  asset: string;
  amount: BigNumber;
}
export type DonatedEvent = TypedEvent<
  [string, string, BigNumber],
  DonatedEventObject
>;

export type DonatedEventFilter = TypedEventFilter<DonatedEvent>;

export interface FullPauserUpdatedEventObject {
  oldFullPauser: string;
  newFullPauser: string;
}
export type FullPauserUpdatedEvent = TypedEvent<
  [string, string],
  FullPauserUpdatedEventObject
>;

export type FullPauserUpdatedEventFilter =
  TypedEventFilter<FullPauserUpdatedEvent>;

export interface LongOtokenDepositedEventObject {
  otoken: string;
  accountOwner: string;
  from: string;
  vaultId: BigNumber;
  amount: BigNumber;
}
export type LongOtokenDepositedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  LongOtokenDepositedEventObject
>;

export type LongOtokenDepositedEventFilter =
  TypedEventFilter<LongOtokenDepositedEvent>;

export interface LongOtokenWithdrawedEventObject {
  otoken: string;
  AccountOwner: string;
  to: string;
  vaultId: BigNumber;
  amount: BigNumber;
}
export type LongOtokenWithdrawedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  LongOtokenWithdrawedEventObject
>;

export type LongOtokenWithdrawedEventFilter =
  TypedEventFilter<LongOtokenWithdrawedEvent>;

export interface NakedCapUpdatedEventObject {
  collateral: string;
  cap: BigNumber;
}
export type NakedCapUpdatedEvent = TypedEvent<
  [string, BigNumber],
  NakedCapUpdatedEventObject
>;

export type NakedCapUpdatedEventFilter = TypedEventFilter<NakedCapUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PartialPauserUpdatedEventObject {
  oldPartialPauser: string;
  newPartialPauser: string;
}
export type PartialPauserUpdatedEvent = TypedEvent<
  [string, string],
  PartialPauserUpdatedEventObject
>;

export type PartialPauserUpdatedEventFilter =
  TypedEventFilter<PartialPauserUpdatedEvent>;

export interface RedeemEventObject {
  otoken: string;
  redeemer: string;
  receiver: string;
  collateralAsset: string;
  otokenBurned: BigNumber;
  payout: BigNumber;
}
export type RedeemEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface ShortOtokenBurnedEventObject {
  otoken: string;
  AccountOwner: string;
  from: string;
  vaultId: BigNumber;
  amount: BigNumber;
}
export type ShortOtokenBurnedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  ShortOtokenBurnedEventObject
>;

export type ShortOtokenBurnedEventFilter =
  TypedEventFilter<ShortOtokenBurnedEvent>;

export interface ShortOtokenMintedEventObject {
  otoken: string;
  AccountOwner: string;
  to: string;
  vaultId: BigNumber;
  amount: BigNumber;
}
export type ShortOtokenMintedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  ShortOtokenMintedEventObject
>;

export type ShortOtokenMintedEventFilter =
  TypedEventFilter<ShortOtokenMintedEvent>;

export interface SystemFullyPausedEventObject {
  isPaused: boolean;
}
export type SystemFullyPausedEvent = TypedEvent<
  [boolean],
  SystemFullyPausedEventObject
>;

export type SystemFullyPausedEventFilter =
  TypedEventFilter<SystemFullyPausedEvent>;

export interface SystemPartiallyPausedEventObject {
  isPaused: boolean;
}
export type SystemPartiallyPausedEvent = TypedEvent<
  [boolean],
  SystemPartiallyPausedEventObject
>;

export type SystemPartiallyPausedEventFilter =
  TypedEventFilter<SystemPartiallyPausedEvent>;

export interface VaultLiquidatedEventObject {
  liquidator: string;
  receiver: string;
  vaultOwner: string;
  auctionPrice: BigNumber;
  auctionStartingRound: BigNumber;
  collateralPayout: BigNumber;
  debtAmount: BigNumber;
  vaultId: BigNumber;
}
export type VaultLiquidatedEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  VaultLiquidatedEventObject
>;

export type VaultLiquidatedEventFilter = TypedEventFilter<VaultLiquidatedEvent>;

export interface VaultOpenedEventObject {
  accountOwner: string;
  vaultId: BigNumber;
  vaultType: BigNumber;
}
export type VaultOpenedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  VaultOpenedEventObject
>;

export type VaultOpenedEventFilter = TypedEventFilter<VaultOpenedEvent>;

export interface VaultSettledEventObject {
  accountOwner: string;
  oTokenAddress: string;
  to: string;
  payout: BigNumber;
  vaultId: BigNumber;
  vaultType: BigNumber;
}
export type VaultSettledEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  VaultSettledEventObject
>;

export type VaultSettledEventFilter = TypedEventFilter<VaultSettledEvent>;

export interface Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressbook(overrides?: CallOverrides): Promise<[string]>;

    calculator(overrides?: CallOverrides): Promise<[string]>;

    callRestricted(overrides?: CallOverrides): Promise<[boolean]>;

    canSettleAssets(
      _underlying: PromiseOrValue<string>,
      _strike: PromiseOrValue<string>,
      _collateral: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    donate(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fullPauser(overrides?: CallOverrides): Promise<[string]>;

    getAccountVaultCounter(
      _accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConfiguration(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    getNakedCap(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNakedPoolBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPayout(
      _otoken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProceed(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVault(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarginVault.VaultStructOutput]>;

    getVaultWithDetails(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarginVault.VaultStructOutput, BigNumber, BigNumber]>;

    hasExpired(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _addressBook: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isLiquidatable(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    isOperator(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSettlementAllowed(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operate(
      _actions: Actions.ActionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    partialPauser(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    refreshConfiguration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCallRestriction(
      _isRestricted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFullPauser(
      _fullPauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNakedCap(
      _collateral: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _isOperator: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPartialPauser(
      _partialPauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSystemFullyPaused(
      _fullyPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSystemPartiallyPaused(
      _partiallyPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sync(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    systemFullyPaused(overrides?: CallOverrides): Promise<[boolean]>;

    systemPartiallyPaused(overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelist(overrides?: CallOverrides): Promise<[string]>;
  };

  addressbook(overrides?: CallOverrides): Promise<string>;

  calculator(overrides?: CallOverrides): Promise<string>;

  callRestricted(overrides?: CallOverrides): Promise<boolean>;

  canSettleAssets(
    _underlying: PromiseOrValue<string>,
    _strike: PromiseOrValue<string>,
    _collateral: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  donate(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fullPauser(overrides?: CallOverrides): Promise<string>;

  getAccountVaultCounter(
    _accountOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConfiguration(
    overrides?: CallOverrides
  ): Promise<[string, string, string, string]>;

  getNakedCap(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNakedPoolBalance(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPayout(
    _otoken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProceed(
    _owner: PromiseOrValue<string>,
    _vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVault(
    _owner: PromiseOrValue<string>,
    _vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MarginVault.VaultStructOutput>;

  getVaultWithDetails(
    _owner: PromiseOrValue<string>,
    _vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[MarginVault.VaultStructOutput, BigNumber, BigNumber]>;

  hasExpired(
    _otoken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _addressBook: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isLiquidatable(
    _owner: PromiseOrValue<string>,
    _vaultId: PromiseOrValue<BigNumberish>,
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber]>;

  isOperator(
    _owner: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSettlementAllowed(
    _otoken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operate(
    _actions: Actions.ActionArgsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  partialPauser(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  refreshConfiguration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCallRestriction(
    _isRestricted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFullPauser(
    _fullPauser: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNakedCap(
    _collateral: PromiseOrValue<string>,
    _cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: PromiseOrValue<string>,
    _isOperator: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPartialPauser(
    _partialPauser: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSystemFullyPaused(
    _fullyPaused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSystemPartiallyPaused(
    _partiallyPaused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sync(
    _owner: PromiseOrValue<string>,
    _vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  systemFullyPaused(overrides?: CallOverrides): Promise<boolean>;

  systemPartiallyPaused(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelist(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addressbook(overrides?: CallOverrides): Promise<string>;

    calculator(overrides?: CallOverrides): Promise<string>;

    callRestricted(overrides?: CallOverrides): Promise<boolean>;

    canSettleAssets(
      _underlying: PromiseOrValue<string>,
      _strike: PromiseOrValue<string>,
      _collateral: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    donate(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fullPauser(overrides?: CallOverrides): Promise<string>;

    getAccountVaultCounter(
      _accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfiguration(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    getNakedCap(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNakedPoolBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayout(
      _otoken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceed(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MarginVault.VaultStructOutput>;

    getVaultWithDetails(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MarginVault.VaultStructOutput, BigNumber, BigNumber]>;

    hasExpired(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _addressBook: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isLiquidatable(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    isOperator(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSettlementAllowed(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operate(
      _actions: Actions.ActionArgsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    partialPauser(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    refreshConfiguration(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCallRestriction(
      _isRestricted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFullPauser(
      _fullPauser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNakedCap(
      _collateral: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _isOperator: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartialPauser(
      _partialPauser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemFullyPaused(
      _fullyPaused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemPartiallyPaused(
      _partiallyPaused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    sync(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    systemFullyPaused(overrides?: CallOverrides): Promise<boolean>;

    systemPartiallyPaused(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AccountOperatorUpdated(address,address,bool)"(
      accountOwner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      isSet?: null
    ): AccountOperatorUpdatedEventFilter;
    AccountOperatorUpdated(
      accountOwner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      isSet?: null
    ): AccountOperatorUpdatedEventFilter;

    "CallExecuted(address,address,bytes)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      data?: null
    ): CallExecutedEventFilter;
    CallExecuted(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      data?: null
    ): CallExecutedEventFilter;

    "CallRestricted(bool)"(isRestricted?: null): CallRestrictedEventFilter;
    CallRestricted(isRestricted?: null): CallRestrictedEventFilter;

    "CollateralAssetDeposited(address,address,address,uint256,uint256)"(
      asset?: PromiseOrValue<string> | null,
      accountOwner?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): CollateralAssetDepositedEventFilter;
    CollateralAssetDeposited(
      asset?: PromiseOrValue<string> | null,
      accountOwner?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): CollateralAssetDepositedEventFilter;

    "CollateralAssetWithdrawed(address,address,address,uint256,uint256)"(
      asset?: PromiseOrValue<string> | null,
      AccountOwner?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): CollateralAssetWithdrawedEventFilter;
    CollateralAssetWithdrawed(
      asset?: PromiseOrValue<string> | null,
      AccountOwner?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): CollateralAssetWithdrawedEventFilter;

    "Donated(address,address,uint256)"(
      donator?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null
    ): DonatedEventFilter;
    Donated(
      donator?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null
    ): DonatedEventFilter;

    "FullPauserUpdated(address,address)"(
      oldFullPauser?: PromiseOrValue<string> | null,
      newFullPauser?: PromiseOrValue<string> | null
    ): FullPauserUpdatedEventFilter;
    FullPauserUpdated(
      oldFullPauser?: PromiseOrValue<string> | null,
      newFullPauser?: PromiseOrValue<string> | null
    ): FullPauserUpdatedEventFilter;

    "LongOtokenDeposited(address,address,address,uint256,uint256)"(
      otoken?: PromiseOrValue<string> | null,
      accountOwner?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): LongOtokenDepositedEventFilter;
    LongOtokenDeposited(
      otoken?: PromiseOrValue<string> | null,
      accountOwner?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): LongOtokenDepositedEventFilter;

    "LongOtokenWithdrawed(address,address,address,uint256,uint256)"(
      otoken?: PromiseOrValue<string> | null,
      AccountOwner?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): LongOtokenWithdrawedEventFilter;
    LongOtokenWithdrawed(
      otoken?: PromiseOrValue<string> | null,
      AccountOwner?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): LongOtokenWithdrawedEventFilter;

    "NakedCapUpdated(address,uint256)"(
      collateral?: PromiseOrValue<string> | null,
      cap?: null
    ): NakedCapUpdatedEventFilter;
    NakedCapUpdated(
      collateral?: PromiseOrValue<string> | null,
      cap?: null
    ): NakedCapUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PartialPauserUpdated(address,address)"(
      oldPartialPauser?: PromiseOrValue<string> | null,
      newPartialPauser?: PromiseOrValue<string> | null
    ): PartialPauserUpdatedEventFilter;
    PartialPauserUpdated(
      oldPartialPauser?: PromiseOrValue<string> | null,
      newPartialPauser?: PromiseOrValue<string> | null
    ): PartialPauserUpdatedEventFilter;

    "Redeem(address,address,address,address,uint256,uint256)"(
      otoken?: PromiseOrValue<string> | null,
      redeemer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      collateralAsset?: null,
      otokenBurned?: null,
      payout?: null
    ): RedeemEventFilter;
    Redeem(
      otoken?: PromiseOrValue<string> | null,
      redeemer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      collateralAsset?: null,
      otokenBurned?: null,
      payout?: null
    ): RedeemEventFilter;

    "ShortOtokenBurned(address,address,address,uint256,uint256)"(
      otoken?: PromiseOrValue<string> | null,
      AccountOwner?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): ShortOtokenBurnedEventFilter;
    ShortOtokenBurned(
      otoken?: PromiseOrValue<string> | null,
      AccountOwner?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): ShortOtokenBurnedEventFilter;

    "ShortOtokenMinted(address,address,address,uint256,uint256)"(
      otoken?: PromiseOrValue<string> | null,
      AccountOwner?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): ShortOtokenMintedEventFilter;
    ShortOtokenMinted(
      otoken?: PromiseOrValue<string> | null,
      AccountOwner?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      vaultId?: null,
      amount?: null
    ): ShortOtokenMintedEventFilter;

    "SystemFullyPaused(bool)"(isPaused?: null): SystemFullyPausedEventFilter;
    SystemFullyPaused(isPaused?: null): SystemFullyPausedEventFilter;

    "SystemPartiallyPaused(bool)"(
      isPaused?: null
    ): SystemPartiallyPausedEventFilter;
    SystemPartiallyPaused(isPaused?: null): SystemPartiallyPausedEventFilter;

    "VaultLiquidated(address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      liquidator?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      vaultOwner?: PromiseOrValue<string> | null,
      auctionPrice?: null,
      auctionStartingRound?: null,
      collateralPayout?: null,
      debtAmount?: null,
      vaultId?: null
    ): VaultLiquidatedEventFilter;
    VaultLiquidated(
      liquidator?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      vaultOwner?: PromiseOrValue<string> | null,
      auctionPrice?: null,
      auctionStartingRound?: null,
      collateralPayout?: null,
      debtAmount?: null,
      vaultId?: null
    ): VaultLiquidatedEventFilter;

    "VaultOpened(address,uint256,uint256)"(
      accountOwner?: PromiseOrValue<string> | null,
      vaultId?: null,
      vaultType?: PromiseOrValue<BigNumberish> | null
    ): VaultOpenedEventFilter;
    VaultOpened(
      accountOwner?: PromiseOrValue<string> | null,
      vaultId?: null,
      vaultType?: PromiseOrValue<BigNumberish> | null
    ): VaultOpenedEventFilter;

    "VaultSettled(address,address,address,uint256,uint256,uint256)"(
      accountOwner?: PromiseOrValue<string> | null,
      oTokenAddress?: PromiseOrValue<string> | null,
      to?: null,
      payout?: null,
      vaultId?: null,
      vaultType?: PromiseOrValue<BigNumberish> | null
    ): VaultSettledEventFilter;
    VaultSettled(
      accountOwner?: PromiseOrValue<string> | null,
      oTokenAddress?: PromiseOrValue<string> | null,
      to?: null,
      payout?: null,
      vaultId?: null,
      vaultType?: PromiseOrValue<BigNumberish> | null
    ): VaultSettledEventFilter;
  };

  estimateGas: {
    addressbook(overrides?: CallOverrides): Promise<BigNumber>;

    calculator(overrides?: CallOverrides): Promise<BigNumber>;

    callRestricted(overrides?: CallOverrides): Promise<BigNumber>;

    canSettleAssets(
      _underlying: PromiseOrValue<string>,
      _strike: PromiseOrValue<string>,
      _collateral: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donate(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fullPauser(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountVaultCounter(
      _accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getNakedCap(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNakedPoolBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayout(
      _otoken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceed(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWithDetails(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasExpired(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _addressBook: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isLiquidatable(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSettlementAllowed(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operate(
      _actions: Actions.ActionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    partialPauser(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    refreshConfiguration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCallRestriction(
      _isRestricted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFullPauser(
      _fullPauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNakedCap(
      _collateral: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _isOperator: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPartialPauser(
      _partialPauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSystemFullyPaused(
      _fullyPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSystemPartiallyPaused(
      _partiallyPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sync(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    systemFullyPaused(overrides?: CallOverrides): Promise<BigNumber>;

    systemPartiallyPaused(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelist(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressbook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callRestricted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canSettleAssets(
      _underlying: PromiseOrValue<string>,
      _strike: PromiseOrValue<string>,
      _collateral: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donate(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fullPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountVaultCounter(
      _accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfiguration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNakedCap(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNakedPoolBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayout(
      _otoken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProceed(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultWithDetails(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasExpired(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _addressBook: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isLiquidatable(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSettlementAllowed(
      _otoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operate(
      _actions: Actions.ActionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partialPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refreshConfiguration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCallRestriction(
      _isRestricted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFullPauser(
      _fullPauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNakedCap(
      _collateral: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _isOperator: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPartialPauser(
      _partialPauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSystemFullyPaused(
      _fullyPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSystemPartiallyPaused(
      _partiallyPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sync(
      _owner: PromiseOrValue<string>,
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    systemFullyPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemPartiallyPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
