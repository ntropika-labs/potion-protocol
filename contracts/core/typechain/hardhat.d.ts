/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "CriteriaManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CriteriaManager__factory>;
    getContractFactory(
      name: "CurveManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveManager__factory>;
    getContractFactory(
      name: "ICriteriaManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICriteriaManager__factory>;
    getContractFactory(
      name: "ICurveManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurveManager__factory>;
    getContractFactory(
      name: "AddressBookInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressBookInterface__factory>;
    getContractFactory(
      name: "MarginCalculatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarginCalculatorInterface__factory>;
    getContractFactory(
      name: "ControllerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerInterface__factory>;
    getContractFactory(
      name: "OracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterface__factory>;
    getContractFactory(
      name: "OtokenFactoryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OtokenFactoryInterface__factory>;
    getContractFactory(
      name: "OtokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OtokenInterface__factory>;
    getContractFactory(
      name: "WhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistInterface__factory>;
    getContractFactory(
      name: "PotionLiquidityPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotionLiquidityPool__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Base__factory>;
    getContractFactory(
      name: "ERC20NS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20NS__factory>;
    getContractFactory(
      name: "FaucetNonStandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FaucetNonStandardToken__factory>;
    getContractFactory(
      name: "FaucetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FaucetToken__factory>;
    getContractFactory(
      name: "NonStandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonStandardToken__factory>;
    getContractFactory(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardToken__factory>;
    getContractFactory(
      name: "PotionLiquidityPoolUpgradeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotionLiquidityPoolUpgradeTest__factory>;
    getContractFactory(
      name: "PotionTestUSD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PotionTestUSD__factory>;
    getContractFactory(
      name: "SampleUnderlyingToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleUnderlyingToken__factory>;
    getContractFactory(
      name: "AddressBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressBook__factory>;
    getContractFactory(
      name: "Controller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Controller__factory>;
    getContractFactory(
      name: "MarginCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarginCalculator__factory>;
    getContractFactory(
      name: "MarginPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarginPool__factory>;
    getContractFactory(
      name: "Oracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Oracle__factory>;
    getContractFactory(
      name: "Otoken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Otoken__factory>;
    getContractFactory(
      name: "OtokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OtokenFactory__factory>;
    getContractFactory(
      name: "Whitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Whitelist__factory>;
    getContractFactory(
      name: "AddressBookInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressBookInterface__factory>;
    getContractFactory(
      name: "AggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorInterface__factory>;
    getContractFactory(
      name: "CalleeInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CalleeInterface__factory>;
    getContractFactory(
      name: "ERC20Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Interface__factory>;
    getContractFactory(
      name: "MarginCalculatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarginCalculatorInterface__factory>;
    getContractFactory(
      name: "MarginPoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarginPoolInterface__factory>;
    getContractFactory(
      name: "OpynPricerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpynPricerInterface__factory>;
    getContractFactory(
      name: "OracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterface__factory>;
    getContractFactory(
      name: "OtokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OtokenInterface__factory>;
    getContractFactory(
      name: "WhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistInterface__factory>;
    getContractFactory(
      name: "MockAddressBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAddressBook__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOracle__factory>;
    getContractFactory(
      name: "MockOtoken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOtoken__factory>;
    getContractFactory(
      name: "MockWhitelistModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockWhitelistModule__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeSafe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeSafe__factory>;
    getContractFactory(
      name: "OwnedUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnedUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "UpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeabilityProxy__factory>;
    getContractFactory(
      name: "Spawn",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Spawn__factory>;
    getContractFactory(
      name: "ChainLinkPricer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainLinkPricer__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "CriteriaManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CriteriaManager>;
    getContractAt(
      name: "CurveManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveManager>;
    getContractAt(
      name: "ICriteriaManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICriteriaManager>;
    getContractAt(
      name: "ICurveManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurveManager>;
    getContractAt(
      name: "AddressBookInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressBookInterface>;
    getContractAt(
      name: "MarginCalculatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarginCalculatorInterface>;
    getContractAt(
      name: "ControllerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ControllerInterface>;
    getContractAt(
      name: "OracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleInterface>;
    getContractAt(
      name: "OtokenFactoryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OtokenFactoryInterface>;
    getContractAt(
      name: "OtokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OtokenInterface>;
    getContractAt(
      name: "WhitelistInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistInterface>;
    getContractAt(
      name: "PotionLiquidityPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotionLiquidityPool>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Base>;
    getContractAt(
      name: "ERC20NS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20NS>;
    getContractAt(
      name: "FaucetNonStandardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FaucetNonStandardToken>;
    getContractAt(
      name: "FaucetToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FaucetToken>;
    getContractAt(
      name: "NonStandardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonStandardToken>;
    getContractAt(
      name: "StandardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardToken>;
    getContractAt(
      name: "PotionLiquidityPoolUpgradeTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotionLiquidityPoolUpgradeTest>;
    getContractAt(
      name: "PotionTestUSD",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PotionTestUSD>;
    getContractAt(
      name: "SampleUnderlyingToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleUnderlyingToken>;
    getContractAt(
      name: "AddressBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressBook>;
    getContractAt(
      name: "Controller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Controller>;
    getContractAt(
      name: "MarginCalculator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarginCalculator>;
    getContractAt(
      name: "MarginPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarginPool>;
    getContractAt(
      name: "Oracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Oracle>;
    getContractAt(
      name: "Otoken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Otoken>;
    getContractAt(
      name: "OtokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OtokenFactory>;
    getContractAt(
      name: "Whitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Whitelist>;
    getContractAt(
      name: "AddressBookInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressBookInterface>;
    getContractAt(
      name: "AggregatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorInterface>;
    getContractAt(
      name: "CalleeInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CalleeInterface>;
    getContractAt(
      name: "ERC20Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Interface>;
    getContractAt(
      name: "MarginCalculatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarginCalculatorInterface>;
    getContractAt(
      name: "MarginPoolInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarginPoolInterface>;
    getContractAt(
      name: "OpynPricerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OpynPricerInterface>;
    getContractAt(
      name: "OracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleInterface>;
    getContractAt(
      name: "OtokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OtokenInterface>;
    getContractAt(
      name: "WhitelistInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistInterface>;
    getContractAt(
      name: "MockAddressBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAddressBook>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOracle>;
    getContractAt(
      name: "MockOtoken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOtoken>;
    getContractAt(
      name: "MockWhitelistModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockWhitelistModule>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "OwnableUpgradeSafe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeSafe>;
    getContractAt(
      name: "OwnedUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnedUpgradeabilityProxy>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "UpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeabilityProxy>;
    getContractAt(
      name: "Spawn",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Spawn>;
    getContractAt(
      name: "ChainLinkPricer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainLinkPricer>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
