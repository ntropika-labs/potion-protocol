import { BigInt, Address, Bytes } from "@graphprotocol/graph-ts";

export const COLLATERAL_PRECISION_DECIMALS: i32 = 6;
export const COLLATERAL_PRECISION_BIG_INT = BigInt.fromI32(10).pow(
  COLLATERAL_PRECISION_DECIMALS as u8
);
export const STRIKE_PRECISION_DECIMALS: i32 = 8;
export const STRIKE_PRECISION_BIG_INT = BigInt.fromI32(10).pow(
  STRIKE_PRECISION_DECIMALS as u8
);
export const CURVE_PRECISION_BIG_INT = BigInt.fromI32(10).pow(18);

export const BIGINT_ZERO = BigInt.fromI32(0);
export const BIGINT_ONE = BigInt.fromI32(1);
export const BIGINT_ONE_HUNDRED = BigInt.fromI32(100);
// Format 100 as a collateral to manage the 6 decimals
export const BIGINT_ONE_HUNDRED_AS_COLLATERAL = BIGINT_ONE_HUNDRED.times(
  COLLATERAL_PRECISION_BIG_INT
);

export const MOCKED_LP = Address.fromString(
  "0x0000000000000000000000000000000000000001"
);
export const MOCKED_CURVE_ID = Bytes.fromHexString(
  "0x0000000000000000000000000000000000000010"
);
export const MOCKED_CRITERIA_ID = Bytes.fromHexString(
  "0x0000000000000000000000000000000000000100"
);
export const MOCKED_CRITERIA_A_ID = Bytes.fromHexString(
  "0x0000000000000000000000000000000000000200"
);
export const MOCKED_CRITERIA_B_ID = Bytes.fromHexString(
  "0x0000000000000000000000000000000000000300"
);
export const MOCKED_CRITERIA_SET_ID = Bytes.fromHexString(
  "0x0000000000000000000000000000000000001000"
);
export const MOCKED_TOKEN_A_ID = Bytes.fromHexString(
  "0x0000000000000000000000000000000000010000"
);
export const MOCKED_TOKEN_B_ID = Bytes.fromHexString(
  "0x0000000000000000000000000000000000020000"
);
export const MOCKED_TOKEN_C_ID = Bytes.fromHexString(
  "0x0000000000000000000000000000000000030000"
);
export const MOCKED_OTOKEN_ID = Bytes.fromHexString(
  "0x0000000000000000000000000000000000100000"
);
