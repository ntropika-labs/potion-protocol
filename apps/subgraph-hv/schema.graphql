### STILL WIP

type Token @entity(immutable: true) {
  id: Bytes!
  name: String!
  symbol: String!
  decimals: BigInt!
}

# we could have a field deposits and withdrawals to track all the deposits and withdrawals for the given block
type Block @entity(immutable: true) {
  id: Bytes!
  number: BigInt!
  timestamp: BigInt!
}

# ActionsAdded event will be emitted by the vault
type HedgingVault @entity {
  id: Bytes!
  action: PotionBuyAction
  # RoleGranted() from roles manager upgradeable
  #operator: Bytes!
  #admin: Bytes!
  #strategist: Bytes!
  shareToken: Token!
  underlying: Token!
  totalShares: BigInt!
  #investors: [Investor!] @derivedFrom(field: "user")
  lastUnderlyingsInvested: BigInt
  lastUnderlyingToShareRate: BigInt
  lastShareToUnderlyingRate: BigInt
  currentRound: BigInt
  # PotionBuyAction settings - we might create a separate entity for this
  rounds: [Round!] @derivedFrom(field: "vault")
}

# MaxPremiumPercentageChanged() to listen and create the entity
type PotionBuyAction @entity {
  id: Bytes!
  vault: HedgingVault
  cycleDurationSecs: BigInt!
  hedgingRate: BigInt!
  maxPremiumPercentage: BigInt!
  maxSwapDurationSecs: BigInt!
  nextCycleStartTimestamp: BigInt!
  premiumSlippage: BigInt!
  strikePercentage: BigInt!
  swapSlippage: BigInt!
}

type Round @entity {
  id: Bytes!
  vault: HedgingVault!
  roundNumber: BigInt!
  #NextRound()
  underlyingToShareRate: BigInt
  shareToUnderlyingRate: BigInt
  # VaultPositionExited()
  totalUnderlyingsAtRoundEnd: BigInt
  # VaultPositionEntered()
  underlyingsInvested: BigInt
  # otokenPremium: BigDecimal!
  # uniswapEnterFees: BigDecimal!
  # uniswapExitFees: BigDecimal!
  depositTickets: [DepositTicket!]!
  withdrawalTickets: [WithdrawalTicket!]!
  # VaultPositionExited() VaultPositionEntered()
  blockEntered: Block
  blockExited: Block
  deposit: Deposit
  withdrawal: Withdrawal
}

# Receiver
type Investor @entity {
  id: Bytes!
  vaults: [HedgingVault!]!
  user: Bytes!
  depositTickets: [DepositTicket!] @derivedFrom(field: "investor")
  withdrawalTickets: [WithdrawalTicket!] @derivedFrom(field: "investor")
}

#InvestmentVault contract
type Deposit @entity {
  id: Bytes!
  round: Round!
  amount: BigInt!
  shareAmount: BigInt!
  block: Block!
  tx: Bytes!
}

#InvestmentVault contract
type Withdrawal @entity {
  id: Bytes!
  round: Round!
  amount: BigInt!
  shareAmount: BigInt!
  block: Block!
  tx: Bytes!
}

type DepositTicket @entity {
  id: Bytes!
  sender: Bytes!
  investor: Investor!
  round: Round!
  amount: BigInt!
  amountRemaining: BigInt!
  amountRedeemed: BigInt!
  shares: BigInt! # calculated at nextRound() multiplying amount with the round underlyingToShareRate
  sharesRemaining: BigInt!
  sharesRedeemed: BigInt!
  block: Block!
  tx: Bytes!
}

type WithdrawalTicket @entity {
  id: Bytes!
  sender: Bytes!
  investor: Investor!
  round: Round!
  amount: BigInt!
  amountRedeemed: BigInt!
  amountRemaining: BigInt!
  underlyings: BigInt! # calculated at nextRound() multiplying amount with the round shareToUnderlyingRate
  underlyingsRedeemed: BigInt!
  underlyingsRemaining: BigInt!
  block: Block!
  tx: Bytes!
}
