### STILL WIP

type Token @entity(immutable: true) {
  id: Bytes!
  name: String!
  symbol: String!
  decimals: BigInt!
}

# we could have a field deposits and withdrawals to track all the deposits and withdrawals for the given block
type Block @entity(immutable: true) {
  id: Bytes!
  number: BigInt!
  timestamp: BigInt!
}

# ActionsAdded event will be emitted by the vault
type HedgingVault @entity {
  id: Bytes!
  action: PotionBuyAction
  # RoleGranted() from roles manager upgradeable
  #operator: Bytes!
  #admin: Bytes!
  #strategist: Bytes!
  shareToken: Token!
  asset: Token!
  totalAssets: BigInt!
  #investors: [Investor!] @derivedFrom(field: "user")
  lastAssetsInvested: BigInt
  lastAssetToShareRate: BigInt
  lastShareToAssetRate: BigInt
  currentRound: BigInt
  # PotionBuyAction settings - we might create a separate entity for this
  rounds: [Round!] @derivedFrom(field: "vault")
}

# MaxPremiumPercentageChanged() to listen and create the entity
type PotionBuyAction @entity {
  id: Bytes!
  vault: HedgingVault
  cycleDurationSecs: BigInt!
  hedgingRate: BigInt!
  maxPremiumPercentage: BigInt!
  maxSwapDurationSecs: BigInt!
  nextCycleStartTimestamp: BigInt!
  premiumSlippage: BigInt!
  strikePercentage: BigInt!
  swapSlippage: BigInt!
}

type Round @entity {
  id: Bytes!
  vault: HedgingVault!
  roundNumber: BigInt!
  #NextRound()
  assetToShareRate: BigInt
  shareToAssetRate: BigInt
  # VaultPositionExited()
  totalAssetsAtRoundEnd: BigInt
  # VaultPositionEntered()
  assetsInvested: BigInt
  # otokenPremium: BigDecimal!
  # uniswapEnterFees: BigDecimal!
  # uniswapExitFees: BigDecimal!
  depositRequests: [DepositRequest!]!
  withdrawalRequests: [WithdrawalRequest!]!
  # VaultPositionExited() VaultPositionEntered()
  blockEntered: Block
  blockExited: Block
  deposit: Deposit
  withdrawal: Withdrawal

}

# Receiver
type Investor @entity {
  id: Bytes!
  # maybe it is better to add a join entity VaultInvestors?
  vaults: [HedgingVault!]!
  user: Bytes!
  depositRequests: [DepositRequest!] @derivedFrom(field: "investor")
  withdrawalRequests: [WithdrawalRequest!] @derivedFrom(field: "investor")
}

#InvestmentVault contract
type Deposit @entity {
  id: Bytes!
  round: Round!
  amount: BigInt!
  shareAmount: BigInt!
  block: Block!
  tx: Bytes!
}

#InvestmentVault contract
type Withdrawal @entity {
  id: Bytes!
  round: Round!
  amount: BigInt!
  shareAmount: BigInt!
  block: Block!
  tx: Bytes!
}

# we can track this by listening to transferSingle and transferBatch events from the 1155 contract RoundsInputVault
# _deposit() vault with receipt in the OutputVault contract
type DepositRequest @entity {
  id: Bytes!
  sender: Bytes!
  investor: Investor!
  round: Round!
  amount: BigInt!
  amountRedeemed: BigInt!
  shares: BigInt! #we get this at the end of the round by multiplying the amount by the share ratio
  remainingShares: BigInt!
  block: Block!
  tx: Bytes!
}

# we can track this by listening to transferSingle and transferBatch events from the 1155 contract RoundsOutputVault
# _deposit()  with receipt in the OnputVault contract
type WithdrawalRequest @entity {
  id: Bytes!
  sender: Bytes!
  investor: Investor!
  round: Round!
  amount: BigInt!
  assets: BigInt! #we get this at the end of the round by multiplying the amount by the share ratio
  amountRedeemed: BigInt!
  remainingAssets: BigInt!
  block: Block!
  tx: Bytes!
}
