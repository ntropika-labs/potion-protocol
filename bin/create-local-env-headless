#!/usr/bin/env bash

#set -Eeuo pipefail
#set -o pipefail  # trace ERR through pipes
set -o errtrace  # trace ERR through 'time command' and other functions
set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
set -o errexit   ## set -e : exit the script if any statement returns a non-true return value

trap cleanup SIGINT SIGTERM ERR

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] [-n] [-r]
Handle the docker compose environment
Available options:
-h, --help                    Print this help and exit
-v, --verbose                 Print script debug info
-i, --init                    Initialize the environment and force deploy containers
-f, --force                   Force deploy containers [default: true]
-n, --no-redeploy             Do not deploy containers if already available [default: false]
-r, --redeploy boolean        When true containers are recreated, when false use existing environment if any
-v, --verbose boolean         When true Print script debug info
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR
  # script cleanup here
  docker compose down -v
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  force=0
  no_redeploy=0
  init_environment=0

  while :; do
    case "${1-}" in
      -h | --help)
        usage
        ;;
      -v | --verbose)
        set -x
        ;;
      --no-color)
        NO_COLOR=1
        ;;
      -i | --init)
        force=1
        init_environment=1
        ;;
      -f | --force) # force flag
        force=1
        ;;
      -n | --no-redeploy) # no_redeploy flag
        no_redeploy=1
        ;;
      -r=*|--redeploy=*) # redeploy param
        local param="${1#*=}"
        if [[ "$param" == "true" ]]; then
          force=1
        elif [[ "$param" == "false" ]]; then
          no_redeploy=1
        fi
        ;;
      -v=*|--verbose=*) # verbose param
        set -x
        ;;
      -?*)
        die "Unknown option: $1"
        ;;
      *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ "${force-}" -eq 1 ]] && [[ "${no_redeploy-}" -eq 1 ]] && die "You cannot use --force and --no-redeploy at once"
  #[[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  return 0
}

check_environment_running() {
  msg "${ORANGE}Checking if environment is up...${NOFORMAT}"
  local running_containers="$(docker compose ps --services --filter "status=running")"
  local total_containers="$(docker compose ps --services --filter "status=running" | wc -l)"
  local services="$(docker compose ps --services)"

  if [ "$running_containers" != "$services" ]; then
      msg "${RED}Following services are not running:"
      # Bash specific
      comm -13 <(sort <<<"$running_containers") <(sort <<<"$services")

      msg "${NOFORMAT}"
  elif [ $total_containers -ne 4 ]; then
      local offline_services=(4 - $total_containers)
      msg "${RED}Some services are not running:"
      msg "${RED}- total services not running: ${offline_services} ${NOFORMAT}"
  else
      msg "${GREEN}All services are running${NOFORMAT}"

      is_environment_running=1
      return
  fi

  is_environment_running=0
  return
}

check_db_seed() {
  local ganache_volume_folder="$(cat .env | grep -v '#' | sed -e 's/^GANACHE_VOLUME=\(.*\)$/\1/;t;d' | sed 's/\"//g')"
  # strip only '/opt/' from the string
  local ganache_db_name="$(cat .env | grep -v '#' | sed -e 's/^DATABASE_PATH=\(.*\)$/\1/;t;d' | sed 's/\(\"\|\/opt\/\)//g')"
  local ganache_db_file="${ganache_volume_folder}/${ganache_db_name}/LOG"

  if [[ -s "$ganache_db_file" ]]; then
    msg "${GREEN}- - Ganache database already seeded${NOFORMAT}"
    is_db_seeded=1

    return
  fi

  msg "${ORANGE}- - Ganache database not seeded${NOFORMAT}"
  is_db_seeded=0
  return
}

spin_up_environment() {
  msg "${GREEN}Starting local environment...${NOFORMAT}"

  # Remove the existing environment if any and all of its volumes
  docker compose down -v
  msg "${GREEN}- Removed old containers and their volumes ${NOFORMAT}"

  msg "${GREEN}- Run and deploy the contracts and subgraph on local ganache ${NOFORMAT}"
  # Spin up the docker environment containers listed in docker-compose.yml file and flag volumes as ephemeral by using -V
  docker compose up -d -V
  msg "${GREEN}- - Containers started ${NOFORMAT}"

  # ./bin/wait-for-tcp localhost:8545
  msg "${GREEN}- - Ganache is ready ${NOFORMAT}"
  sleep 2

  if [[ $init_environment -eq 1 ]]; then
    local ganache_db_path="$(cat .env | grep -v '#' | sed -e 's/^DATABASE_PATH=\(.*\)$/\1/;t;d')"
    msg "${ORANGE}- - Removing db data${NOFORMAT}"

    docker compose exec ganache rm -rf "${ganache_db_path}"

    msg "${GREEN}- - Removed db data ${NOFORMAT}"

    is_db_seeded=0
  fi
  if [[ $is_db_seeded -eq 0 ]]; then
    msg "${ORANGE}- - Seeding Ganache database${NOFORMAT}"

    yarn nx run @potion-protocol/core:deploy-local.hedging
    msg "${GREEN}- - Potion smart contracts deployed ${NOFORMAT}"

    yarn nx run @potion-protocol/hedging-vault:deploy-local
    msg "${GREEN}- - Hedging contracts deployed ${NOFORMAT}"
  fi
  if [[ $is_db_seeded -eq 0 || $init_environment -eq 1 ]]; then
    yarn nx run potion-subgraph:prepare-local
    msg "${GREEN}- - Potion subgraph.yaml is ready ${NOFORMAT}"

    yarn nx run potion-subgraph:codegen
    msg "${GREEN}- - Subgraph codegen ${NOFORMAT}"
  fi

  sleep 10
  msg "${GREEN}- - graph-node is ready ${NOFORMAT}"

  yarn nx run potion-subgraph:create-local
  msg "${GREEN}- - Potion subgraph created ${NOFORMAT}"

  yarn nx run potion-subgraph:deploy-local --version-label 0.0.1
  msg "${GREEN}- - Potion subgraph deployed ${NOFORMAT}"

  if [[ $is_db_seeded -eq 0 ]]; then

    yarn nx run subgraph-queries:codegen
    msg "${GREEN}- Subgraph queries generated ${NOFORMAT}"
  fi

  return 0
}

parse_params "$@"
setup_colors

# script logic here
msg "${YELLOW}Read parameters:${NOFORMAT}"
msg "- force: ${force}"
msg "- no_redeploy: ${no_redeploy}"


cd "${script_dir}/.."
msg "${YELLOW} - Moved to root folder: $PWD"
check_environment_running
check_db_seed

if [[ $is_environment_running -eq 0 || $force -eq 1 ]]; then
  spin_up_environment
elif [[ $no_redeploy -eq 0 ]]; then
  spin_up_environment
fi
