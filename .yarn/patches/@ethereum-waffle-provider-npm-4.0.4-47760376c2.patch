diff --git a/dist/cjs/revertString.js b/dist/cjs/revertString.js
index f01a358c34fe152ca38e23e2f7b068df99027e0d..968b37d54353b45f4a47f6f5a529f5d415a53227 100644
--- a/dist/cjs/revertString.js
+++ b/dist/cjs/revertString.js
@@ -9,16 +9,23 @@ const getHardhatErrorString = (callRevertError) => {
     const tryDecode = (error) => {
         var _a;
         const stackTrace = error === null || error === void 0 ? void 0 : error.stackTrace;
-        const errorBuffer = (_a = stackTrace === null || stackTrace === void 0 ? void 0 : stackTrace[stackTrace.length - 1].message) === null || _a === void 0 ? void 0 : _a.value;
+        const errorBuffer =
+            (_a = stackTrace === null || stackTrace === void 0 ? void 0 : stackTrace[stackTrace.length - 1].message) ===
+                null || _a === void 0
+                ? void 0
+                : _a.value;
         if (errorBuffer) {
-            return '0x' + errorBuffer.toString('hex');
+            return "0x" + errorBuffer.toString("hex");
         }
     };
     return (_a = tryDecode(callRevertError)) !== null && _a !== void 0 ? _a : tryDecode(callRevertError.error);
 };
 const getGanacheErrorString = (callRevertError) => {
     var _a;
-    return (_a = callRevertError === null || callRevertError === void 0 ? void 0 : callRevertError.error) === null || _a === void 0 ? void 0 : _a.data;
+    return (_a = callRevertError === null || callRevertError === void 0 ? void 0 : callRevertError.error) === null ||
+        _a === void 0
+        ? void 0
+        : _a.data.data;
 };
 /* eslint-disable no-control-regex */
 /**
@@ -27,49 +34,52 @@ const getGanacheErrorString = (callRevertError) => {
  */
 const decodeRevertString = (callRevertError) => {
     var _a;
-    const errorString = (_a = getHardhatErrorString(callRevertError)) !== null && _a !== void 0 ? _a : getGanacheErrorString(callRevertError);
+    const errorString =
+        (_a = getHardhatErrorString(callRevertError)) !== null && _a !== void 0
+            ? _a
+            : getGanacheErrorString(callRevertError);
     if (errorString === undefined) {
-        return '';
+        return "";
     }
     /**
      * https://ethereum.stackexchange.com/a/66173
      * Numeric.toHexString(Hash.sha3("Error(string)".getBytes())).substring(0, 10)
      */
-    const errorMethodId = '0x08c379a0';
+    const errorMethodId = "0x08c379a0";
     if (errorString.startsWith(errorMethodId)) {
-        return (0, utils_1.toUtf8String)('0x' + errorString.substring(138))
-            .replace(/\x00/g, ''); // Trim null characters.
+        return (0, utils_1.toUtf8String)("0x" + errorString.substring(138)).replace(/\x00/g, ""); // Trim null characters.
     }
-    const panicCodeId = '0x4e487b71';
+    const panicCodeId = "0x4e487b71";
     if (errorString.startsWith(panicCodeId)) {
         let panicCode = parseInt(errorString.substring(panicCodeId.length), 16).toString(16);
         if (panicCode.length % 2 !== 0) {
-            panicCode = '0' + panicCode;
+            panicCode = "0" + panicCode;
         }
-        if (['00', '01'].includes(panicCode)) {
-            return ''; // For backwards compatibility;
+        if (["00", "01"].includes(panicCode)) {
+            return ""; // For backwards compatibility;
         }
-        return 'panic code 0x' + panicCode;
+        return "panic code 0x" + panicCode;
     }
-    return '';
+    return "";
 };
 exports.decodeRevertString = decodeRevertString;
 const appendRevertString = async (etherProvider, receipt) => {
     if (receipt && parseInt(receipt.status) === 0) {
-        (0, log_1.log)('Got transaction receipt of a failed transaction. Attempting to replay to obtain revert string.');
+        (0, log_1.log)(
+            "Got transaction receipt of a failed transaction. Attempting to replay to obtain revert string."
+        );
         try {
             const tx = await etherProvider.getTransaction(receipt.transactionHash);
-            (0, log_1.log)('Running transaction as a call:');
+            (0, log_1.log)("Running transaction as a call:");
             (0, log_1.log)(tx);
             if (tx.maxPriorityFeePerGas || tx.maxFeePerGas) {
-                (0, log_1.log)('London hardfork detected, stripping gasPrice');
-                delete tx['gasPrice'];
+                (0, log_1.log)("London hardfork detected, stripping gasPrice");
+                delete tx["gasPrice"];
             }
             // Run the transaction as a query. It works differently in Ethers, a revert code is included.
             await etherProvider.call(tx, tx.blockNumber);
-        }
-        catch (error) {
-            (0, log_1.log)('Caught error, attempting to extract revert string from:');
+        } catch (error) {
+            (0, log_1.log)("Caught error, attempting to extract revert string from:");
             (0, log_1.log)(error);
             receipt.revertString = (0, exports.decodeRevertString)(error);
             (0, log_1.log)(`Extracted revert string: "${receipt.revertString}"`);
@@ -95,7 +105,7 @@ const injectRevertString = (provider) => {
     return new Proxy(provider, {
         get(target, prop, receiver) {
             const original = target[prop];
-            if (typeof original !== 'function') {
+            if (typeof original !== "function") {
                 // Some non-method property - returned as-is.
                 return original;
             }
@@ -105,8 +115,7 @@ const injectRevertString = (provider) => {
                 // Get a function result from the original provider.
                 const originalResult = original.apply(target, args);
                 // Every method other than `provider.request()` left intact.
-                if (prop !== 'request')
-                    return originalResult;
+                if (prop !== "request") return originalResult;
                 const method = (_a = args[0]) === null || _a === void 0 ? void 0 : _a.method;
                 /**
                  * A method can be:
@@ -115,22 +124,22 @@ const injectRevertString = (provider) => {
                  *    typically supersedes `eth_sendRawTransaction`.
                  * Other methods left intact.
                  */
-                if (method === 'eth_estimateGas') {
+                if (method === "eth_estimateGas") {
                     return (async () => {
                         try {
                             return await originalResult;
-                        }
-                        catch (e) {
+                        } catch (e) {
                             const blockGasLimit = provider.getOptions().miner.blockGasLimit;
                             if (!blockGasLimit) {
-                                (0, log_1.log)('Block gas limit not found for fallback eth_estimateGas value. Using default value of 15M.');
-                                return '0xE4E1C0'; // 15_000_000
+                                (0, log_1.log)(
+                                    "Block gas limit not found for fallback eth_estimateGas value. Using default value of 15M."
+                                );
+                                return "0xE4E1C0"; // 15_000_000
                             }
                             return blockGasLimit.toString();
                         }
                     })();
-                }
-                else if (method === 'eth_sendRawTransaction') {
+                } else if (method === "eth_sendRawTransaction") {
                     /**
                      * Because we have overriden the gas estimation not to be failing on reverts,
                      * we add a wait during transaction sending to retain original behaviour of
@@ -141,16 +150,14 @@ const injectRevertString = (provider) => {
                         const tx = await etherProvider.getTransaction(transactionHash);
                         try {
                             await tx.wait(); // Will end in an exception if the transaction is failing.
-                        }
-                        catch (e) {
-                            (0, log_1.log)('Transaction failed after sending and waiting.');
+                        } catch (e) {
+                            (0, log_1.log)("Transaction failed after sending and waiting.");
                             await (0, exports.appendRevertString)(etherProvider, e.receipt);
                             throw e;
                         }
                         return transactionHash;
                     })();
-                }
-                else if (method === 'eth_getTransactionReceipt') {
+                } else if (method === "eth_getTransactionReceipt") {
                     return (async () => {
                         const receipt = await originalResult;
                         await (0, exports.appendRevertString)(etherProvider, receipt);
@@ -159,7 +166,7 @@ const injectRevertString = (provider) => {
                 }
                 return originalResult; // Fallback for any other method.
             };
-        }
+        },
     });
 };
 exports.injectRevertString = injectRevertString;
